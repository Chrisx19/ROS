
test_rosserial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008004  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  080081fc  080081fc  000181fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084c8  080084c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080084c8  080084c8  000184c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084d0  080084d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080084d0  080084d0  000184d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084d8  080084d8  000184d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080084dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f68  20000078  08008550  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000fe0  08008550  00020fe0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001835d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad0  00000000  00000000  000383ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0003aed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  0003bf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029dd7  00000000  00000000  0003ce60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013588  00000000  00000000  00066c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001034a4  00000000  00000000  0007a1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017d663  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000496c  00000000  00000000  0017d6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000078 	.word	0x20000078
 8000214:	00000000 	.word	0x00000000
 8000218:	080081e4 	.word	0x080081e4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000007c 	.word	0x2000007c
 8000234:	080081e4 	.word	0x080081e4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	0a5a      	lsrs	r2, r3, #9
 800055c:	490f      	ldr	r1, [pc, #60]	; (800059c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800055e:	fba1 1202 	umull	r1, r2, r1, r2
 8000562:	09d2      	lsrs	r2, r2, #7
 8000564:	490e      	ldr	r1, [pc, #56]	; (80005a0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000566:	fb01 f202 	mul.w	r2, r1, r2
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	0a5b      	lsrs	r3, r3, #9
 8000574:	4a09      	ldr	r2, [pc, #36]	; (800059c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000576:	fba2 2303 	umull	r2, r3, r2, r3
 800057a:	09db      	lsrs	r3, r3, #7
 800057c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	441a      	add	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	00044b83 	.word	0x00044b83
 80005a0:	3b9aca00 	.word	0x3b9aca00

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f003 f88f 	bl	80036ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f80e 	bl	80005cc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f9a8 	bl	8000904 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80005b4:	f000 f980 	bl	80008b8 <_ZL11MX_DMA_Initv>
  MX_TIM1_Init();
 80005b8:	f000 f86e 	bl	8000698 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 80005bc:	f000 f948 	bl	8000850 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 80005c0:	f002 f8a8 	bl	8002714 <setup>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    loop();
 80005c4:	f002 f8c0 	bl	8002748 <loop>
 80005c8:	e7fc      	b.n	80005c4 <main+0x20>
	...

080005cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2234      	movs	r2, #52	; 0x34
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 fc78 	bl	8007ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <_Z18SystemClock_Configv+0xc4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a26      	ldr	r2, [pc, #152]	; (8000690 <_Z18SystemClock_Configv+0xc4>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <_Z18SystemClock_Configv+0xc4>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <_Z18SystemClock_Configv+0xc8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000610:	4a20      	ldr	r2, [pc, #128]	; (8000694 <_Z18SystemClock_Configv+0xc8>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <_Z18SystemClock_Configv+0xc8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000630:	2300      	movs	r3, #0
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4618      	mov	r0, r3
 800063a:	f003 ffa9 	bl	8004590 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	bf14      	ite	ne
 8000644:	2301      	movne	r3, #1
 8000646:	2300      	moveq	r3, #0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 800064e:	f000 fa7b 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f004 fa3d 	bl	8004aec <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	bf14      	ite	ne
 8000678:	2301      	movne	r3, #1
 800067a:	2300      	moveq	r3, #0
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000682:	f000 fa61 	bl	8000b48 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b09a      	sub	sp, #104	; 0x68
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]
 80006ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	222c      	movs	r2, #44	; 0x2c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f007 fbfc 	bl	8007ed0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006d8:	4b5b      	ldr	r3, [pc, #364]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 80006da:	4a5c      	ldr	r2, [pc, #368]	; (800084c <_ZL12MX_TIM1_Initv+0x1b4>)
 80006dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006de:	4b5a      	ldr	r3, [pc, #360]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b58      	ldr	r3, [pc, #352]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006ea:	4b57      	ldr	r3, [pc, #348]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 80006ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f2:	4b55      	ldr	r3, [pc, #340]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006f8:	4b53      	ldr	r3, [pc, #332]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	4b52      	ldr	r3, [pc, #328]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000704:	4850      	ldr	r0, [pc, #320]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 8000706:	f005 f83d 	bl	8005784 <HAL_TIM_Base_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf14      	ite	ne
 8000710:	2301      	movne	r3, #1
 8000712:	2300      	moveq	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 800071a:	f000 fa15 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000724:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000728:	4619      	mov	r1, r3
 800072a:	4847      	ldr	r0, [pc, #284]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 800072c:	f005 faf0 	bl	8005d10 <HAL_TIM_ConfigClockSource>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	bf14      	ite	ne
 8000736:	2301      	movne	r3, #1
 8000738:	2300      	moveq	r3, #0
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8000740:	f000 fa02 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000744:	4840      	ldr	r0, [pc, #256]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 8000746:	f005 f874 	bl	8005832 <HAL_TIM_PWM_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf14      	ite	ne
 8000750:	2301      	movne	r3, #1
 8000752:	2300      	moveq	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 800075a:	f000 f9f5 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075e:	2300      	movs	r3, #0
 8000760:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800076a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800076e:	4619      	mov	r1, r3
 8000770:	4835      	ldr	r0, [pc, #212]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 8000772:	f005 ff55 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 8000786:	f000 f9df 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078a:	2360      	movs	r3, #96	; 0x60
 800078c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000792:	2300      	movs	r3, #0
 8000794:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000796:	2300      	movs	r3, #0
 8000798:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	4826      	ldr	r0, [pc, #152]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 80007b0:	f005 f99a 	bl	8005ae8 <HAL_TIM_PWM_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	bf14      	ite	ne
 80007ba:	2301      	movne	r3, #1
 80007bc:	2300      	moveq	r3, #0
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <_ZL12MX_TIM1_Initv+0x130>
  {
    Error_Handler();
 80007c4:	f000 f9c0 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007cc:	2204      	movs	r2, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	481d      	ldr	r0, [pc, #116]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 80007d2:	f005 f989 	bl	8005ae8 <HAL_TIM_PWM_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 80007e6:	f000 f9af 	bl	8000b48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800080c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4619      	mov	r1, r3
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 8000820:	f005 ff8c 	bl	800673c <HAL_TIMEx_ConfigBreakDeadTime>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	bf14      	ite	ne
 800082a:	2301      	movne	r3, #1
 800082c:	2300      	moveq	r3, #0
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <_ZL12MX_TIM1_Initv+0x1a0>
  {
    Error_Handler();
 8000834:	f000 f988 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <_ZL12MX_TIM1_Initv+0x1b0>)
 800083a:	f002 fd67 	bl	800330c <HAL_TIM_MspPostInit>

}
 800083e:	bf00      	nop
 8000840:	3768      	adds	r7, #104	; 0x68
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000094 	.word	0x20000094
 800084c:	40010000 	.word	0x40010000

08000850 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800085c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000892:	4807      	ldr	r0, [pc, #28]	; (80008b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000894:	f005 ffd0 	bl	8006838 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	bf14      	ite	ne
 800089e:	2301      	movne	r3, #1
 80008a0:	2300      	moveq	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80008a8:	f000 f94e 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000e0 	.word	0x200000e0
 80008b4:	40004400 	.word	0x40004400

080008b8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <_ZL11MX_DMA_Initv+0x48>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <_ZL11MX_DMA_Initv+0x48>)
 80008c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <_ZL11MX_DMA_Initv+0x48>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2010      	movs	r0, #16
 80008dc:	f003 f851 	bl	8003982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008e0:	2010      	movs	r0, #16
 80008e2:	f003 f86a 	bl	80039ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2011      	movs	r0, #17
 80008ec:	f003 f849 	bl	8003982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008f0:	2011      	movs	r0, #17
 80008f2:	f003 f862 	bl	80039ba <HAL_NVIC_EnableIRQ>

}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b85      	ldr	r3, [pc, #532]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a84      	ldr	r2, [pc, #528]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b82      	ldr	r3, [pc, #520]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	4b7f      	ldr	r3, [pc, #508]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a7e      	ldr	r2, [pc, #504]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b7c      	ldr	r3, [pc, #496]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b79      	ldr	r3, [pc, #484]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a78      	ldr	r2, [pc, #480]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b76      	ldr	r3, [pc, #472]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b73      	ldr	r3, [pc, #460]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a72      	ldr	r2, [pc, #456]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b70      	ldr	r3, [pc, #448]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800097a:	4b6d      	ldr	r3, [pc, #436]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a6c      	ldr	r2, [pc, #432]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000980:	f043 0310 	orr.w	r3, r3, #16
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b6a      	ldr	r3, [pc, #424]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0310 	and.w	r3, r3, #16
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	4b67      	ldr	r3, [pc, #412]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a66      	ldr	r2, [pc, #408]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b64      	ldr	r3, [pc, #400]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009aa:	4b61      	ldr	r3, [pc, #388]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a60      	ldr	r2, [pc, #384]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 80009b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b5e      	ldr	r3, [pc, #376]	; (8000b30 <_ZL12MX_GPIO_Initv+0x22c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009c8:	485a      	ldr	r0, [pc, #360]	; (8000b34 <_ZL12MX_GPIO_Initv+0x230>)
 80009ca:	f003 fdc7 	bl	800455c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2140      	movs	r1, #64	; 0x40
 80009d2:	4859      	ldr	r0, [pc, #356]	; (8000b38 <_ZL12MX_GPIO_Initv+0x234>)
 80009d4:	f003 fdc2 	bl	800455c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4853      	ldr	r0, [pc, #332]	; (8000b3c <_ZL12MX_GPIO_Initv+0x238>)
 80009f0:	f003 fc08 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009f4:	2332      	movs	r3, #50	; 0x32
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a04:	230b      	movs	r3, #11
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	484b      	ldr	r0, [pc, #300]	; (8000b3c <_ZL12MX_GPIO_Initv+0x238>)
 8000a10:	f003 fbf8 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a14:	2386      	movs	r3, #134	; 0x86
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a24:	230b      	movs	r3, #11
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4844      	ldr	r0, [pc, #272]	; (8000b40 <_ZL12MX_GPIO_Initv+0x23c>)
 8000a30:	f003 fbe8 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a34:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4839      	ldr	r0, [pc, #228]	; (8000b34 <_ZL12MX_GPIO_Initv+0x230>)
 8000a4e:	f003 fbd9 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a64:	230b      	movs	r3, #11
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4831      	ldr	r0, [pc, #196]	; (8000b34 <_ZL12MX_GPIO_Initv+0x230>)
 8000a70:	f003 fbc8 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a86:	2307      	movs	r3, #7
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	482c      	ldr	r0, [pc, #176]	; (8000b44 <_ZL12MX_GPIO_Initv+0x240>)
 8000a92:	f003 fbb7 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a96:	2340      	movs	r3, #64	; 0x40
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4822      	ldr	r0, [pc, #136]	; (8000b38 <_ZL12MX_GPIO_Initv+0x234>)
 8000aae:	f003 fba9 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481c      	ldr	r0, [pc, #112]	; (8000b38 <_ZL12MX_GPIO_Initv+0x234>)
 8000ac6:	f003 fb9d 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000aca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000adc:	230a      	movs	r3, #10
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4816      	ldr	r0, [pc, #88]	; (8000b40 <_ZL12MX_GPIO_Initv+0x23c>)
 8000ae8:	f003 fb8c 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	480f      	ldr	r0, [pc, #60]	; (8000b40 <_ZL12MX_GPIO_Initv+0x23c>)
 8000b02:	f003 fb7f 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b18:	230b      	movs	r3, #11
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <_ZL12MX_GPIO_Initv+0x234>)
 8000b24:	f003 fb6e 	bl	8004204 <HAL_GPIO_Init>

}
 8000b28:	bf00      	nop
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020400 	.word	0x40020400
 8000b38:	40021800 	.word	0x40021800
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020c00 	.word	0x40020c00

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>

08000b52 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <_ZN3ros3MsgC1Ev+0x1c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	08008498 	.word	0x08008498

08000b94 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
      data()
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffe8 	bl	8000b74 <_ZN3ros3MsgC1Ev>
 8000ba4:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3304      	adds	r3, #4
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ffcf 	bl	8000b52 <_ZN3ros4TimeC1Ev>
    {
    }
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	08008480 	.word	0x08008480

08000bc4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6859      	ldr	r1, [r3, #4]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	b2ca      	uxtb	r2, r1
 8000bde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	0a19      	lsrs	r1, r3, #8
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3301      	adds	r3, #1
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	4413      	add	r3, r2
 8000bee:	b2ca      	uxtb	r2, r1
 8000bf0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	0c19      	lsrs	r1, r3, #16
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	b2ca      	uxtb	r2, r1
 8000c02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	0e19      	lsrs	r1, r3, #24
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	3303      	adds	r3, #3
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6899      	ldr	r1, [r3, #8]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	b2ca      	uxtb	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	0a19      	lsrs	r1, r3, #8
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3301      	adds	r3, #1
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	b2ca      	uxtb	r2, r1
 8000c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	0c19      	lsrs	r1, r3, #16
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3302      	adds	r3, #2
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	b2ca      	uxtb	r2, r1
 8000c4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	0e19      	lsrs	r1, r3, #24
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3303      	adds	r3, #3
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b2ca      	uxtb	r2, r1
 8000c5e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3304      	adds	r3, #4
 8000c64:	60fb      	str	r3, [r7, #12]
      return offset;
 8000c66:	68fb      	ldr	r3, [r7, #12]
    }
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	6839      	ldr	r1, [r7, #0]
 8000c9a:	440b      	add	r3, r1
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	021b      	lsls	r3, r3, #8
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3302      	adds	r3, #2
 8000cae:	6839      	ldr	r1, [r7, #0]
 8000cb0:	440b      	add	r3, r1
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	041b      	lsls	r3, r3, #16
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	3303      	adds	r3, #3
 8000cc4:	6839      	ldr	r1, [r7, #0]
 8000cc6:	440b      	add	r3, r1
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	061b      	lsls	r3, r3, #24
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3301      	adds	r3, #1
 8000cee:	6839      	ldr	r1, [r7, #0]
 8000cf0:	440b      	add	r3, r1
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3302      	adds	r3, #2
 8000d04:	6839      	ldr	r1, [r7, #0]
 8000d06:	440b      	add	r3, r1
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	041b      	lsls	r3, r3, #16
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3303      	adds	r3, #3
 8000d1a:	6839      	ldr	r1, [r7, #0]
 8000d1c:	440b      	add	r3, r1
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	061b      	lsls	r3, r3, #24
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	60fb      	str	r3, [r7, #12]
     return offset;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    }
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	080081fc 	.word	0x080081fc

08000d58 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	0800820c 	.word	0x0800820c

08000d74 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fef8 	bl	8000b74 <_ZN3ros3MsgC1Ev>
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	809a      	strh	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
    {
    }
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	08008468 	.word	0x08008468
 8000db8:	08008230 	.word	0x08008230

08000dbc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	8899      	ldrh	r1, [r3, #4]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b2ca      	uxtb	r2, r1
 8000dd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	889b      	ldrh	r3, [r3, #4]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	b299      	uxth	r1, r3
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	3301      	adds	r3, #1
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	b2ca      	uxtb	r2, r1
 8000dea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	3302      	adds	r3, #2
 8000df0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fa1e 	bl	8000238 <strlen>
 8000dfc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	69b9      	ldr	r1, [r7, #24]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fcdc 	bl	80027c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	18d0      	adds	r0, r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f007 f848 	bl	8007eb4 <memcpy>
      offset += length_topic_name;
 8000e24:	69fa      	ldr	r2, [r7, #28]
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4413      	add	r3, r2
 8000e2a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fa01 	bl	8000238 <strlen>
 8000e36:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	6979      	ldr	r1, [r7, #20]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fcbf 	bl	80027c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	18d0      	adds	r0, r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f007 f82b 	bl	8007eb4 <memcpy>
      offset += length_message_type;
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	4413      	add	r3, r2
 8000e64:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff f9e4 	bl	8000238 <strlen>
 8000e70:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	6939      	ldr	r1, [r7, #16]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 fca2 	bl	80027c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	3304      	adds	r3, #4
 8000e84:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	18d0      	adds	r0, r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4619      	mov	r1, r3
 8000e94:	f007 f80e 	bl	8007eb4 <memcpy>
      offset += length_md5sum;
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000ea6:	68f9      	ldr	r1, [r7, #12]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	0a19      	lsrs	r1, r3, #8
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b2ca      	uxtb	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	0c19      	lsrs	r1, r3, #16
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3302      	adds	r3, #2
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	0e19      	lsrs	r1, r3, #24
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3303      	adds	r3, #3
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	b2ca      	uxtb	r2, r1
 8000ee0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	61fb      	str	r3, [r7, #28]
      return offset;
 8000ee8:	69fb      	ldr	r3, [r7, #28]
    }
 8000eea:	4618      	mov	r0, r3
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b08a      	sub	sp, #40	; 0x28
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	889b      	ldrh	r3, [r3, #4]
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	3301      	adds	r3, #1
 8000f18:	6839      	ldr	r1, [r7, #0]
 8000f1a:	440b      	add	r3, r1
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	3302      	adds	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	441a      	add	r2, r3
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fc5e 	bl	8002800 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	3304      	adds	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4413      	add	r3, r2
 8000f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d20c      	bcs.n	8000f74 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	441a      	add	r2, r3
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	3b01      	subs	r3, #1
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	440b      	add	r3, r1
 8000f68:	7812      	ldrb	r2, [r2, #0]
 8000f6a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	3301      	adds	r3, #1
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
 8000f72:	e7ec      	b.n	8000f4e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	4413      	add	r3, r2
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	441a      	add	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	4413      	add	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	441a      	add	r2, r3
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 fc2b 	bl	8002800 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	3304      	adds	r3, #4
 8000fae:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	623b      	str	r3, [r7, #32]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4413      	add	r3, r2
 8000fba:	6a3a      	ldr	r2, [r7, #32]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d20c      	bcs.n	8000fda <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	6a3b      	ldr	r3, [r7, #32]
 8000fc4:	441a      	add	r2, r3
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	6839      	ldr	r1, [r7, #0]
 8000fcc:	440b      	add	r3, r1
 8000fce:	7812      	ldrb	r2, [r2, #0]
 8000fd0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
 8000fd8:	e7ec      	b.n	8000fb4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4413      	add	r3, r2
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	441a      	add	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	441a      	add	r2, r3
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fbf8 	bl	8002800 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	3304      	adds	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	429a      	cmp	r2, r3
 8001024:	d20c      	bcs.n	8001040 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	441a      	add	r2, r3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	3b01      	subs	r3, #1
 8001030:	6839      	ldr	r1, [r7, #0]
 8001032:	440b      	add	r3, r1
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	3301      	adds	r3, #1
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e7ec      	b.n	800101a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4413      	add	r3, r2
 8001046:	3b01      	subs	r3, #1
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	4413      	add	r3, r2
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	3b01      	subs	r3, #1
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	441a      	add	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4413      	add	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	6839      	ldr	r1, [r7, #0]
 800106e:	440a      	add	r2, r1
 8001070:	7812      	ldrb	r2, [r2, #0]
 8001072:	4313      	orrs	r3, r2
 8001074:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	3301      	adds	r3, #1
 800107c:	6839      	ldr	r1, [r7, #0]
 800107e:	440b      	add	r3, r1
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	4313      	orrs	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	3302      	adds	r3, #2
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	440b      	add	r3, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	041b      	lsls	r3, r3, #16
 8001096:	4313      	orrs	r3, r2
 8001098:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	3303      	adds	r3, #3
 80010a0:	6839      	ldr	r1, [r7, #0]
 80010a2:	440b      	add	r3, r1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	061b      	lsls	r3, r3, #24
 80010a8:	4313      	orrs	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	3304      	adds	r3, #4
 80010b6:	61bb      	str	r3, [r7, #24]
     return offset;
 80010b8:	69bb      	ldr	r3, [r7, #24]
    }
 80010ba:	4618      	mov	r0, r3
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	08008234 	.word	0x08008234

080010e0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	08008250 	.word	0x08008250

080010fc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fd34 	bl	8000b74 <_ZN3ros3MsgC1Ev>
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	711a      	strb	r2, [r3, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800111c:	609a      	str	r2, [r3, #8]
    {
    }
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	08008450 	.word	0x08008450
 800112c:	08008230 	.word	0x08008230

08001130 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	4413      	add	r3, r2
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	7912      	ldrb	r2, [r2, #4]
 8001148:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3301      	adds	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f86f 	bl	8000238 <strlen>
 800115a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	4413      	add	r3, r2
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fb2d 	bl	80027c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3304      	adds	r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	18d0      	adds	r0, r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	4619      	mov	r1, r3
 800117e:	f006 fe99 	bl	8007eb4 <memcpy>
      offset += length_msg;
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
      return offset;
 800118a:	68fb      	ldr	r3, [r7, #12]
    }
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	3301      	adds	r3, #1
 80011b2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	441a      	add	r2, r3
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 fb1d 	bl	8002800 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	3304      	adds	r3, #4
 80011ca:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d20c      	bcs.n	80011f6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	441a      	add	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	6839      	ldr	r1, [r7, #0]
 80011e8:	440b      	add	r3, r1
 80011ea:	7812      	ldrb	r2, [r2, #0]
 80011ec:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e7ec      	b.n	80011d0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	3b01      	subs	r3, #1
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	4413      	add	r3, r2
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	3b01      	subs	r3, #1
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	441a      	add	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
     return offset;
 800121a:	693b      	ldr	r3, [r7, #16]
    }
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	08008274 	.word	0x08008274

08001240 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	08008288 	.word	0x08008288

0800125c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fc84 	bl	8000b74 <_ZN3ros3MsgC1Ev>
 800126c:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	08008438 	.word	0x08008438

080012b8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6859      	ldr	r1, [r3, #4]
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	b2ca      	uxtb	r2, r1
 80012d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	0a19      	lsrs	r1, r3, #8
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	3301      	adds	r3, #1
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2ca      	uxtb	r2, r1
 80012e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	0c19      	lsrs	r1, r3, #16
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	3302      	adds	r3, #2
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	b2ca      	uxtb	r2, r1
 80012f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	0e19      	lsrs	r1, r3, #24
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	3303      	adds	r3, #3
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	4413      	add	r3, r2
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	3304      	adds	r3, #4
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	6a3a      	ldr	r2, [r7, #32]
 800131a:	429a      	cmp	r2, r3
 800131c:	d22b      	bcs.n	8001376 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800132c:	6939      	ldr	r1, [r7, #16]
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	4413      	add	r3, r2
 8001334:	b2ca      	uxtb	r2, r1
 8001336:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	0a19      	lsrs	r1, r3, #8
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	3301      	adds	r3, #1
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	4413      	add	r3, r2
 8001344:	b2ca      	uxtb	r2, r1
 8001346:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	0c19      	lsrs	r1, r3, #16
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	3302      	adds	r3, #2
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	4413      	add	r3, r2
 8001354:	b2ca      	uxtb	r2, r1
 8001356:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	0e19      	lsrs	r1, r3, #24
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	3303      	adds	r3, #3
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	4413      	add	r3, r2
 8001364:	b2ca      	uxtb	r2, r1
 8001366:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	3304      	adds	r3, #4
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	3301      	adds	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
 8001374:	e7ce      	b.n	8001314 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6919      	ldr	r1, [r3, #16]
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	4413      	add	r3, r2
 8001380:	b2ca      	uxtb	r2, r1
 8001382:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	0a19      	lsrs	r1, r3, #8
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	3301      	adds	r3, #1
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	4413      	add	r3, r2
 8001392:	b2ca      	uxtb	r2, r1
 8001394:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	0c19      	lsrs	r1, r3, #16
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	3302      	adds	r3, #2
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	b2ca      	uxtb	r2, r1
 80013a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	0e19      	lsrs	r1, r3, #24
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	3303      	adds	r3, #3
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	b2ca      	uxtb	r2, r1
 80013b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	3304      	adds	r3, #4
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d22b      	bcs.n	8001426 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80013dc:	68f9      	ldr	r1, [r7, #12]
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	b2ca      	uxtb	r2, r1
 80013e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	0a19      	lsrs	r1, r3, #8
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	3301      	adds	r3, #1
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	b2ca      	uxtb	r2, r1
 80013f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	0c19      	lsrs	r1, r3, #16
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	3302      	adds	r3, #2
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	4413      	add	r3, r2
 8001404:	b2ca      	uxtb	r2, r1
 8001406:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	0e19      	lsrs	r1, r3, #24
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	3303      	adds	r3, #3
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	4413      	add	r3, r2
 8001414:	b2ca      	uxtb	r2, r1
 8001416:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	3304      	adds	r3, #4
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	e7ce      	b.n	80013c4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69d9      	ldr	r1, [r3, #28]
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	b2ca      	uxtb	r2, r1
 8001432:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	0a19      	lsrs	r1, r3, #8
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	3301      	adds	r3, #1
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	0c19      	lsrs	r1, r3, #16
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	3302      	adds	r3, #2
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4413      	add	r3, r2
 8001454:	b2ca      	uxtb	r2, r1
 8001456:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	0e19      	lsrs	r1, r3, #24
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	3303      	adds	r3, #3
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	4413      	add	r3, r2
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	3304      	adds	r3, #4
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	429a      	cmp	r2, r3
 800147c:	d228      	bcs.n	80014d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe fed4 	bl	8000238 <strlen>
 8001490:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	4413      	add	r3, r2
 8001498:	6979      	ldr	r1, [r7, #20]
 800149a:	4618      	mov	r0, r3
 800149c:	f001 f992 	bl	80027c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	3304      	adds	r3, #4
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4619      	mov	r1, r3
 80014bc:	f006 fcfa 	bl	8007eb4 <memcpy>
      offset += length_stringsi;
 80014c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	4413      	add	r3, r2
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	3301      	adds	r3, #1
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	e7d1      	b.n	8001474 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80014d2:	4618      	mov	r0, r3
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80014da:	b580      	push	{r7, lr}
 80014dc:	b08e      	sub	sp, #56	; 0x38
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80014e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80014f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f4:	3301      	adds	r3, #1
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	6a3a      	ldr	r2, [r7, #32]
 8001500:	4313      	orrs	r3, r2
 8001502:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001506:	3302      	adds	r3, #2
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	041b      	lsls	r3, r3, #16
 8001510:	6a3a      	ldr	r2, [r7, #32]
 8001512:	4313      	orrs	r3, r2
 8001514:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001518:	3303      	adds	r3, #3
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	6a3a      	ldr	r2, [r7, #32]
 8001524:	4313      	orrs	r3, r2
 8001526:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152a:	3304      	adds	r3, #4
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	6a3a      	ldr	r2, [r7, #32]
 8001534:	429a      	cmp	r2, r3
 8001536:	d90a      	bls.n	800154e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f006 fccc 	bl	8007ee0 <realloc>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a3a      	ldr	r2, [r7, #32]
 8001552:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001554:	2300      	movs	r3, #0
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800155e:	429a      	cmp	r2, r3
 8001560:	d236      	bcs.n	80015d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800156a:	6839      	ldr	r1, [r7, #0]
 800156c:	440a      	add	r2, r1
 800156e:	7812      	ldrb	r2, [r2, #0]
 8001570:	4313      	orrs	r3, r2
 8001572:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001578:	3301      	adds	r3, #1
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	440b      	add	r3, r1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	4313      	orrs	r3, r2
 8001584:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800158a:	3302      	adds	r3, #2
 800158c:	6839      	ldr	r1, [r7, #0]
 800158e:	440b      	add	r3, r1
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	041b      	lsls	r3, r3, #16
 8001594:	4313      	orrs	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159c:	3303      	adds	r3, #3
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	440b      	add	r3, r1
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	061b      	lsls	r3, r3, #24
 80015a6:	4313      	orrs	r3, r2
 80015a8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	3304      	adds	r3, #4
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ca:	3301      	adds	r3, #1
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
 80015ce:	e7c3      	b.n	8001558 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80015d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80015da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015dc:	3301      	adds	r3, #1
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80015ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ee:	3302      	adds	r3, #2
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	041b      	lsls	r3, r3, #16
 80015f8:	69fa      	ldr	r2, [r7, #28]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80015fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001600:	3303      	adds	r3, #3
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	4413      	add	r3, r2
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	4313      	orrs	r3, r2
 800160e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001612:	3304      	adds	r3, #4
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	429a      	cmp	r2, r3
 800161e:	d90a      	bls.n	8001636 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699a      	ldr	r2, [r3, #24]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f006 fc58 	bl	8007ee0 <realloc>
 8001630:	4602      	mov	r2, r0
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001646:	429a      	cmp	r2, r3
 8001648:	d236      	bcs.n	80016b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001652:	6839      	ldr	r1, [r7, #0]
 8001654:	440a      	add	r2, r1
 8001656:	7812      	ldrb	r2, [r2, #0]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001660:	3301      	adds	r3, #1
 8001662:	6839      	ldr	r1, [r7, #0]
 8001664:	440b      	add	r3, r1
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001672:	3302      	adds	r3, #2
 8001674:	6839      	ldr	r1, [r7, #0]
 8001676:	440b      	add	r3, r1
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	041b      	lsls	r3, r3, #16
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001684:	3303      	adds	r3, #3
 8001686:	6839      	ldr	r1, [r7, #0]
 8001688:	440b      	add	r3, r1
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	061b      	lsls	r3, r3, #24
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169a:	3304      	adds	r3, #4
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699a      	ldr	r2, [r3, #24]
 80016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	3214      	adds	r2, #20
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	3301      	adds	r3, #1
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b6:	e7c3      	b.n	8001640 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80016b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80016c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c4:	3301      	adds	r3, #1
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	4413      	add	r3, r2
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80016d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d6:	3302      	adds	r3, #2
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	041b      	lsls	r3, r3, #16
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80016e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e8:	3303      	adds	r3, #3
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	4413      	add	r3, r2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	061b      	lsls	r3, r3, #24
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80016f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fa:	3304      	adds	r3, #4
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	429a      	cmp	r2, r3
 8001706:	d90a      	bls.n	800171e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4619      	mov	r1, r3
 8001712:	4610      	mov	r0, r2
 8001714:	f006 fbe4 	bl	8007ee0 <realloc>
 8001718:	4602      	mov	r2, r0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800172e:	429a      	cmp	r2, r3
 8001730:	d23f      	bcs.n	80017b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	441a      	add	r2, r3
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f001 f85e 	bl	8002800 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001746:	3304      	adds	r3, #4
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800174a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
 800174e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001756:	429a      	cmp	r2, r3
 8001758:	d20c      	bcs.n	8001774 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	441a      	add	r2, r3
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	3b01      	subs	r3, #1
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	440b      	add	r3, r1
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	3301      	adds	r3, #1
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
 8001772:	e7ec      	b.n	800174e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	3b01      	subs	r3, #1
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	4413      	add	r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001786:	3b01      	subs	r3, #1
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	441a      	add	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	3220      	adds	r2, #32
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80017aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ac:	3301      	adds	r3, #1
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b0:	e7ba      	b.n	8001728 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80017b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80017b4:	4618      	mov	r0, r3
 80017b6:	3738      	adds	r7, #56	; 0x38
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	0800838c 	.word	0x0800838c

080017d8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	080082ac 	.word	0x080082ac

080017f4 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
  }
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <_ZN13STM32HardwareC1Ev+0x34>)
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	200000e0 	.word	0x200000e0

0800186c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f804 	bl	8001882 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3304      	adds	r3, #4
 8001892:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001896:	4619      	mov	r1, r3
 8001898:	f005 f898 	bl	80069cc <HAL_UART_Receive_DMA>
    }
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZN13STM32Hardware4readEv>:

    int read(){
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
      int c = -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ffa7 	bl	800180c <_ZN13STM32Hardware10getRdmaIndEv>
 80018be:	4603      	mov	r3, r0
 80018c0:	429c      	cmp	r4, r3
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d012      	beq.n	80018f4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80018d4:	1c59      	adds	r1, r3, #1
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	791b      	ldrb	r3, [r3, #4]
 80018e2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80018ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 80018f4:	68fb      	ldr	r3, [r7, #12]
    }
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}
	...

08001900 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800190e:	2b20      	cmp	r3, #32
 8001910:	d108      	bne.n	8001924 <_ZN13STM32Hardware5flushEv+0x24>
 8001912:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	f083 0301 	eor.w	r3, r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <_ZN13STM32Hardware5flushEv+0x24>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <_ZN13STM32Hardware5flushEv+0x26>
 8001924:	2300      	movs	r3, #0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d055      	beq.n	80019d6 <_ZN13STM32Hardware5flushEv+0xd6>
        mutex = true;
 800192a:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <_ZN13STM32Hardware5flushEv+0xe0>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800193c:	429a      	cmp	r2, r3
 800193e:	d047      	beq.n	80019d0 <_ZN13STM32Hardware5flushEv+0xd0>
          uint16_t len = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8001950:	429a      	cmp	r2, r3
 8001952:	d217      	bcs.n	8001984 <_ZN13STM32Hardware5flushEv+0x84>
			len = twind - tfind;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800195a:	b29a      	uxth	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8001962:	b29b      	uxth	r3, r3
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8001972:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	89fa      	ldrh	r2, [r7, #14]
 800197c:	4619      	mov	r1, r3
 800197e:	f004 ffa9 	bl	80068d4 <HAL_UART_Transmit_DMA>
 8001982:	e01f      	b.n	80019c4 <_ZN13STM32Hardware5flushEv+0xc4>
		  }else{
			len = tbuflen - tfind;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800198a:	b29b      	uxth	r3, r3
 800198c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001990:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800199c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	89fa      	ldrh	r2, [r7, #14]
 80019a6:	4619      	mov	r1, r3
 80019a8:	f004 ff94 	bl	80068d4 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80019bc:	b29b      	uxth	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	f004 ff88 	bl	80068d4 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <_ZN13STM32Hardware5flushEv+0xe0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
      }
    }
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000228 	.word	0x20000228

080019e4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
      int n = length;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fa:	bfa8      	it	ge
 80019fc:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8001a00:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8001a08:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	bf28      	it	cs
 8001a12:	4613      	movcs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8001a1c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f006 fa43 	bl	8007eb4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	4413      	add	r3, r2
 8001a38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d00b      	beq.n	8001a62 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	18d1      	adds	r1, r2, r3
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f006 fa29 	bl	8007eb4 <memcpy>
      }

      flush();
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f7ff ff4c 	bl	8001900 <_ZN13STM32Hardware5flushEv>
    }
 8001a68:	bf00      	nop
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	f001 fe78 	bl	800376c <HAL_GetTick>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f86e 	bl	8000b74 <_ZN3ros3MsgC1Ev>
 8001a98:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	080083f4 	.word	0x080083f4

08001ad8 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ad8:	b480      	push	{r7}
 8001ada:	b08b      	sub	sp, #44	; 0x2c
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aec:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8001af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af6:	6838      	ldr	r0, [r7, #0]
 8001af8:	4401      	add	r1, r0
 8001afa:	b2d3      	uxtb	r3, r2
 8001afc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8001afe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	0a02      	lsrs	r2, r0, #8
 8001b0c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001b10:	0a0b      	lsrs	r3, r1, #8
 8001b12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b14:	3101      	adds	r1, #1
 8001b16:	6838      	ldr	r0, [r7, #0]
 8001b18:	4401      	add	r1, r0
 8001b1a:	b2d3      	uxtb	r3, r2
 8001b1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8001b1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	0c02      	lsrs	r2, r0, #16
 8001b2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b30:	0c0b      	lsrs	r3, r1, #16
 8001b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b34:	3102      	adds	r1, #2
 8001b36:	6838      	ldr	r0, [r7, #0]
 8001b38:	4401      	add	r1, r0
 8001b3a:	b2d3      	uxtb	r3, r2
 8001b3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8001b3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	0e02      	lsrs	r2, r0, #24
 8001b4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b50:	0e0b      	lsrs	r3, r1, #24
 8001b52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b54:	3103      	adds	r1, #3
 8001b56:	6838      	ldr	r0, [r7, #0]
 8001b58:	4401      	add	r1, r0
 8001b5a:	b2d3      	uxtb	r3, r2
 8001b5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8001b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	000a      	movs	r2, r1
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b70:	3104      	adds	r1, #4
 8001b72:	6838      	ldr	r0, [r7, #0]
 8001b74:	4401      	add	r1, r0
 8001b76:	b2d3      	uxtb	r3, r2
 8001b78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8001b7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	0a0a      	lsrs	r2, r1, #8
 8001b88:	2300      	movs	r3, #0
 8001b8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b8c:	3105      	adds	r1, #5
 8001b8e:	6838      	ldr	r0, [r7, #0]
 8001b90:	4401      	add	r1, r0
 8001b92:	b2d3      	uxtb	r3, r2
 8001b94:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8001b96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	0c0a      	lsrs	r2, r1, #16
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ba8:	3106      	adds	r1, #6
 8001baa:	6838      	ldr	r0, [r7, #0]
 8001bac:	4401      	add	r1, r0
 8001bae:	b2d3      	uxtb	r3, r2
 8001bb0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8001bb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	0e0a      	lsrs	r2, r1, #24
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bc4:	3107      	adds	r1, #7
 8001bc6:	6838      	ldr	r0, [r7, #0]
 8001bc8:	4401      	add	r1, r0
 8001bca:	b2d3      	uxtb	r3, r2
 8001bcc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	3308      	adds	r3, #8
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001bda:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8001bde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001be2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001be4:	6838      	ldr	r0, [r7, #0]
 8001be6:	4401      	add	r1, r0
 8001be8:	b2d3      	uxtb	r3, r2
 8001bea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8001bec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	0a02      	lsrs	r2, r0, #8
 8001bfa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001bfe:	0a0b      	lsrs	r3, r1, #8
 8001c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c02:	3101      	adds	r1, #1
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	4401      	add	r1, r0
 8001c08:	b2d3      	uxtb	r3, r2
 8001c0a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8001c0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	0c02      	lsrs	r2, r0, #16
 8001c1a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001c1e:	0c0b      	lsrs	r3, r1, #16
 8001c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c22:	3102      	adds	r1, #2
 8001c24:	6838      	ldr	r0, [r7, #0]
 8001c26:	4401      	add	r1, r0
 8001c28:	b2d3      	uxtb	r3, r2
 8001c2a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8001c2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	0e02      	lsrs	r2, r0, #24
 8001c3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c3e:	0e0b      	lsrs	r3, r1, #24
 8001c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c42:	3103      	adds	r1, #3
 8001c44:	6838      	ldr	r0, [r7, #0]
 8001c46:	4401      	add	r1, r0
 8001c48:	b2d3      	uxtb	r3, r2
 8001c4a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8001c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	000a      	movs	r2, r1
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c5e:	3104      	adds	r1, #4
 8001c60:	6838      	ldr	r0, [r7, #0]
 8001c62:	4401      	add	r1, r0
 8001c64:	b2d3      	uxtb	r3, r2
 8001c66:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001c68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	0a0a      	lsrs	r2, r1, #8
 8001c76:	2300      	movs	r3, #0
 8001c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c7a:	3105      	adds	r1, #5
 8001c7c:	6838      	ldr	r0, [r7, #0]
 8001c7e:	4401      	add	r1, r0
 8001c80:	b2d3      	uxtb	r3, r2
 8001c82:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001c84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	0c0a      	lsrs	r2, r1, #16
 8001c92:	2300      	movs	r3, #0
 8001c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c96:	3106      	adds	r1, #6
 8001c98:	6838      	ldr	r0, [r7, #0]
 8001c9a:	4401      	add	r1, r0
 8001c9c:	b2d3      	uxtb	r3, r2
 8001c9e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8001ca0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	0e0a      	lsrs	r2, r1, #24
 8001cae:	2300      	movs	r3, #0
 8001cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cb2:	3107      	adds	r1, #7
 8001cb4:	6838      	ldr	r0, [r7, #0]
 8001cb6:	4401      	add	r1, r0
 8001cb8:	b2d3      	uxtb	r3, r2
 8001cba:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001cc8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8001ccc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cd2:	6838      	ldr	r0, [r7, #0]
 8001cd4:	4401      	add	r1, r0
 8001cd6:	b2d3      	uxtb	r3, r2
 8001cd8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8001cda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	0a02      	lsrs	r2, r0, #8
 8001ce8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001cec:	0a0b      	lsrs	r3, r1, #8
 8001cee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cf0:	3101      	adds	r1, #1
 8001cf2:	6838      	ldr	r0, [r7, #0]
 8001cf4:	4401      	add	r1, r0
 8001cf6:	b2d3      	uxtb	r3, r2
 8001cf8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8001cfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	0c02      	lsrs	r2, r0, #16
 8001d08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001d0c:	0c0b      	lsrs	r3, r1, #16
 8001d0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d10:	3102      	adds	r1, #2
 8001d12:	6838      	ldr	r0, [r7, #0]
 8001d14:	4401      	add	r1, r0
 8001d16:	b2d3      	uxtb	r3, r2
 8001d18:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8001d1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	0e02      	lsrs	r2, r0, #24
 8001d28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d2c:	0e0b      	lsrs	r3, r1, #24
 8001d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d30:	3103      	adds	r1, #3
 8001d32:	6838      	ldr	r0, [r7, #0]
 8001d34:	4401      	add	r1, r0
 8001d36:	b2d3      	uxtb	r3, r2
 8001d38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8001d3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	000a      	movs	r2, r1
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d4c:	3104      	adds	r1, #4
 8001d4e:	6838      	ldr	r0, [r7, #0]
 8001d50:	4401      	add	r1, r0
 8001d52:	b2d3      	uxtb	r3, r2
 8001d54:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8001d56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	0a0a      	lsrs	r2, r1, #8
 8001d64:	2300      	movs	r3, #0
 8001d66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d68:	3105      	adds	r1, #5
 8001d6a:	6838      	ldr	r0, [r7, #0]
 8001d6c:	4401      	add	r1, r0
 8001d6e:	b2d3      	uxtb	r3, r2
 8001d70:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8001d72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	0c0a      	lsrs	r2, r1, #16
 8001d80:	2300      	movs	r3, #0
 8001d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d84:	3106      	adds	r1, #6
 8001d86:	6838      	ldr	r0, [r7, #0]
 8001d88:	4401      	add	r1, r0
 8001d8a:	b2d3      	uxtb	r3, r2
 8001d8c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8001d8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	0e0a      	lsrs	r2, r1, #24
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001da0:	3107      	adds	r1, #7
 8001da2:	6838      	ldr	r0, [r7, #0]
 8001da4:	4401      	add	r1, r0
 8001da6:	b2d3      	uxtb	r3, r2
 8001da8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	3308      	adds	r3, #8
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001db2:	4618      	mov	r0, r3
 8001db4:	372c      	adds	r7, #44	; 0x2c
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001dbe:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001dc2:	b0eb      	sub	sp, #428	; 0x1ac
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8001dca:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001de0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001de4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001de8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001dec:	4413      	add	r3, r2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2200      	movs	r2, #0
 8001df4:	461c      	mov	r4, r3
 8001df6:	4615      	mov	r5, r2
 8001df8:	ea40 0804 	orr.w	r8, r0, r4
 8001dfc:	ea41 0905 	orr.w	r9, r1, r5
 8001e00:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e04:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001e08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	469a      	mov	sl, r3
 8001e1c:	4693      	mov	fp, r2
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8001e2a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8001e2e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8001e32:	ea40 0402 	orr.w	r4, r0, r2
 8001e36:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e40:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8001e44:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e48:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001e4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e50:	1c9a      	adds	r2, r3, #2
 8001e52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e56:	4413      	add	r3, r2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001e62:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8001e72:	464c      	mov	r4, r9
 8001e74:	0423      	lsls	r3, r4, #16
 8001e76:	4644      	mov	r4, r8
 8001e78:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8001e7c:	4644      	mov	r4, r8
 8001e7e:	0422      	lsls	r2, r4, #16
 8001e80:	ea40 0402 	orr.w	r4, r0, r2
 8001e84:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001e8e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8001e92:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e96:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001e9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e9e:	1cda      	adds	r2, r3, #3
 8001ea0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001eb0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001eb4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001eb8:	4623      	mov	r3, r4
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001ec0:	4623      	mov	r3, r4
 8001ec2:	061b      	lsls	r3, r3, #24
 8001ec4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001ec8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8001ecc:	4623      	mov	r3, r4
 8001ece:	4303      	orrs	r3, r0
 8001ed0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ed4:	462b      	mov	r3, r5
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001edc:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8001ee0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001ee4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001ee8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001eec:	1d1a      	adds	r2, r3, #4
 8001eee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001efe:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8001f0e:	0023      	movs	r3, r4
 8001f10:	2200      	movs	r2, #0
 8001f12:	ea40 0402 	orr.w	r4, r0, r2
 8001f16:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8001f1a:	430b      	orrs	r3, r1
 8001f1c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001f20:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8001f24:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001f28:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001f2c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f30:	1d5a      	adds	r2, r3, #5
 8001f32:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f36:	4413      	add	r3, r2
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001f42:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8001f52:	0223      	lsls	r3, r4, #8
 8001f54:	2200      	movs	r2, #0
 8001f56:	ea40 0402 	orr.w	r4, r0, r2
 8001f5a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001f64:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8001f68:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001f6c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001f70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f74:	1d9a      	adds	r2, r3, #6
 8001f76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2200      	movs	r2, #0
 8001f82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001f86:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8001f96:	0423      	lsls	r3, r4, #16
 8001f98:	2200      	movs	r2, #0
 8001f9a:	ea40 0402 	orr.w	r4, r0, r2
 8001f9e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8001fa2:	430b      	orrs	r3, r1
 8001fa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001fa8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8001fac:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001fb0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001fb4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001fb8:	1dda      	adds	r2, r3, #7
 8001fba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001fca:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8001fda:	0623      	lsls	r3, r4, #24
 8001fdc:	2200      	movs	r2, #0
 8001fde:	ea40 0402 	orr.w	r4, r0, r2
 8001fe2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8001fe6:	430b      	orrs	r3, r1
 8001fe8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001fec:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8001ff0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8001ff4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001ff8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001ffc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002000:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002004:	3308      	adds	r3, #8
 8002006:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002016:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800201a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800201e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002022:	4413      	add	r3, r2
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2200      	movs	r2, #0
 800202a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800202e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002032:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002036:	4623      	mov	r3, r4
 8002038:	4303      	orrs	r3, r0
 800203a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800203e:	462b      	mov	r3, r5
 8002040:	430b      	orrs	r3, r1
 8002042:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002046:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800204a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800204e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002052:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800205c:	4413      	add	r3, r2
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2200      	movs	r2, #0
 8002064:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002068:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002078:	464c      	mov	r4, r9
 800207a:	0223      	lsls	r3, r4, #8
 800207c:	4644      	mov	r4, r8
 800207e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002082:	4644      	mov	r4, r8
 8002084:	0222      	lsls	r2, r4, #8
 8002086:	ea40 0402 	orr.w	r4, r0, r2
 800208a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800208e:	430b      	orrs	r3, r1
 8002090:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002094:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002098:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800209c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80020a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80020a4:	1c9a      	adds	r2, r3, #2
 80020a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2200      	movs	r2, #0
 80020b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80020c6:	464c      	mov	r4, r9
 80020c8:	0423      	lsls	r3, r4, #16
 80020ca:	4644      	mov	r4, r8
 80020cc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80020d0:	4644      	mov	r4, r8
 80020d2:	0422      	lsls	r2, r4, #16
 80020d4:	ea40 0402 	orr.w	r4, r0, r2
 80020d8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80020dc:	430b      	orrs	r3, r1
 80020de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80020e2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80020e6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020ea:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80020ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80020f2:	1cda      	adds	r2, r3, #3
 80020f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020f8:	4413      	add	r3, r2
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2200      	movs	r2, #0
 8002100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002104:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002108:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800210c:	4623      	mov	r3, r4
 800210e:	0a1b      	lsrs	r3, r3, #8
 8002110:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002114:	4623      	mov	r3, r4
 8002116:	061b      	lsls	r3, r3, #24
 8002118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800211c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002120:	4623      	mov	r3, r4
 8002122:	4303      	orrs	r3, r0
 8002124:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002128:	462b      	mov	r3, r5
 800212a:	430b      	orrs	r3, r1
 800212c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002130:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002134:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002138:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800213c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002140:	1d1a      	adds	r2, r3, #4
 8002142:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002146:	4413      	add	r3, r2
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2200      	movs	r2, #0
 800214e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002152:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002162:	0023      	movs	r3, r4
 8002164:	2200      	movs	r2, #0
 8002166:	ea40 0402 	orr.w	r4, r0, r2
 800216a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800216e:	430b      	orrs	r3, r1
 8002170:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002174:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002178:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800217c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002180:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002184:	1d5a      	adds	r2, r3, #5
 8002186:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2200      	movs	r2, #0
 8002192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002196:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80021a6:	0223      	lsls	r3, r4, #8
 80021a8:	2200      	movs	r2, #0
 80021aa:	ea40 0402 	orr.w	r4, r0, r2
 80021ae:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80021b2:	430b      	orrs	r3, r1
 80021b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80021b8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80021bc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80021c0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80021c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021c8:	1d9a      	adds	r2, r3, #6
 80021ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021ce:	4413      	add	r3, r2
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2200      	movs	r2, #0
 80021d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80021ea:	0423      	lsls	r3, r4, #16
 80021ec:	2200      	movs	r2, #0
 80021ee:	ea40 0402 	orr.w	r4, r0, r2
 80021f2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80021f6:	430b      	orrs	r3, r1
 80021f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021fc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002200:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002204:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002208:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800220c:	1dda      	adds	r2, r3, #7
 800220e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002212:	4413      	add	r3, r2
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2200      	movs	r2, #0
 800221a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800221e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800222e:	0623      	lsls	r3, r4, #24
 8002230:	2200      	movs	r2, #0
 8002232:	ea40 0402 	orr.w	r4, r0, r2
 8002236:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800223a:	430b      	orrs	r3, r1
 800223c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002240:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002244:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002248:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800224c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002250:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002254:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002258:	3308      	adds	r3, #8
 800225a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800226a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800226e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002272:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2200      	movs	r2, #0
 800227e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002282:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002286:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800228a:	4623      	mov	r3, r4
 800228c:	4303      	orrs	r3, r0
 800228e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002290:	462b      	mov	r3, r5
 8002292:	430b      	orrs	r3, r1
 8002294:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002296:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800229a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800229e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80022a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022ac:	4413      	add	r3, r2
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2200      	movs	r2, #0
 80022b4:	673b      	str	r3, [r7, #112]	; 0x70
 80022b6:	677a      	str	r2, [r7, #116]	; 0x74
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80022c4:	464c      	mov	r4, r9
 80022c6:	0223      	lsls	r3, r4, #8
 80022c8:	4644      	mov	r4, r8
 80022ca:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80022ce:	4644      	mov	r4, r8
 80022d0:	0222      	lsls	r2, r4, #8
 80022d2:	ea40 0402 	orr.w	r4, r0, r2
 80022d6:	66bc      	str	r4, [r7, #104]	; 0x68
 80022d8:	430b      	orrs	r3, r1
 80022da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022dc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80022e0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022e4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80022e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022ec:	1c9a      	adds	r2, r3, #2
 80022ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2200      	movs	r2, #0
 80022fa:	663b      	str	r3, [r7, #96]	; 0x60
 80022fc:	667a      	str	r2, [r7, #100]	; 0x64
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800230a:	464c      	mov	r4, r9
 800230c:	0423      	lsls	r3, r4, #16
 800230e:	4644      	mov	r4, r8
 8002310:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002314:	4644      	mov	r4, r8
 8002316:	0422      	lsls	r2, r4, #16
 8002318:	ea40 0402 	orr.w	r4, r0, r2
 800231c:	65bc      	str	r4, [r7, #88]	; 0x58
 800231e:	430b      	orrs	r3, r1
 8002320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002322:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002326:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800232a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800232e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002332:	1cda      	adds	r2, r3, #3
 8002334:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002338:	4413      	add	r3, r2
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2200      	movs	r2, #0
 8002340:	653b      	str	r3, [r7, #80]	; 0x50
 8002342:	657a      	str	r2, [r7, #84]	; 0x54
 8002344:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002348:	4623      	mov	r3, r4
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800234e:	4623      	mov	r3, r4
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	64bb      	str	r3, [r7, #72]	; 0x48
 8002354:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002358:	4623      	mov	r3, r4
 800235a:	4303      	orrs	r3, r0
 800235c:	643b      	str	r3, [r7, #64]	; 0x40
 800235e:	462b      	mov	r3, r5
 8002360:	430b      	orrs	r3, r1
 8002362:	647b      	str	r3, [r7, #68]	; 0x44
 8002364:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002368:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800236c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002370:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002374:	1d1a      	adds	r2, r3, #4
 8002376:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800237a:	4413      	add	r3, r2
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2200      	movs	r2, #0
 8002382:	63bb      	str	r3, [r7, #56]	; 0x38
 8002384:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002390:	0023      	movs	r3, r4
 8002392:	2200      	movs	r2, #0
 8002394:	ea40 0402 	orr.w	r4, r0, r2
 8002398:	633c      	str	r4, [r7, #48]	; 0x30
 800239a:	430b      	orrs	r3, r1
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
 800239e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80023a2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80023a6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80023aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023ae:	1d5a      	adds	r2, r3, #5
 80023b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023b4:	4413      	add	r3, r2
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2200      	movs	r2, #0
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80023ca:	0223      	lsls	r3, r4, #8
 80023cc:	2200      	movs	r2, #0
 80023ce:	ea40 0402 	orr.w	r4, r0, r2
 80023d2:	623c      	str	r4, [r7, #32]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
 80023d8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80023dc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80023e0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80023e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023e8:	3306      	adds	r3, #6
 80023ea:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2200      	movs	r2, #0
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	61fa      	str	r2, [r7, #28]
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	69bc      	ldr	r4, [r7, #24]
 8002404:	0423      	lsls	r3, r4, #16
 8002406:	2200      	movs	r2, #0
 8002408:	ea40 0402 	orr.w	r4, r0, r2
 800240c:	613c      	str	r4, [r7, #16]
 800240e:	430b      	orrs	r3, r1
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002416:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800241a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800241e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002422:	3307      	adds	r3, #7
 8002424:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002428:	4413      	add	r3, r2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2200      	movs	r2, #0
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	60fa      	str	r2, [r7, #12]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	68bc      	ldr	r4, [r7, #8]
 800243e:	0623      	lsls	r3, r4, #24
 8002440:	2200      	movs	r2, #0
 8002442:	ea40 0402 	orr.w	r4, r0, r2
 8002446:	603c      	str	r4, [r7, #0]
 8002448:	430b      	orrs	r3, r1
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002450:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002454:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002458:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800245c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002460:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002464:	3308      	adds	r3, #8
 8002466:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800246a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800246e:	4618      	mov	r0, r3
 8002470:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002474:	46bd      	mov	sp, r7
 8002476:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800247a:	4770      	bx	lr

0800247c <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	080082d0 	.word	0x080082d0

08002498 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	080082e8 	.word	0x080082e8

080024b4 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fb58 	bl	8000b74 <_ZN3ros3MsgC1Ev>
 80024c4:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3308      	adds	r3, #8
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fada 	bl	8001a88 <_ZN13geometry_msgs7Vector3C1Ev>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3328      	adds	r3, #40	; 0x28
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fad5 	bl	8001a88 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	080083dc 	.word	0x080083dc

080024ec <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f103 0008 	add.w	r0, r3, #8
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	4413      	add	r3, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f7ff fae6 	bl	8001ad8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4413      	add	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f7ff fad9 	bl	8001ad8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002526:	4602      	mov	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
      return offset;
 800252e:	68fb      	ldr	r3, [r7, #12]
    }
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f103 0008 	add.w	r0, r3, #8
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	4413      	add	r3, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f7ff fc33 	bl	8001dbe <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4413      	add	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7ff fc26 	bl	8001dbe <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002572:	4602      	mov	r2, r0
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
     return offset;
 800257a:	68fb      	ldr	r3, [r7, #12]
    }
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	0800830c 	.word	0x0800830c

080025a0 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	08008320 	.word	0x08008320

080025bc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	08008424 	.word	0x08008424

080025dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ffe8 	bl	80025bc <_ZN3ros15NodeHandleBase_C1Ev>
 80025ec:	4a36      	ldr	r2, [pc, #216]	; (80026c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3304      	adds	r3, #4
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff f91c 	bl	8001834 <_ZN13STM32HardwareC1Ev>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f005 fc51 	bl	8007ed0 <memset>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8002634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f005 fc48 	bl	8007ed0 <memset>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8002646:	2264      	movs	r2, #100	; 0x64
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f005 fc40 	bl	8007ed0 <memset>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f603 4388 	addw	r3, r3, #3208	; 0xc88
 8002656:	2264      	movs	r2, #100	; 0x64
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f005 fc38 	bl	8007ed0 <memset>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2d00 	strb.w	r2, [r3, #3328]	; 0xd00
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2d10 	strb.w	r2, [r3, #3344]	; 0xd10
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f603 5314 	addw	r3, r3, #3348	; 0xd14
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fdd0 	bl	800125c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	080083c8 	.word	0x080083c8

080026cc <HAL_UART_TxCpltCallback>:

void ugv_vel_cb(const geometry_msgs::Twist& ugv_vel_msg);

ros::Subscriber<geometry_msgs::Twist> ugv_vel_sub("cmd_vel_ugv", &ugv_vel_cb);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80026d4:	4805      	ldr	r0, [pc, #20]	; (80026ec <HAL_UART_TxCpltCallback+0x20>)
 80026d6:	f000 f8ed 	bl	80028b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80026da:	4603      	mov	r3, r0
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff f90f 	bl	8001900 <_ZN13STM32Hardware5flushEv>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000022c 	.word	0x2000022c

080026f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <HAL_UART_RxCpltCallback+0x20>)
 80026fa:	f000 f8db 	bl	80028b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80026fe:	4603      	mov	r3, r0
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f8be 	bl	8001882 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000022c 	.word	0x2000022c

08002714 <setup>:

void setup(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  nh.initNode();
 8002718:	4808      	ldr	r0, [pc, #32]	; (800273c <setup+0x28>)
 800271a:	f000 f8d7 	bl	80028cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(ugv_vel_sub);
 800271e:	4908      	ldr	r1, [pc, #32]	; (8002740 <setup+0x2c>)
 8002720:	4806      	ldr	r0, [pc, #24]	; (800273c <setup+0x28>)
 8002722:	f000 f8f0 	bl	8002906 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002726:	2100      	movs	r1, #0
 8002728:	4806      	ldr	r0, [pc, #24]	; (8002744 <setup+0x30>)
 800272a:	f003 f8e3 	bl	80058f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800272e:	2104      	movs	r1, #4
 8002730:	4804      	ldr	r0, [pc, #16]	; (8002744 <setup+0x30>)
 8002732:	f003 f8df 	bl	80058f4 <HAL_TIM_PWM_Start>
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	2000022c 	.word	0x2000022c
 8002740:	20000f68 	.word	0x20000f68
 8002744:	20000094 	.word	0x20000094

08002748 <loop>:

void loop(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  nh.spinOnce();
 800274c:	4803      	ldr	r0, [pc, #12]	; (800275c <loop+0x14>)
 800274e:	f000 f905 	bl	800295c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(10);
 8002752:	200a      	movs	r0, #10
 8002754:	f001 f816 	bl	8003784 <HAL_Delay>
}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}
 800275c:	2000022c 	.word	0x2000022c

08002760 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE>:

void ugv_vel_cb(const geometry_msgs::Twist& ugv_vel_msg)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

	int drive_duty_cycle = ugv_vel_msg.linear.x;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	ed93 7b04 	vldr	d7, [r3, #16]
 800276e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002772:	ee17 3a90 	vmov	r3, s15
 8002776:	60fb      	str	r3, [r7, #12]

	if (drive_duty_cycle >= 0)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0c      	blt.n	8002798 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x38>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, drive_duty_cycle*400);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002784:	fb03 f202 	mul.w	r2, r3, r2
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x5c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0 *400);
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x5c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2200      	movs	r2, #0
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0*400);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, (drive_duty_cycle*-1) *400);
	}
}
 8002796:	e00a      	b.n	80027ae <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x4e>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0*400);
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x5c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2200      	movs	r2, #0
 800279e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, (drive_duty_cycle*-1) *400);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x60>)
 80027a4:	fb03 f202 	mul.w	r2, r3, r2
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x5c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000094 	.word	0x20000094
 80027c0:	fffffe70 	.word	0xfffffe70

080027c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d80d      	bhi.n	80027f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	fa22 f103 	lsr.w	r1, r2, r3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	b2ca      	uxtb	r2, r1
 80027ea:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3301      	adds	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	e7ee      	b.n	80027d2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d811      	bhi.n	800283e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6839      	ldr	r1, [r7, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	440a      	add	r2, r1
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	4611      	mov	r1, r2
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	00d2      	lsls	r2, r2, #3
 800282c:	fa01 f202 	lsl.w	r2, r1, r2
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3301      	adds	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	e7ea      	b.n	8002814 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	0800840c 	.word	0x0800840c

0800286c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ffe5 	bl	800284c <_ZN3ros11Subscriber_C1Ev>
 8002882:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3310      	adds	r3, #16
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fe11 	bl	80024b4 <_ZN13geometry_msgs5TwistC1Ev>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	659a      	str	r2, [r3, #88]	; 0x58
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	609a      	str	r2, [r3, #8]
  };
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	080083b0 	.word	0x080083b0

080028b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
  }
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3304      	adds	r3, #4
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe ffc7 	bl	800186c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
    bytes_ = 0;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
    index_ = 0;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
    topic_ = 0;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  };
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b18      	cmp	r3, #24
 8002918:	dc19      	bgt.n	800294e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10d      	bne.n	8002946 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002932:	6839      	ldr	r1, [r7, #0]
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	605a      	str	r2, [r3, #4]
        return true;
 8002942:	2301      	movs	r3, #1
 8002944:	e004      	b.n	8002950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3301      	adds	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	e7e2      	b.n	8002914 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 800294e:	2300      	movs	r3, #0
  }
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f881 	bl	8001a70 <_ZN13STM32Hardware4timeEv>
 800296e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800297e:	4293      	cmp	r3, r2
 8002980:	d903      	bls.n	800298a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2d00 	strb.w	r2, [r3, #3328]	; 0xd00
    if (mode_ != MODE_FIRST_FF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002990:	2b00      	cmp	r3, #0
 8002992:	d009      	beq.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	429a      	cmp	r2, r3
 800299e:	d903      	bls.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
      if (spin_timeout_ > 0)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d014      	beq.n	80029dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff f85a 	bl	8001a70 <_ZN13STM32Hardware4timeEv>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad2      	subs	r2, r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 80029c8:	429a      	cmp	r2, r3
 80029ca:	bf8c      	ite	hi
 80029cc:	2301      	movhi	r3, #1
 80029ce:	2300      	movls	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80029d6:	f06f 0301 	mvn.w	r3, #1
 80029da:	e194      	b.n	8002d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe ff5f 	bl	80018a4 <_ZN13STM32Hardware4readEv>
 80029e6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f2c0 8174 	blt.w	8002cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8d3 2cfc 	ldr.w	r2, [r3, #3324]	; 0xcfc
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	441a      	add	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002a06:	2b07      	cmp	r3, #7
 8002a08:	d11e      	bne.n	8002a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8d3 3cf8 	ldr.w	r3, [r3, #3320]	; 0xcf8
 8002a10:	1c59      	adds	r1, r3, #1
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	f8c2 1cf8 	str.w	r1, [r2, #3320]	; 0xcf8
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	b2d1      	uxtb	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4413      	add	r3, r2
 8002a20:	460a      	mov	r2, r1
 8002a22:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8002a2c:	1e5a      	subs	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1b4      	bne.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2208      	movs	r2, #8
 8002a42:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 8002a46:	e7af      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d128      	bne.n	8002aa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2bff      	cmp	r3, #255	; 0xff
 8002a56:	d10d      	bne.n	8002a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f103 0214 	add.w	r2, r3, #20
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
 8002a72:	e799      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fff9 	bl	8001a70 <_ZN13STM32Hardware4timeEv>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	bf8c      	ite	hi
 8002a8c:	2301      	movhi	r3, #1
 8002a8e:	2300      	movls	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d088      	beq.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2d00 	strb.w	r2, [r3, #3328]	; 0xd00
          return SPIN_TIMEOUT;
 8002a9e:	f06f 0301 	mvn.w	r3, #1
 8002aa2:	e130      	b.n	8002d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d118      	bne.n	8002ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2bfe      	cmp	r3, #254	; 0xfe
 8002ab2:	d107      	bne.n	8002ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 8002ac2:	e771      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
          if (configured_ == false)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3d00 	ldrb.w	r3, [r3, #3328]	; 0xd00
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f47f af68 	bne.w	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f918 	bl	8002d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002ade:	e763      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d113      	bne.n	8002b12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
        index_ = 0;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
        mode_++;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
 8002b10:	e74a      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d110      	bne.n	8002b3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	441a      	add	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
        mode_++;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 8002b3c:	e734      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d116      	bne.n	8002b76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8002b4e:	425a      	negs	r2, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	bf58      	it	pl
 8002b56:	4253      	negpl	r3, r2
 8002b58:	2bff      	cmp	r3, #255	; 0xff
 8002b5a:	d107      	bne.n	8002b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 8002b6a:	e71d      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 8002b74:	e718      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	d10f      	bne.n	8002ba0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
        mode_++;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
        checksum_ = data;               /* first byte included in checksum */
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
 8002b9e:	e703      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d117      	bne.n	8002bda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	441a      	add	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
        mode_ = MODE_MESSAGE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
        if (bytes_ == 0)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f47f aeec 	bne.w	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 8002bd8:	e6e6      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	f47f aee1 	bne.w	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
        if ((checksum_ % 256) == 255)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8002bf4:	425a      	negs	r2, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	bf58      	it	pl
 8002bfc:	4253      	negpl	r3, r2
 8002bfe:	2bff      	cmp	r3, #255	; 0xff
 8002c00:	f47f aed2 	bne.w	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d110      	bne.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f87d 	bl	8002d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f898 	bl	8002d4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
            last_sync_receive_time = c_time;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
            return SPIN_ERR;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	e06a      	b.n	8002d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8002c36:	2b0a      	cmp	r3, #10
 8002c38:	d107      	bne.n	8002c4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f960 	bl	8002f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002c48:	e6ae      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8002c50:	2b06      	cmp	r3, #6
 8002c52:	d10e      	bne.n	8002c72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f603 5214 	addw	r2, r3, #3348	; 0xd14
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f7fe fc39 	bl	80014da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2d10 	strb.w	r2, [r3, #3344]	; 0xd10
 8002c70:	e69a      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8002c78:	2b0b      	cmp	r3, #11
 8002c7a:	d104      	bne.n	8002c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2d00 	strb.w	r2, [r3, #3328]	; 0xd00
 8002c84:	e690      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8002c8c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f43f ae84 	beq.w	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8002ca6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002cb0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8002cba:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4798      	blx	r3
    while (true)
 8002cd6:	e667      	b.n	80029a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002cd8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3d00 	ldrb.w	r3, [r3, #3328]	; 0xd00
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00f      	beq.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d906      	bls.n	8002d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f809 	bl	8002d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
    return SPIN_OK;
 8002d04:	2300      	movs	r3, #0
  }
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002d16:	f107 030c 	add.w	r3, r7, #12
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd ff3a 	bl	8000b94 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f107 020c 	add.w	r2, r7, #12
 8002d2a:	210a      	movs	r1, #10
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
    rt_time = hardware_.time();
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3304      	adds	r3, #4
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe fe9b 	bl	8001a70 <_ZN13STM32Hardware4timeEv>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 8002d42:	bf00      	nop
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8002d4a:	b590      	push	{r4, r7, lr}
 8002d4c:	b08b      	sub	sp, #44	; 0x2c
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002d52:	f107 030c 	add.w	r3, r7, #12
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe f80c 	bl	8000d74 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	2b18      	cmp	r3, #24
 8002d64:	dc63      	bgt.n	8002e2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d056      	beq.n	8002e26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	4798      	blx	r3
 8002dc8:	4603      	mov	r3, r0
 8002dca:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4608      	mov	r0, r1
 8002df4:	4798      	blx	r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dfe:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681c      	ldr	r4, [r3, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe fced 	bl	80017f4 <_ZN3ros9Publisher15getEndpointTypeEv>
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	f107 030c 	add.w	r3, r7, #12
 8002e20:	461a      	mov	r2, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	3301      	adds	r3, #1
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2c:	e798      	b.n	8002d60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	2b18      	cmp	r3, #24
 8002e36:	dc5f      	bgt.n	8002ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3c:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d053      	beq.n	8002ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5e:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6e:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002e72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7a:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3308      	adds	r3, #8
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4798      	blx	r3
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002e98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	330c      	adds	r3, #12
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4608      	mov	r0, r1
 8002eb0:	4798      	blx	r3
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eba:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681c      	ldr	r4, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec6:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002eca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed2:	f202 3222 	addw	r2, r2, #802	; 0x322
 8002ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3304      	adds	r3, #4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4798      	blx	r3
 8002ee4:	4601      	mov	r1, r0
 8002ee6:	f107 030c 	add.w	r3, r7, #12
 8002eea:	461a      	mov	r2, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef6:	e79c      	b.n	8002e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2d00 	strb.w	r2, [r3, #3328]	; 0xd00
  }
 8002f00:	bf00      	nop
 8002f02:	372c      	adds	r7, #44	; 0x2c
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd90      	pop	{r4, r7, pc}

08002f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fe3c 	bl	8000b94 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe fda5 	bl	8001a70 <_ZN13STM32Hardware4timeEv>
 8002f26:	4602      	mov	r2, r0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002f32:	f107 0308 	add.w	r3, r7, #8
 8002f36:	6839      	ldr	r1, [r7, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fe9b 	bl	8000c74 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	4915      	ldr	r1, [pc, #84]	; (8002f98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002f44:	fba1 1303 	umull	r1, r3, r1, r3
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	4413      	add	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002f4e:	6939      	ldr	r1, [r7, #16]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002f54:	fba3 0302 	umull	r0, r3, r3, r2
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f5e:	fb00 f303 	mul.w	r3, r0, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	440b      	add	r3, r1
 8002f6c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002f6e:	f107 0308 	add.w	r3, r7, #8
 8002f72:	3304      	adds	r3, #4
 8002f74:	4619      	mov	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f8a6 	bl	80030c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe fd75 	bl	8001a70 <_ZN13STM32Hardware4timeEv>
 8002f86:	4602      	mov	r2, r0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  }
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	10624dd3 	.word	0x10624dd3
 8002f9c:	000f4240 	.word	0x000f4240

08002fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b63      	cmp	r3, #99	; 0x63
 8002fb0:	dd09      	ble.n	8002fc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f893 3d00 	ldrb.w	r3, [r3, #3328]	; 0xd00
 8002fb8:	f083 0301 	eor.w	r3, r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e079      	b.n	80030ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	f602 2224 	addw	r2, r2, #2596	; 0xa24
 8002fd2:	3207      	adds	r2, #7
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
 8002fda:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	22ff      	movs	r2, #255	; 0xff
 8002fe0:	f883 2a24 	strb.w	r2, [r3, #2596]	; 0xa24
    message_out[1] = PROTOCOL_VER;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	22fe      	movs	r2, #254	; 0xfe
 8002fe8:	f883 2a25 	strb.w	r2, [r3, #2597]	; 0xa25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f883 2a26 	strb.w	r2, [r3, #2598]	; 0xa26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f883 2a27 	strb.w	r2, [r3, #2599]	; 0xa27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 2a26 	ldrb.w	r2, [r3, #2598]	; 0xa26
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 3a27 	ldrb.w	r3, [r3, #2599]	; 0xa27
 8003012:	4413      	add	r3, r2
 8003014:	b2db      	uxtb	r3, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f883 2a28 	strb.w	r2, [r3, #2600]	; 0xa28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f883 2a29 	strb.w	r2, [r3, #2601]	; 0xa29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	b21b      	sxth	r3, r3
 800302e:	121b      	asrs	r3, r3, #8
 8003030:	b21b      	sxth	r3, r3
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f883 2a2a 	strb.w	r2, [r3, #2602]	; 0xa2a

    /* calculate checksum */
    int chk = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800303e:	2305      	movs	r3, #5
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3306      	adds	r3, #6
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	429a      	cmp	r2, r3
 800304a:	dc0d      	bgt.n	8003068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4413      	add	r3, r2
 8003052:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	3301      	adds	r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	e7ec      	b.n	8003042 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3307      	adds	r3, #7
 800306c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	425a      	negs	r2, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	bf58      	it	pl
 8003078:	4253      	negpl	r3, r2
 800307a:	b2da      	uxtb	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	1c59      	adds	r1, r3, #1
 8003080:	6179      	str	r1, [r7, #20]
 8003082:	43d2      	mvns	r2, r2
 8003084:	b2d1      	uxtb	r1, r2
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4413      	add	r3, r2
 800308a:	460a      	mov	r2, r1
 800308c:	f883 2a24 	strb.w	r2, [r3, #2596]	; 0xa24

    if (l <= OUTPUT_SIZE)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003096:	dc0a      	bgt.n	80030ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1d18      	adds	r0, r3, #4
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4619      	mov	r1, r3
 80030a6:	f7fe fc9d 	bl	80019e4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	e005      	b.n	80030ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80030ae:	4905      	ldr	r1, [pc, #20]	; (80030c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f849 	bl	8003148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80030ba:	4618      	mov	r0, r3
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	08008344 	.word	0x08008344

080030c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3304      	adds	r3, #4
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fcca 	bl	8001a70 <_ZN13STM32Hardware4timeEv>
 80030dc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4915      	ldr	r1, [pc, #84]	; (800313c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80030e6:	fba1 1303 	umull	r1, r3, r1, r3
 80030ea:	099b      	lsrs	r3, r3, #6
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	1e5a      	subs	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6859      	ldr	r1, [r3, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80030fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003102:	099b      	lsrs	r3, r3, #6
 8003104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003108:	fb00 f303 	mul.w	r3, r0, r3
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	4a0c      	ldr	r2, [pc, #48]	; (8003140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	1aca      	subs	r2, r1, r3
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003118:	4413      	add	r3, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f7fd fa0c 	bl	800054c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	10624dd3 	.word	0x10624dd3
 8003140:	000f4240 	.word	0x000f4240
 8003144:	3b9aca00 	.word	0x3b9aca00

08003148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	2103      	movs	r1, #3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f804 	bl	8003164 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	460b      	mov	r3, r1
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003172:	f107 0314 	add.w	r3, r7, #20
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd ffc0 	bl	80010fc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800317c:	7afb      	ldrb	r3, [r7, #11]
 800317e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f107 0214 	add.w	r2, r7, #20
 800318e:	2107      	movs	r1, #7
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	4798      	blx	r3
  }
 8003194:	bf00      	nop
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <_Z41__static_initialization_and_destruction_0ii>:
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d10d      	bne.n	80031c8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d108      	bne.n	80031c8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 80031b6:	4806      	ldr	r0, [pc, #24]	; (80031d0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80031b8:	f7ff fa10 	bl	80025dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> ugv_vel_sub("cmd_vel_ugv", &ugv_vel_cb);
 80031bc:	2301      	movs	r3, #1
 80031be:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80031c0:	4905      	ldr	r1, [pc, #20]	; (80031d8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80031c2:	4806      	ldr	r0, [pc, #24]	; (80031dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80031c4:	f7ff fb52 	bl	800286c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	2000022c 	.word	0x2000022c
 80031d4:	08002761 	.word	0x08002761
 80031d8:	08008380 	.word	0x08008380
 80031dc:	20000f68 	.word	0x20000f68

080031e0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3310      	adds	r3, #16
 80031ee:	6839      	ldr	r1, [r7, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff f9a1 	bl	8002538 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	3210      	adds	r2, #16
 80031fe:	4610      	mov	r0, r2
 8003200:	4798      	blx	r3
  }
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3310      	adds	r3, #16
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff f9a8 	bl	8002584 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003234:	4603      	mov	r3, r0
  }
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3310      	adds	r3, #16
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff f9a8 	bl	80025a0 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003250:	4603      	mov	r3, r0
  }
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
    return configured_;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3d00 	ldrb.w	r3, [r3, #3328]	; 0xd00
  };
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <_GLOBAL__sub_I_nh>:
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
 8003278:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800327c:	2001      	movs	r0, #1
 800327e:	f7ff ff8d 	bl	800319c <_Z41__static_initialization_and_destruction_0ii>
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <HAL_MspInit+0x44>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <HAL_MspInit+0x44>)
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <HAL_MspInit+0x44>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	607b      	str	r3, [r7, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <HAL_MspInit+0x44>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	4a08      	ldr	r2, [pc, #32]	; (80032c8 <HAL_MspInit+0x44>)
 80032a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ac:	6453      	str	r3, [r2, #68]	; 0x44
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_MspInit+0x44>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800

080032cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <HAL_TIM_Base_MspInit+0x38>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d10b      	bne.n	80032f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_TIM_Base_MspInit+0x3c>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	4a09      	ldr	r2, [pc, #36]	; (8003308 <HAL_TIM_Base_MspInit+0x3c>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ea:	4b07      	ldr	r3, [pc, #28]	; (8003308 <HAL_TIM_Base_MspInit+0x3c>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40010000 	.word	0x40010000
 8003308:	40023800 	.word	0x40023800

0800330c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 030c 	add.w	r3, r7, #12
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a11      	ldr	r2, [pc, #68]	; (8003370 <HAL_TIM_MspPostInit+0x64>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d11c      	bne.n	8003368 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_TIM_MspPostInit+0x68>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	4a10      	ldr	r2, [pc, #64]	; (8003374 <HAL_TIM_MspPostInit+0x68>)
 8003334:	f043 0310 	orr.w	r3, r3, #16
 8003338:	6313      	str	r3, [r2, #48]	; 0x30
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_TIM_MspPostInit+0x68>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003346:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800334a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003358:	2301      	movs	r3, #1
 800335a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800335c:	f107 030c 	add.w	r3, r7, #12
 8003360:	4619      	mov	r1, r3
 8003362:	4805      	ldr	r0, [pc, #20]	; (8003378 <HAL_TIM_MspPostInit+0x6c>)
 8003364:	f000 ff4e 	bl	8004204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003368:	bf00      	nop
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40010000 	.word	0x40010000
 8003374:	40023800 	.word	0x40023800
 8003378:	40021000 	.word	0x40021000

0800337c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b0ae      	sub	sp, #184	; 0xb8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003384:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	2290      	movs	r2, #144	; 0x90
 800339a:	2100      	movs	r1, #0
 800339c:	4618      	mov	r0, r3
 800339e:	f004 fd97 	bl	8007ed0 <memset>
  if(huart->Instance==USART2)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a54      	ldr	r2, [pc, #336]	; (80034f8 <HAL_UART_MspInit+0x17c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	f040 80a1 	bne.w	80034f0 <HAL_UART_MspInit+0x174>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033b2:	2300      	movs	r3, #0
 80033b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033b6:	f107 0314 	add.w	r3, r7, #20
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 fdba 	bl	8004f34 <HAL_RCCEx_PeriphCLKConfig>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80033c6:	f7fd fbbf 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ca:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <HAL_UART_MspInit+0x180>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	4a4b      	ldr	r2, [pc, #300]	; (80034fc <HAL_UART_MspInit+0x180>)
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d4:	6413      	str	r3, [r2, #64]	; 0x40
 80033d6:	4b49      	ldr	r3, [pc, #292]	; (80034fc <HAL_UART_MspInit+0x180>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033e2:	4b46      	ldr	r3, [pc, #280]	; (80034fc <HAL_UART_MspInit+0x180>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a45      	ldr	r2, [pc, #276]	; (80034fc <HAL_UART_MspInit+0x180>)
 80033e8:	f043 0308 	orr.w	r3, r3, #8
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b43      	ldr	r3, [pc, #268]	; (80034fc <HAL_UART_MspInit+0x180>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80033fa:	2360      	movs	r3, #96	; 0x60
 80033fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340c:	2303      	movs	r3, #3
 800340e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003412:	2307      	movs	r3, #7
 8003414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003418:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800341c:	4619      	mov	r1, r3
 800341e:	4838      	ldr	r0, [pc, #224]	; (8003500 <HAL_UART_MspInit+0x184>)
 8003420:	f000 fef0 	bl	8004204 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003424:	4b37      	ldr	r3, [pc, #220]	; (8003504 <HAL_UART_MspInit+0x188>)
 8003426:	4a38      	ldr	r2, [pc, #224]	; (8003508 <HAL_UART_MspInit+0x18c>)
 8003428:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800342a:	4b36      	ldr	r3, [pc, #216]	; (8003504 <HAL_UART_MspInit+0x188>)
 800342c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003430:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003432:	4b34      	ldr	r3, [pc, #208]	; (8003504 <HAL_UART_MspInit+0x188>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003438:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_UART_MspInit+0x188>)
 800343a:	2200      	movs	r2, #0
 800343c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800343e:	4b31      	ldr	r3, [pc, #196]	; (8003504 <HAL_UART_MspInit+0x188>)
 8003440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003444:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <HAL_UART_MspInit+0x188>)
 8003448:	2200      	movs	r2, #0
 800344a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800344c:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <HAL_UART_MspInit+0x188>)
 800344e:	2200      	movs	r2, #0
 8003450:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003452:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_UART_MspInit+0x188>)
 8003454:	2200      	movs	r2, #0
 8003456:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003458:	4b2a      	ldr	r3, [pc, #168]	; (8003504 <HAL_UART_MspInit+0x188>)
 800345a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800345e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_UART_MspInit+0x188>)
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003466:	4827      	ldr	r0, [pc, #156]	; (8003504 <HAL_UART_MspInit+0x188>)
 8003468:	f000 fac2 	bl	80039f0 <HAL_DMA_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8003472:	f7fd fb69 	bl	8000b48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a22      	ldr	r2, [pc, #136]	; (8003504 <HAL_UART_MspInit+0x188>)
 800347a:	675a      	str	r2, [r3, #116]	; 0x74
 800347c:	4a21      	ldr	r2, [pc, #132]	; (8003504 <HAL_UART_MspInit+0x188>)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003482:	4b22      	ldr	r3, [pc, #136]	; (800350c <HAL_UART_MspInit+0x190>)
 8003484:	4a22      	ldr	r2, [pc, #136]	; (8003510 <HAL_UART_MspInit+0x194>)
 8003486:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003488:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_UART_MspInit+0x190>)
 800348a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800348e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_UART_MspInit+0x190>)
 8003492:	2240      	movs	r2, #64	; 0x40
 8003494:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003496:	4b1d      	ldr	r3, [pc, #116]	; (800350c <HAL_UART_MspInit+0x190>)
 8003498:	2200      	movs	r2, #0
 800349a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_UART_MspInit+0x190>)
 800349e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_UART_MspInit+0x190>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034aa:	4b18      	ldr	r3, [pc, #96]	; (800350c <HAL_UART_MspInit+0x190>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80034b0:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_UART_MspInit+0x190>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_UART_MspInit+0x190>)
 80034b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <HAL_UART_MspInit+0x190>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80034c4:	4811      	ldr	r0, [pc, #68]	; (800350c <HAL_UART_MspInit+0x190>)
 80034c6:	f000 fa93 	bl	80039f0 <HAL_DMA_Init>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 80034d0:	f7fd fb3a 	bl	8000b48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a0d      	ldr	r2, [pc, #52]	; (800350c <HAL_UART_MspInit+0x190>)
 80034d8:	671a      	str	r2, [r3, #112]	; 0x70
 80034da:	4a0c      	ldr	r2, [pc, #48]	; (800350c <HAL_UART_MspInit+0x190>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2100      	movs	r1, #0
 80034e4:	2026      	movs	r0, #38	; 0x26
 80034e6:	f000 fa4c 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034ea:	2026      	movs	r0, #38	; 0x26
 80034ec:	f000 fa65 	bl	80039ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034f0:	bf00      	nop
 80034f2:	37b8      	adds	r7, #184	; 0xb8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40004400 	.word	0x40004400
 80034fc:	40023800 	.word	0x40023800
 8003500:	40020c00 	.word	0x40020c00
 8003504:	20000168 	.word	0x20000168
 8003508:	40026088 	.word	0x40026088
 800350c:	200001c8 	.word	0x200001c8
 8003510:	400260a0 	.word	0x400260a0

08003514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003518:	e7fe      	b.n	8003518 <NMI_Handler+0x4>

0800351a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800351a:	b480      	push	{r7}
 800351c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800351e:	e7fe      	b.n	800351e <HardFault_Handler+0x4>

08003520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003524:	e7fe      	b.n	8003524 <MemManage_Handler+0x4>

08003526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003526:	b480      	push	{r7}
 8003528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800352a:	e7fe      	b.n	800352a <BusFault_Handler+0x4>

0800352c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003530:	e7fe      	b.n	8003530 <UsageFault_Handler+0x4>

08003532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003532:	b480      	push	{r7}
 8003534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800354e:	b480      	push	{r7}
 8003550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003560:	f000 f8f0 	bl	8003744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}

08003568 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <DMA1_Stream5_IRQHandler+0x10>)
 800356e:	f000 fbdf 	bl	8003d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000168 	.word	0x20000168

0800357c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003580:	4802      	ldr	r0, [pc, #8]	; (800358c <DMA1_Stream6_IRQHandler+0x10>)
 8003582:	f000 fbd5 	bl	8003d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200001c8 	.word	0x200001c8

08003590 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <USART2_IRQHandler+0x10>)
 8003596:	f003 fa5d 	bl	8006a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200000e0 	.word	0x200000e0

080035a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
	return 1;
 80035a8:	2301      	movs	r3, #1
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <_kill>:

int _kill(int pid, int sig)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035be:	f004 fc4f 	bl	8007e60 <__errno>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2216      	movs	r2, #22
 80035c6:	601a      	str	r2, [r3, #0]
	return -1;
 80035c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_exit>:

void _exit (int status)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035dc:	f04f 31ff 	mov.w	r1, #4294967295
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ffe7 	bl	80035b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035e6:	e7fe      	b.n	80035e6 <_exit+0x12>

080035e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035f0:	4a14      	ldr	r2, [pc, #80]	; (8003644 <_sbrk+0x5c>)
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <_sbrk+0x60>)
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <_sbrk+0x64>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d102      	bne.n	800360a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <_sbrk+0x64>)
 8003606:	4a12      	ldr	r2, [pc, #72]	; (8003650 <_sbrk+0x68>)
 8003608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <_sbrk+0x64>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4413      	add	r3, r2
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	429a      	cmp	r2, r3
 8003616:	d207      	bcs.n	8003628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003618:	f004 fc22 	bl	8007e60 <__errno>
 800361c:	4603      	mov	r3, r0
 800361e:	220c      	movs	r2, #12
 8003620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
 8003626:	e009      	b.n	800363c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003628:	4b08      	ldr	r3, [pc, #32]	; (800364c <_sbrk+0x64>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <_sbrk+0x64>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	4a05      	ldr	r2, [pc, #20]	; (800364c <_sbrk+0x64>)
 8003638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800363a:	68fb      	ldr	r3, [r7, #12]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20080000 	.word	0x20080000
 8003648:	00000400 	.word	0x00000400
 800364c:	20000fc8 	.word	0x20000fc8
 8003650:	20000fe0 	.word	0x20000fe0

08003654 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <SystemInit+0x20>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	4a05      	ldr	r2, [pc, #20]	; (8003674 <SystemInit+0x20>)
 8003660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800367c:	480d      	ldr	r0, [pc, #52]	; (80036b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800367e:	490e      	ldr	r1, [pc, #56]	; (80036b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003680:	4a0e      	ldr	r2, [pc, #56]	; (80036bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003684:	e002      	b.n	800368c <LoopCopyDataInit>

08003686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800368a:	3304      	adds	r3, #4

0800368c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800368c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800368e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003690:	d3f9      	bcc.n	8003686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003692:	4a0b      	ldr	r2, [pc, #44]	; (80036c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003694:	4c0b      	ldr	r4, [pc, #44]	; (80036c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003698:	e001      	b.n	800369e <LoopFillZerobss>

0800369a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800369a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800369c:	3204      	adds	r2, #4

0800369e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800369e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a0:	d3fb      	bcc.n	800369a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036a2:	f7ff ffd7 	bl	8003654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036a6:	f004 fbe1 	bl	8007e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036aa:	f7fc ff7b 	bl	80005a4 <main>
  bx  lr    
 80036ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80036b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80036bc:	080084dc 	.word	0x080084dc
  ldr r2, =_sbss
 80036c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80036c4:	20000fe0 	.word	0x20000fe0

080036c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036c8:	e7fe      	b.n	80036c8 <ADC_IRQHandler>

080036ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ce:	2003      	movs	r0, #3
 80036d0:	f000 f94c 	bl	800396c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036d4:	2000      	movs	r0, #0
 80036d6:	f000 f805 	bl	80036e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036da:	f7ff fdd3 	bl	8003284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036ec:	4b12      	ldr	r3, [pc, #72]	; (8003738 <HAL_InitTick+0x54>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_InitTick+0x58>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f967 	bl	80039d6 <HAL_SYSTICK_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e00e      	b.n	8003730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b0f      	cmp	r3, #15
 8003716:	d80a      	bhi.n	800372e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003718:	2200      	movs	r2, #0
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	f000 f92f 	bl	8003982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003724:	4a06      	ldr	r2, [pc, #24]	; (8003740 <HAL_InitTick+0x5c>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000000 	.word	0x20000000
 800373c:	20000008 	.word	0x20000008
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_IncTick+0x20>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_IncTick+0x24>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4413      	add	r3, r2
 8003754:	4a04      	ldr	r2, [pc, #16]	; (8003768 <HAL_IncTick+0x24>)
 8003756:	6013      	str	r3, [r2, #0]
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000008 	.word	0x20000008
 8003768:	20000fcc 	.word	0x20000fcc

0800376c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return uwTick;
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <HAL_GetTick+0x14>)
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000fcc 	.word	0x20000fcc

08003784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800378c:	f7ff ffee 	bl	800376c <HAL_GetTick>
 8003790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d005      	beq.n	80037aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_Delay+0x44>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037aa:	bf00      	nop
 80037ac:	f7ff ffde 	bl	800376c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d8f7      	bhi.n	80037ac <HAL_Delay+0x28>
  {
  }
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000008 	.word	0x20000008

080037cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <__NVIC_SetPriorityGrouping+0x40>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037e8:	4013      	ands	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037fa:	4a04      	ldr	r2, [pc, #16]	; (800380c <__NVIC_SetPriorityGrouping+0x40>)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	60d3      	str	r3, [r2, #12]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00
 8003810:	05fa0000 	.word	0x05fa0000

08003814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <__NVIC_GetPriorityGrouping+0x18>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	f003 0307 	and.w	r3, r3, #7
}
 8003822:	4618      	mov	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	2b00      	cmp	r3, #0
 8003840:	db0b      	blt.n	800385a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	f003 021f 	and.w	r2, r3, #31
 8003848:	4907      	ldr	r1, [pc, #28]	; (8003868 <__NVIC_EnableIRQ+0x38>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2001      	movs	r0, #1
 8003852:	fa00 f202 	lsl.w	r2, r0, r2
 8003856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	e000e100 	.word	0xe000e100

0800386c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	6039      	str	r1, [r7, #0]
 8003876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387c:	2b00      	cmp	r3, #0
 800387e:	db0a      	blt.n	8003896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	490c      	ldr	r1, [pc, #48]	; (80038b8 <__NVIC_SetPriority+0x4c>)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	440b      	add	r3, r1
 8003890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003894:	e00a      	b.n	80038ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	4908      	ldr	r1, [pc, #32]	; (80038bc <__NVIC_SetPriority+0x50>)
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	3b04      	subs	r3, #4
 80038a4:	0112      	lsls	r2, r2, #4
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	440b      	add	r3, r1
 80038aa:	761a      	strb	r2, [r3, #24]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000e100 	.word	0xe000e100
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	; 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f1c3 0307 	rsb	r3, r3, #7
 80038da:	2b04      	cmp	r3, #4
 80038dc:	bf28      	it	cs
 80038de:	2304      	movcs	r3, #4
 80038e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3304      	adds	r3, #4
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d902      	bls.n	80038f0 <NVIC_EncodePriority+0x30>
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3b03      	subs	r3, #3
 80038ee:	e000      	b.n	80038f2 <NVIC_EncodePriority+0x32>
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	401a      	ands	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003908:	f04f 31ff 	mov.w	r1, #4294967295
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	43d9      	mvns	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	4313      	orrs	r3, r2
         );
}
 800391a:	4618      	mov	r0, r3
 800391c:	3724      	adds	r7, #36	; 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003938:	d301      	bcc.n	800393e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393a:	2301      	movs	r3, #1
 800393c:	e00f      	b.n	800395e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <SysTick_Config+0x40>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003946:	210f      	movs	r1, #15
 8003948:	f04f 30ff 	mov.w	r0, #4294967295
 800394c:	f7ff ff8e 	bl	800386c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <SysTick_Config+0x40>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003956:	4b04      	ldr	r3, [pc, #16]	; (8003968 <SysTick_Config+0x40>)
 8003958:	2207      	movs	r2, #7
 800395a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	e000e010 	.word	0xe000e010

0800396c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff29 	bl	80037cc <__NVIC_SetPriorityGrouping>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003994:	f7ff ff3e 	bl	8003814 <__NVIC_GetPriorityGrouping>
 8003998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f7ff ff8e 	bl	80038c0 <NVIC_EncodePriority>
 80039a4:	4602      	mov	r2, r0
 80039a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff5d 	bl	800386c <__NVIC_SetPriority>
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff31 	bl	8003830 <__NVIC_EnableIRQ>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ffa2 	bl	8003928 <SysTick_Config>
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7ff feb6 	bl	800376c <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e099      	b.n	8003b40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a2c:	e00f      	b.n	8003a4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a2e:	f7ff fe9d 	bl	800376c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d908      	bls.n	8003a4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2203      	movs	r2, #3
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e078      	b.n	8003b40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e8      	bne.n	8003a2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <HAL_DMA_Init+0x158>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d107      	bne.n	8003ab8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f023 0307 	bic.w	r3, r3, #7
 8003ace:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d117      	bne.n	8003b12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00e      	beq.n	8003b12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fb09 	bl	800410c <DMA_CheckFifoParam>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2240      	movs	r2, #64	; 0x40
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e016      	b.n	8003b40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fac0 	bl	80040a0 <DMA_CalcBaseAndBitshift>
 8003b20:	4603      	mov	r3, r0
 8003b22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	223f      	movs	r2, #63	; 0x3f
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	e010803f 	.word	0xe010803f

08003b4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_DMA_Start_IT+0x26>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e048      	b.n	8003c04 <HAL_DMA_Start_IT+0xb8>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d137      	bne.n	8003bf6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 fa52 	bl	8004044 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba4:	223f      	movs	r2, #63	; 0x3f
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0216 	orr.w	r2, r2, #22
 8003bba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0208 	orr.w	r2, r2, #8
 8003be2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e005      	b.n	8003c02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c1a:	f7ff fda7 	bl	800376c <HAL_GetTick>
 8003c1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d008      	beq.n	8003c3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e052      	b.n	8003ce4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0216 	bic.w	r2, r2, #22
 8003c4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <HAL_DMA_Abort+0x62>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0208 	bic.w	r2, r2, #8
 8003c7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c8e:	e013      	b.n	8003cb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c90:	f7ff fd6c 	bl	800376c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b05      	cmp	r3, #5
 8003c9c:	d90c      	bls.n	8003cb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e015      	b.n	8003ce4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e4      	bne.n	8003c90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	223f      	movs	r2, #63	; 0x3f
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d004      	beq.n	8003d0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2280      	movs	r2, #128	; 0x80
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e00c      	b.n	8003d24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2205      	movs	r2, #5
 8003d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0201 	bic.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003d3c:	4b8e      	ldr	r3, [pc, #568]	; (8003f78 <HAL_DMA_IRQHandler+0x248>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a8e      	ldr	r2, [pc, #568]	; (8003f7c <HAL_DMA_IRQHandler+0x24c>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0a9b      	lsrs	r3, r3, #10
 8003d48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5a:	2208      	movs	r2, #8
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01a      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d013      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0204 	bic.w	r2, r2, #4
 8003d82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d88:	2208      	movs	r2, #8
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	f043 0201 	orr.w	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	2201      	movs	r2, #1
 8003da2:	409a      	lsls	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d012      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dca:	f043 0202 	orr.w	r2, r3, #2
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d012      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00b      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df4:	2204      	movs	r2, #4
 8003df6:	409a      	lsls	r2, r3
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e00:	f043 0204 	orr.w	r2, r3, #4
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d043      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d03c      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d018      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d108      	bne.n	8003e60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d024      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	4798      	blx	r3
 8003e5e:	e01f      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01b      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4798      	blx	r3
 8003e70:	e016      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d107      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0208 	bic.w	r2, r2, #8
 8003e8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 808f 	beq.w	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8087 	beq.w	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d136      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0216 	bic.w	r2, r2, #22
 8003ee8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d103      	bne.n	8003f0a <HAL_DMA_IRQHandler+0x1da>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0208 	bic.w	r2, r2, #8
 8003f18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	223f      	movs	r2, #63	; 0x3f
 8003f20:	409a      	lsls	r2, r3
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d07e      	beq.n	800403c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
        }
        return;
 8003f46:	e079      	b.n	800403c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01d      	beq.n	8003f92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10d      	bne.n	8003f80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d031      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
 8003f74:	e02c      	b.n	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
 8003f76:	bf00      	nop
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d023      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
 8003f90:	e01e      	b.n	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10f      	bne.n	8003fc0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0210 	bic.w	r2, r2, #16
 8003fae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d032      	beq.n	800403e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d022      	beq.n	800402a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2205      	movs	r2, #5
 8003fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	d307      	bcc.n	8004018 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f2      	bne.n	8003ffc <HAL_DMA_IRQHandler+0x2cc>
 8004016:	e000      	b.n	800401a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004018:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
 800403a:	e000      	b.n	800403e <HAL_DMA_IRQHandler+0x30e>
        return;
 800403c:	bf00      	nop
    }
  }
}
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004060:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b40      	cmp	r3, #64	; 0x40
 8004070:	d108      	bne.n	8004084 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004082:	e007      	b.n	8004094 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	3b10      	subs	r3, #16
 80040b0:	4a13      	ldr	r2, [pc, #76]	; (8004100 <DMA_CalcBaseAndBitshift+0x60>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040ba:	4a12      	ldr	r2, [pc, #72]	; (8004104 <DMA_CalcBaseAndBitshift+0x64>)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d908      	bls.n	80040e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <DMA_CalcBaseAndBitshift+0x68>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	1d1a      	adds	r2, r3, #4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	659a      	str	r2, [r3, #88]	; 0x58
 80040de:	e006      	b.n	80040ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <DMA_CalcBaseAndBitshift+0x68>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	aaaaaaab 	.word	0xaaaaaaab
 8004104:	080084c0 	.word	0x080084c0
 8004108:	fffffc00 	.word	0xfffffc00

0800410c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d11f      	bne.n	8004166 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d856      	bhi.n	80041da <DMA_CheckFifoParam+0xce>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <DMA_CheckFifoParam+0x28>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004145 	.word	0x08004145
 8004138:	08004157 	.word	0x08004157
 800413c:	08004145 	.word	0x08004145
 8004140:	080041db 	.word	0x080041db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d046      	beq.n	80041de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004154:	e043      	b.n	80041de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800415e:	d140      	bne.n	80041e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004164:	e03d      	b.n	80041e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416e:	d121      	bne.n	80041b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d837      	bhi.n	80041e6 <DMA_CheckFifoParam+0xda>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <DMA_CheckFifoParam+0x70>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	0800418d 	.word	0x0800418d
 8004180:	08004193 	.word	0x08004193
 8004184:	0800418d 	.word	0x0800418d
 8004188:	080041a5 	.word	0x080041a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      break;
 8004190:	e030      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d025      	beq.n	80041ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a2:	e022      	b.n	80041ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041ac:	d11f      	bne.n	80041ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041b2:	e01c      	b.n	80041ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d903      	bls.n	80041c2 <DMA_CheckFifoParam+0xb6>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d003      	beq.n	80041c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041c0:	e018      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
      break;
 80041c6:	e015      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00e      	beq.n	80041f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
      break;
 80041d8:	e00b      	b.n	80041f2 <DMA_CheckFifoParam+0xe6>
      break;
 80041da:	bf00      	nop
 80041dc:	e00a      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041de:	bf00      	nop
 80041e0:	e008      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041e2:	bf00      	nop
 80041e4:	e006      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041e6:	bf00      	nop
 80041e8:	e004      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041ea:	bf00      	nop
 80041ec:	e002      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041f2:	bf00      	nop
    }
  } 
  
  return status; 
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop

08004204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004204:	b480      	push	{r7}
 8004206:	b089      	sub	sp, #36	; 0x24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800421a:	2300      	movs	r3, #0
 800421c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	e175      	b.n	8004510 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004224:	2201      	movs	r2, #1
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4013      	ands	r3, r2
 8004236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	429a      	cmp	r2, r3
 800423e:	f040 8164 	bne.w	800450a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b01      	cmp	r3, #1
 800424c:	d005      	beq.n	800425a <HAL_GPIO_Init+0x56>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d130      	bne.n	80042bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	2203      	movs	r2, #3
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43db      	mvns	r3, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4013      	ands	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4313      	orrs	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004290:	2201      	movs	r2, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 0201 	and.w	r2, r3, #1
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d017      	beq.n	80042f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	2203      	movs	r2, #3
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d123      	bne.n	800434c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	08da      	lsrs	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3208      	adds	r2, #8
 800430c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	220f      	movs	r2, #15
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4013      	ands	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	08da      	lsrs	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3208      	adds	r2, #8
 8004346:	69b9      	ldr	r1, [r7, #24]
 8004348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	2203      	movs	r2, #3
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0203 	and.w	r2, r3, #3
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80be 	beq.w	800450a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800438e:	4b66      	ldr	r3, [pc, #408]	; (8004528 <HAL_GPIO_Init+0x324>)
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	4a65      	ldr	r2, [pc, #404]	; (8004528 <HAL_GPIO_Init+0x324>)
 8004394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004398:	6453      	str	r3, [r2, #68]	; 0x44
 800439a:	4b63      	ldr	r3, [pc, #396]	; (8004528 <HAL_GPIO_Init+0x324>)
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80043a6:	4a61      	ldr	r2, [pc, #388]	; (800452c <HAL_GPIO_Init+0x328>)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	3302      	adds	r3, #2
 80043ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	220f      	movs	r2, #15
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a58      	ldr	r2, [pc, #352]	; (8004530 <HAL_GPIO_Init+0x32c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d037      	beq.n	8004442 <HAL_GPIO_Init+0x23e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a57      	ldr	r2, [pc, #348]	; (8004534 <HAL_GPIO_Init+0x330>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d031      	beq.n	800443e <HAL_GPIO_Init+0x23a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a56      	ldr	r2, [pc, #344]	; (8004538 <HAL_GPIO_Init+0x334>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d02b      	beq.n	800443a <HAL_GPIO_Init+0x236>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a55      	ldr	r2, [pc, #340]	; (800453c <HAL_GPIO_Init+0x338>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d025      	beq.n	8004436 <HAL_GPIO_Init+0x232>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a54      	ldr	r2, [pc, #336]	; (8004540 <HAL_GPIO_Init+0x33c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01f      	beq.n	8004432 <HAL_GPIO_Init+0x22e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a53      	ldr	r2, [pc, #332]	; (8004544 <HAL_GPIO_Init+0x340>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d019      	beq.n	800442e <HAL_GPIO_Init+0x22a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a52      	ldr	r2, [pc, #328]	; (8004548 <HAL_GPIO_Init+0x344>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_GPIO_Init+0x226>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a51      	ldr	r2, [pc, #324]	; (800454c <HAL_GPIO_Init+0x348>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00d      	beq.n	8004426 <HAL_GPIO_Init+0x222>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a50      	ldr	r2, [pc, #320]	; (8004550 <HAL_GPIO_Init+0x34c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d007      	beq.n	8004422 <HAL_GPIO_Init+0x21e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a4f      	ldr	r2, [pc, #316]	; (8004554 <HAL_GPIO_Init+0x350>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d101      	bne.n	800441e <HAL_GPIO_Init+0x21a>
 800441a:	2309      	movs	r3, #9
 800441c:	e012      	b.n	8004444 <HAL_GPIO_Init+0x240>
 800441e:	230a      	movs	r3, #10
 8004420:	e010      	b.n	8004444 <HAL_GPIO_Init+0x240>
 8004422:	2308      	movs	r3, #8
 8004424:	e00e      	b.n	8004444 <HAL_GPIO_Init+0x240>
 8004426:	2307      	movs	r3, #7
 8004428:	e00c      	b.n	8004444 <HAL_GPIO_Init+0x240>
 800442a:	2306      	movs	r3, #6
 800442c:	e00a      	b.n	8004444 <HAL_GPIO_Init+0x240>
 800442e:	2305      	movs	r3, #5
 8004430:	e008      	b.n	8004444 <HAL_GPIO_Init+0x240>
 8004432:	2304      	movs	r3, #4
 8004434:	e006      	b.n	8004444 <HAL_GPIO_Init+0x240>
 8004436:	2303      	movs	r3, #3
 8004438:	e004      	b.n	8004444 <HAL_GPIO_Init+0x240>
 800443a:	2302      	movs	r3, #2
 800443c:	e002      	b.n	8004444 <HAL_GPIO_Init+0x240>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <HAL_GPIO_Init+0x240>
 8004442:	2300      	movs	r3, #0
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	f002 0203 	and.w	r2, r2, #3
 800444a:	0092      	lsls	r2, r2, #2
 800444c:	4093      	lsls	r3, r2
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004454:	4935      	ldr	r1, [pc, #212]	; (800452c <HAL_GPIO_Init+0x328>)
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	3302      	adds	r3, #2
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004462:	4b3d      	ldr	r3, [pc, #244]	; (8004558 <HAL_GPIO_Init+0x354>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004486:	4a34      	ldr	r2, [pc, #208]	; (8004558 <HAL_GPIO_Init+0x354>)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800448c:	4b32      	ldr	r3, [pc, #200]	; (8004558 <HAL_GPIO_Init+0x354>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044b0:	4a29      	ldr	r2, [pc, #164]	; (8004558 <HAL_GPIO_Init+0x354>)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044b6:	4b28      	ldr	r3, [pc, #160]	; (8004558 <HAL_GPIO_Init+0x354>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	43db      	mvns	r3, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044da:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <HAL_GPIO_Init+0x354>)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044e0:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <HAL_GPIO_Init+0x354>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	43db      	mvns	r3, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4013      	ands	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004504:	4a14      	ldr	r2, [pc, #80]	; (8004558 <HAL_GPIO_Init+0x354>)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	3301      	adds	r3, #1
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2b0f      	cmp	r3, #15
 8004514:	f67f ae86 	bls.w	8004224 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	3724      	adds	r7, #36	; 0x24
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800
 800452c:	40013800 	.word	0x40013800
 8004530:	40020000 	.word	0x40020000
 8004534:	40020400 	.word	0x40020400
 8004538:	40020800 	.word	0x40020800
 800453c:	40020c00 	.word	0x40020c00
 8004540:	40021000 	.word	0x40021000
 8004544:	40021400 	.word	0x40021400
 8004548:	40021800 	.word	0x40021800
 800454c:	40021c00 	.word	0x40021c00
 8004550:	40022000 	.word	0x40022000
 8004554:	40022400 	.word	0x40022400
 8004558:	40013c00 	.word	0x40013c00

0800455c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	807b      	strh	r3, [r7, #2]
 8004568:	4613      	mov	r3, r2
 800456a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800456c:	787b      	ldrb	r3, [r7, #1]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004572:	887a      	ldrh	r2, [r7, #2]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004578:	e003      	b.n	8004582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800457a:	887b      	ldrh	r3, [r7, #2]
 800457c:	041a      	lsls	r2, r3, #16
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	619a      	str	r2, [r3, #24]
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004598:	2300      	movs	r3, #0
 800459a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e29b      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 8087 	beq.w	80046c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045b4:	4b96      	ldr	r3, [pc, #600]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d00c      	beq.n	80045da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045c0:	4b93      	ldr	r3, [pc, #588]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 030c 	and.w	r3, r3, #12
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d112      	bne.n	80045f2 <HAL_RCC_OscConfig+0x62>
 80045cc:	4b90      	ldr	r3, [pc, #576]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d8:	d10b      	bne.n	80045f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045da:	4b8d      	ldr	r3, [pc, #564]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d06c      	beq.n	80046c0 <HAL_RCC_OscConfig+0x130>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d168      	bne.n	80046c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e275      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045fa:	d106      	bne.n	800460a <HAL_RCC_OscConfig+0x7a>
 80045fc:	4b84      	ldr	r3, [pc, #528]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a83      	ldr	r2, [pc, #524]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	e02e      	b.n	8004668 <HAL_RCC_OscConfig+0xd8>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0x9c>
 8004612:	4b7f      	ldr	r3, [pc, #508]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a7e      	ldr	r2, [pc, #504]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	4b7c      	ldr	r3, [pc, #496]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a7b      	ldr	r2, [pc, #492]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e01d      	b.n	8004668 <HAL_RCC_OscConfig+0xd8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004634:	d10c      	bne.n	8004650 <HAL_RCC_OscConfig+0xc0>
 8004636:	4b76      	ldr	r3, [pc, #472]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a75      	ldr	r2, [pc, #468]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 800463c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	4b73      	ldr	r3, [pc, #460]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a72      	ldr	r2, [pc, #456]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	e00b      	b.n	8004668 <HAL_RCC_OscConfig+0xd8>
 8004650:	4b6f      	ldr	r3, [pc, #444]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a6e      	ldr	r2, [pc, #440]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	4b6c      	ldr	r3, [pc, #432]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a6b      	ldr	r2, [pc, #428]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d013      	beq.n	8004698 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7ff f87c 	bl	800376c <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004678:	f7ff f878 	bl	800376c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	; 0x64
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e229      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	4b61      	ldr	r3, [pc, #388]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0xe8>
 8004696:	e014      	b.n	80046c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7ff f868 	bl	800376c <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a0:	f7ff f864 	bl	800376c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e215      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b2:	4b57      	ldr	r3, [pc, #348]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x110>
 80046be:	e000      	b.n	80046c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d069      	beq.n	80047a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ce:	4b50      	ldr	r3, [pc, #320]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046da:	4b4d      	ldr	r3, [pc, #308]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d11c      	bne.n	8004720 <HAL_RCC_OscConfig+0x190>
 80046e6:	4b4a      	ldr	r3, [pc, #296]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d116      	bne.n	8004720 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f2:	4b47      	ldr	r3, [pc, #284]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_RCC_OscConfig+0x17a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e1e9      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470a:	4b41      	ldr	r3, [pc, #260]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	493d      	ldr	r1, [pc, #244]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471e:	e040      	b.n	80047a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d023      	beq.n	8004770 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004728:	4b39      	ldr	r3, [pc, #228]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a38      	ldr	r2, [pc, #224]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7ff f81a 	bl	800376c <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800473c:	f7ff f816 	bl	800376c <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e1c7      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474e:	4b30      	ldr	r3, [pc, #192]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475a:	4b2d      	ldr	r3, [pc, #180]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4929      	ldr	r1, [pc, #164]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 800476a:	4313      	orrs	r3, r2
 800476c:	600b      	str	r3, [r1, #0]
 800476e:	e018      	b.n	80047a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004770:	4b27      	ldr	r3, [pc, #156]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a26      	ldr	r2, [pc, #152]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7fe fff6 	bl	800376c <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004784:	f7fe fff2 	bl	800376c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1a3      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004796:	4b1e      	ldr	r3, [pc, #120]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d038      	beq.n	8004820 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d019      	beq.n	80047ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b6:	4b16      	ldr	r3, [pc, #88]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80047b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c2:	f7fe ffd3 	bl	800376c <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ca:	f7fe ffcf 	bl	800376c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e180      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80047de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x23a>
 80047e8:	e01a      	b.n	8004820 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80047ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ee:	4a08      	ldr	r2, [pc, #32]	; (8004810 <HAL_RCC_OscConfig+0x280>)
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fe ffb9 	bl	800376c <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047fe:	f7fe ffb5 	bl	800376c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d903      	bls.n	8004814 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e166      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
 8004810:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004814:	4b92      	ldr	r3, [pc, #584]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 8004816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1ee      	bne.n	80047fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80a4 	beq.w	8004976 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800482e:	4b8c      	ldr	r3, [pc, #560]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10d      	bne.n	8004856 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800483a:	4b89      	ldr	r3, [pc, #548]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a88      	ldr	r2, [pc, #544]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 8004840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
 8004846:	4b86      	ldr	r3, [pc, #536]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004852:	2301      	movs	r3, #1
 8004854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004856:	4b83      	ldr	r3, [pc, #524]	; (8004a64 <HAL_RCC_OscConfig+0x4d4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d118      	bne.n	8004894 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004862:	4b80      	ldr	r3, [pc, #512]	; (8004a64 <HAL_RCC_OscConfig+0x4d4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a7f      	ldr	r2, [pc, #508]	; (8004a64 <HAL_RCC_OscConfig+0x4d4>)
 8004868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800486e:	f7fe ff7d 	bl	800376c <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004876:	f7fe ff79 	bl	800376c <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b64      	cmp	r3, #100	; 0x64
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e12a      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004888:	4b76      	ldr	r3, [pc, #472]	; (8004a64 <HAL_RCC_OscConfig+0x4d4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d106      	bne.n	80048aa <HAL_RCC_OscConfig+0x31a>
 800489c:	4b70      	ldr	r3, [pc, #448]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	4a6f      	ldr	r2, [pc, #444]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	6713      	str	r3, [r2, #112]	; 0x70
 80048a8:	e02d      	b.n	8004906 <HAL_RCC_OscConfig+0x376>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10c      	bne.n	80048cc <HAL_RCC_OscConfig+0x33c>
 80048b2:	4b6b      	ldr	r3, [pc, #428]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	4a6a      	ldr	r2, [pc, #424]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	6713      	str	r3, [r2, #112]	; 0x70
 80048be:	4b68      	ldr	r3, [pc, #416]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	4a67      	ldr	r2, [pc, #412]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80048c4:	f023 0304 	bic.w	r3, r3, #4
 80048c8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ca:	e01c      	b.n	8004906 <HAL_RCC_OscConfig+0x376>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b05      	cmp	r3, #5
 80048d2:	d10c      	bne.n	80048ee <HAL_RCC_OscConfig+0x35e>
 80048d4:	4b62      	ldr	r3, [pc, #392]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	4a61      	ldr	r2, [pc, #388]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80048da:	f043 0304 	orr.w	r3, r3, #4
 80048de:	6713      	str	r3, [r2, #112]	; 0x70
 80048e0:	4b5f      	ldr	r3, [pc, #380]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	4a5e      	ldr	r2, [pc, #376]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6713      	str	r3, [r2, #112]	; 0x70
 80048ec:	e00b      	b.n	8004906 <HAL_RCC_OscConfig+0x376>
 80048ee:	4b5c      	ldr	r3, [pc, #368]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	4a5b      	ldr	r2, [pc, #364]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	6713      	str	r3, [r2, #112]	; 0x70
 80048fa:	4b59      	ldr	r3, [pc, #356]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	4a58      	ldr	r2, [pc, #352]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 8004900:	f023 0304 	bic.w	r3, r3, #4
 8004904:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d015      	beq.n	800493a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490e:	f7fe ff2d 	bl	800376c <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004914:	e00a      	b.n	800492c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004916:	f7fe ff29 	bl	800376c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f241 3288 	movw	r2, #5000	; 0x1388
 8004924:	4293      	cmp	r3, r2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e0d8      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492c:	4b4c      	ldr	r3, [pc, #304]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 800492e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ee      	beq.n	8004916 <HAL_RCC_OscConfig+0x386>
 8004938:	e014      	b.n	8004964 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493a:	f7fe ff17 	bl	800376c <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004940:	e00a      	b.n	8004958 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fe ff13 	bl	800376c <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e0c2      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004958:	4b41      	ldr	r3, [pc, #260]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1ee      	bne.n	8004942 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004964:	7dfb      	ldrb	r3, [r7, #23]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d105      	bne.n	8004976 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496a:	4b3d      	ldr	r3, [pc, #244]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	4a3c      	ldr	r2, [pc, #240]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 8004970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004974:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 80ae 	beq.w	8004adc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004980:	4b37      	ldr	r3, [pc, #220]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	2b08      	cmp	r3, #8
 800498a:	d06d      	beq.n	8004a68 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d14b      	bne.n	8004a2c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004994:	4b32      	ldr	r3, [pc, #200]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a31      	ldr	r2, [pc, #196]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 800499a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800499e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fe fee4 	bl	800376c <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fe fee0 	bl	800376c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e091      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ba:	4b29      	ldr	r3, [pc, #164]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69da      	ldr	r2, [r3, #28]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	019b      	lsls	r3, r3, #6
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	3b01      	subs	r3, #1
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	061b      	lsls	r3, r3, #24
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	071b      	lsls	r3, r3, #28
 80049f2:	491b      	ldr	r1, [pc, #108]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f8:	4b19      	ldr	r3, [pc, #100]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a18      	ldr	r2, [pc, #96]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 80049fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fe feb2 	bl	800376c <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fe feae 	bl	800376c <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e05f      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x47c>
 8004a2a:	e057      	b.n	8004adc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a0b      	ldr	r2, [pc, #44]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 8004a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fe fe98 	bl	800376c <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fe fe94 	bl	800376c <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e045      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <HAL_RCC_OscConfig+0x4d0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4b0>
 8004a5e:	e03d      	b.n	8004adc <HAL_RCC_OscConfig+0x54c>
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a68:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <HAL_RCC_OscConfig+0x558>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d030      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d129      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d122      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a98:	4013      	ands	r3, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d119      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d10f      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800

08004aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0d0      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b04:	4b6a      	ldr	r3, [pc, #424]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d910      	bls.n	8004b34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b12:	4b67      	ldr	r3, [pc, #412]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 020f 	bic.w	r2, r3, #15
 8004b1a:	4965      	ldr	r1, [pc, #404]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	4b63      	ldr	r3, [pc, #396]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0b8      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d020      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b4c:	4b59      	ldr	r3, [pc, #356]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4a58      	ldr	r2, [pc, #352]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b64:	4b53      	ldr	r3, [pc, #332]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	4a52      	ldr	r2, [pc, #328]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b70:	4b50      	ldr	r3, [pc, #320]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	494d      	ldr	r1, [pc, #308]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d040      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b96:	4b47      	ldr	r3, [pc, #284]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d115      	bne.n	8004bce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e07f      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d107      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bae:	4b41      	ldr	r3, [pc, #260]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e073      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bbe:	4b3d      	ldr	r3, [pc, #244]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e06b      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bce:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f023 0203 	bic.w	r2, r3, #3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4936      	ldr	r1, [pc, #216]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be0:	f7fe fdc4 	bl	800376c <HAL_GetTick>
 8004be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be8:	f7fe fdc0 	bl	800376c <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e053      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfe:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 020c 	and.w	r2, r3, #12
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d1eb      	bne.n	8004be8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c10:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d210      	bcs.n	8004c40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1e:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 020f 	bic.w	r2, r3, #15
 8004c26:	4922      	ldr	r1, [pc, #136]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2e:	4b20      	ldr	r3, [pc, #128]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d001      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e032      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c4c:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4916      	ldr	r1, [pc, #88]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	490e      	ldr	r1, [pc, #56]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c7e:	f000 f821 	bl	8004cc4 <HAL_RCC_GetSysClockFreq>
 8004c82:	4602      	mov	r2, r0
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	490a      	ldr	r1, [pc, #40]	; (8004cb8 <HAL_RCC_ClockConfig+0x1cc>)
 8004c90:	5ccb      	ldrb	r3, [r1, r3]
 8004c92:	fa22 f303 	lsr.w	r3, r2, r3
 8004c96:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <HAL_RCC_ClockConfig+0x1d0>)
 8004c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <HAL_RCC_ClockConfig+0x1d4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fd20 	bl	80036e4 <HAL_InitTick>

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40023c00 	.word	0x40023c00
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	080084a8 	.word	0x080084a8
 8004cbc:	20000000 	.word	0x20000000
 8004cc0:	20000004 	.word	0x20000004

08004cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc8:	b094      	sub	sp, #80	; 0x50
 8004cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cdc:	4b79      	ldr	r3, [pc, #484]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 030c 	and.w	r3, r3, #12
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d00d      	beq.n	8004d04 <HAL_RCC_GetSysClockFreq+0x40>
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	f200 80e1 	bhi.w	8004eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d003      	beq.n	8004cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8004cf6:	e0db      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cf8:	4b73      	ldr	r3, [pc, #460]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cfc:	e0db      	b.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cfe:	4b72      	ldr	r3, [pc, #456]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d02:	e0d8      	b.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d04:	4b6f      	ldr	r3, [pc, #444]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d0c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d0e:	4b6d      	ldr	r3, [pc, #436]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d063      	beq.n	8004de2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d1a:	4b6a      	ldr	r3, [pc, #424]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	099b      	lsrs	r3, r3, #6
 8004d20:	2200      	movs	r2, #0
 8004d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d2e:	2300      	movs	r3, #0
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
 8004d32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d36:	4622      	mov	r2, r4
 8004d38:	462b      	mov	r3, r5
 8004d3a:	f04f 0000 	mov.w	r0, #0
 8004d3e:	f04f 0100 	mov.w	r1, #0
 8004d42:	0159      	lsls	r1, r3, #5
 8004d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d48:	0150      	lsls	r0, r2, #5
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4621      	mov	r1, r4
 8004d50:	1a51      	subs	r1, r2, r1
 8004d52:	6139      	str	r1, [r7, #16]
 8004d54:	4629      	mov	r1, r5
 8004d56:	eb63 0301 	sbc.w	r3, r3, r1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d68:	4659      	mov	r1, fp
 8004d6a:	018b      	lsls	r3, r1, #6
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d72:	4651      	mov	r1, sl
 8004d74:	018a      	lsls	r2, r1, #6
 8004d76:	4651      	mov	r1, sl
 8004d78:	ebb2 0801 	subs.w	r8, r2, r1
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d96:	4690      	mov	r8, r2
 8004d98:	4699      	mov	r9, r3
 8004d9a:	4623      	mov	r3, r4
 8004d9c:	eb18 0303 	adds.w	r3, r8, r3
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	462b      	mov	r3, r5
 8004da4:	eb49 0303 	adc.w	r3, r9, r3
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004db6:	4629      	mov	r1, r5
 8004db8:	028b      	lsls	r3, r1, #10
 8004dba:	4621      	mov	r1, r4
 8004dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	028a      	lsls	r2, r1, #10
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dca:	2200      	movs	r2, #0
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dd4:	f7fb fa38 	bl	8000248 <__aeabi_uldivmod>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4613      	mov	r3, r2
 8004dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de0:	e058      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de2:	4b38      	ldr	r3, [pc, #224]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	2200      	movs	r2, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	4611      	mov	r1, r2
 8004dee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004df2:	623b      	str	r3, [r7, #32]
 8004df4:	2300      	movs	r3, #0
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
 8004df8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	464b      	mov	r3, r9
 8004e00:	f04f 0000 	mov.w	r0, #0
 8004e04:	f04f 0100 	mov.w	r1, #0
 8004e08:	0159      	lsls	r1, r3, #5
 8004e0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e0e:	0150      	lsls	r0, r2, #5
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4641      	mov	r1, r8
 8004e16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e34:	ebb2 040a 	subs.w	r4, r2, sl
 8004e38:	eb63 050b 	sbc.w	r5, r3, fp
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	00eb      	lsls	r3, r5, #3
 8004e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e4a:	00e2      	lsls	r2, r4, #3
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	461d      	mov	r5, r3
 8004e50:	4643      	mov	r3, r8
 8004e52:	18e3      	adds	r3, r4, r3
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	464b      	mov	r3, r9
 8004e58:	eb45 0303 	adc.w	r3, r5, r3
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	028b      	lsls	r3, r1, #10
 8004e6e:	4621      	mov	r1, r4
 8004e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e74:	4621      	mov	r1, r4
 8004e76:	028a      	lsls	r2, r1, #10
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7e:	2200      	movs	r2, #0
 8004e80:	61bb      	str	r3, [r7, #24]
 8004e82:	61fa      	str	r2, [r7, #28]
 8004e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e88:	f7fb f9de 	bl	8000248 <__aeabi_uldivmod>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4613      	mov	r3, r2
 8004e92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	0c1b      	lsrs	r3, r3, #16
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004ea4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eae:	e002      	b.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3750      	adds	r7, #80	; 0x50
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	00f42400 	.word	0x00f42400

08004ecc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000000 	.word	0x20000000

08004ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ee8:	f7ff fff0 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	0a9b      	lsrs	r3, r3, #10
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	4903      	ldr	r1, [pc, #12]	; (8004f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40023800 	.word	0x40023800
 8004f08:	080084b8 	.word	0x080084b8

08004f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f10:	f7ff ffdc 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004f14:	4602      	mov	r2, r0
 8004f16:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	0b5b      	lsrs	r3, r3, #13
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	4903      	ldr	r1, [pc, #12]	; (8004f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f22:	5ccb      	ldrb	r3, [r1, r3]
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	080084b8 	.word	0x080084b8

08004f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d012      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f5c:	4b69      	ldr	r3, [pc, #420]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4a68      	ldr	r2, [pc, #416]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f66:	6093      	str	r3, [r2, #8]
 8004f68:	4b66      	ldr	r3, [pc, #408]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f70:	4964      	ldr	r1, [pc, #400]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d017      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f8e:	4b5d      	ldr	r3, [pc, #372]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9c:	4959      	ldr	r1, [pc, #356]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fac:	d101      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d017      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fca:	4b4e      	ldr	r3, [pc, #312]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	494a      	ldr	r1, [pc, #296]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe8:	d101      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004fea:	2301      	movs	r3, #1
 8004fec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005006:	2301      	movs	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 808b 	beq.w	800512e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005018:	4b3a      	ldr	r3, [pc, #232]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	4a39      	ldr	r2, [pc, #228]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005022:	6413      	str	r3, [r2, #64]	; 0x40
 8005024:	4b37      	ldr	r3, [pc, #220]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005030:	4b35      	ldr	r3, [pc, #212]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a34      	ldr	r2, [pc, #208]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800503a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503c:	f7fe fb96 	bl	800376c <HAL_GetTick>
 8005040:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005044:	f7fe fb92 	bl	800376c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b64      	cmp	r3, #100	; 0x64
 8005050:	d901      	bls.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e38f      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005056:	4b2c      	ldr	r3, [pc, #176]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005062:	4b28      	ldr	r3, [pc, #160]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d035      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	429a      	cmp	r2, r3
 800507e:	d02e      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005080:	4b20      	ldr	r3, [pc, #128]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005088:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800508a:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005094:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005096:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	4a1a      	ldr	r2, [pc, #104]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800509c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80050a2:	4a18      	ldr	r2, [pc, #96]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050a8:	4b16      	ldr	r3, [pc, #88]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d114      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fe fb5a 	bl	800376c <HAL_GetTick>
 80050b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fe fb56 	bl	800376c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e351      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0ee      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ea:	d111      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80050ec:	4b05      	ldr	r3, [pc, #20]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050f8:	4b04      	ldr	r3, [pc, #16]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050fa:	400b      	ands	r3, r1
 80050fc:	4901      	ldr	r1, [pc, #4]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
 8005102:	e00b      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005104:	40023800 	.word	0x40023800
 8005108:	40007000 	.word	0x40007000
 800510c:	0ffffcff 	.word	0x0ffffcff
 8005110:	4bac      	ldr	r3, [pc, #688]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4aab      	ldr	r2, [pc, #684]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005116:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800511a:	6093      	str	r3, [r2, #8]
 800511c:	4ba9      	ldr	r3, [pc, #676]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800511e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005128:	49a6      	ldr	r1, [pc, #664]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512a:	4313      	orrs	r3, r2
 800512c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b00      	cmp	r3, #0
 8005138:	d010      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800513a:	4ba2      	ldr	r3, [pc, #648]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005140:	4aa0      	ldr	r2, [pc, #640]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005146:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800514a:	4b9e      	ldr	r3, [pc, #632]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	499b      	ldr	r1, [pc, #620]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005168:	4b96      	ldr	r3, [pc, #600]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005176:	4993      	ldr	r1, [pc, #588]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800518a:	4b8e      	ldr	r3, [pc, #568]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005198:	498a      	ldr	r1, [pc, #552]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051ac:	4b85      	ldr	r3, [pc, #532]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ba:	4982      	ldr	r1, [pc, #520]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051ce:	4b7d      	ldr	r3, [pc, #500]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051dc:	4979      	ldr	r1, [pc, #484]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051f0:	4b74      	ldr	r3, [pc, #464]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f6:	f023 0203 	bic.w	r2, r3, #3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fe:	4971      	ldr	r1, [pc, #452]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005212:	4b6c      	ldr	r3, [pc, #432]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005218:	f023 020c 	bic.w	r2, r3, #12
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005220:	4968      	ldr	r1, [pc, #416]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005234:	4b63      	ldr	r3, [pc, #396]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005242:	4960      	ldr	r1, [pc, #384]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005256:	4b5b      	ldr	r3, [pc, #364]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005264:	4957      	ldr	r1, [pc, #348]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005278:	4b52      	ldr	r3, [pc, #328]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	494f      	ldr	r1, [pc, #316]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800529a:	4b4a      	ldr	r3, [pc, #296]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a8:	4946      	ldr	r1, [pc, #280]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80052bc:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ca:	493e      	ldr	r1, [pc, #248]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80052de:	4b39      	ldr	r3, [pc, #228]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ec:	4935      	ldr	r1, [pc, #212]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005300:	4b30      	ldr	r3, [pc, #192]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005306:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800530e:	492d      	ldr	r1, [pc, #180]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d011      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005322:	4b28      	ldr	r3, [pc, #160]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005328:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005330:	4924      	ldr	r1, [pc, #144]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800533c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005340:	d101      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005342:	2301      	movs	r3, #1
 8005344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005352:	2301      	movs	r3, #1
 8005354:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005362:	4b18      	ldr	r3, [pc, #96]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005368:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005370:	4914      	ldr	r1, [pc, #80]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00b      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005394:	490b      	ldr	r1, [pc, #44]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00f      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b8:	4902      	ldr	r1, [pc, #8]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053c0:	e002      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80053c2:	bf00      	nop
 80053c4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00b      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053d4:	4b8a      	ldr	r3, [pc, #552]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e4:	4986      	ldr	r1, [pc, #536]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00b      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053f8:	4b81      	ldr	r3, [pc, #516]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005408:	497d      	ldr	r1, [pc, #500]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d006      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80d6 	beq.w	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005424:	4b76      	ldr	r3, [pc, #472]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a75      	ldr	r2, [pc, #468]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800542a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800542e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005430:	f7fe f99c 	bl	800376c <HAL_GetTick>
 8005434:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005438:	f7fe f998 	bl	800376c <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b64      	cmp	r3, #100	; 0x64
 8005444:	d901      	bls.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e195      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800544a:	4b6d      	ldr	r3, [pc, #436]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d021      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005466:	2b00      	cmp	r3, #0
 8005468:	d11d      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800546a:	4b65      	ldr	r3, [pc, #404]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800546c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005470:	0c1b      	lsrs	r3, r3, #16
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005478:	4b61      	ldr	r3, [pc, #388]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800547a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547e:	0e1b      	lsrs	r3, r3, #24
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	019a      	lsls	r2, r3, #6
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	431a      	orrs	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	061b      	lsls	r3, r3, #24
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	071b      	lsls	r3, r3, #28
 800549e:	4958      	ldr	r1, [pc, #352]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d004      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ba:	d00a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d02e      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d0:	d129      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054d2:	4b4b      	ldr	r3, [pc, #300]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d8:	0c1b      	lsrs	r3, r3, #16
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054e0:	4b47      	ldr	r3, [pc, #284]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e6:	0f1b      	lsrs	r3, r3, #28
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	019a      	lsls	r2, r3, #6
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	041b      	lsls	r3, r3, #16
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	061b      	lsls	r3, r3, #24
 8005500:	431a      	orrs	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	071b      	lsls	r3, r3, #28
 8005506:	493e      	ldr	r1, [pc, #248]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800550e:	4b3c      	ldr	r3, [pc, #240]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005514:	f023 021f 	bic.w	r2, r3, #31
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	3b01      	subs	r3, #1
 800551e:	4938      	ldr	r1, [pc, #224]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01d      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005532:	4b33      	ldr	r3, [pc, #204]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005538:	0e1b      	lsrs	r3, r3, #24
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005540:	4b2f      	ldr	r3, [pc, #188]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005546:	0f1b      	lsrs	r3, r3, #28
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	019a      	lsls	r2, r3, #6
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	041b      	lsls	r3, r3, #16
 800555a:	431a      	orrs	r2, r3
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	061b      	lsls	r3, r3, #24
 8005560:	431a      	orrs	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	071b      	lsls	r3, r3, #28
 8005566:	4926      	ldr	r1, [pc, #152]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d011      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	019a      	lsls	r2, r3, #6
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	061b      	lsls	r3, r3, #24
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	071b      	lsls	r3, r3, #28
 8005596:	491a      	ldr	r1, [pc, #104]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800559e:	4b18      	ldr	r3, [pc, #96]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a17      	ldr	r2, [pc, #92]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055aa:	f7fe f8df 	bl	800376c <HAL_GetTick>
 80055ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055b0:	e008      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055b2:	f7fe f8db 	bl	800376c <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b64      	cmp	r3, #100	; 0x64
 80055be:	d901      	bls.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e0d8      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	f040 80ce 	bne.w	8005774 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a08      	ldr	r2, [pc, #32]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e4:	f7fe f8c2 	bl	800376c <HAL_GetTick>
 80055e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055ea:	e00b      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055ec:	f7fe f8be 	bl	800376c <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d904      	bls.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e0bb      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80055fe:	bf00      	nop
 8005600:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005604:	4b5e      	ldr	r3, [pc, #376]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800560c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005610:	d0ec      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800562e:	2b00      	cmp	r3, #0
 8005630:	d02e      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d12a      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800563a:	4b51      	ldr	r3, [pc, #324]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005640:	0c1b      	lsrs	r3, r3, #16
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005648:	4b4d      	ldr	r3, [pc, #308]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564e:	0f1b      	lsrs	r3, r3, #28
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	019a      	lsls	r2, r3, #6
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	041b      	lsls	r3, r3, #16
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	061b      	lsls	r3, r3, #24
 8005668:	431a      	orrs	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	071b      	lsls	r3, r3, #28
 800566e:	4944      	ldr	r1, [pc, #272]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005676:	4b42      	ldr	r3, [pc, #264]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800567c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	3b01      	subs	r3, #1
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	493d      	ldr	r1, [pc, #244]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d022      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056a4:	d11d      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056a6:	4b36      	ldr	r3, [pc, #216]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ac:	0e1b      	lsrs	r3, r3, #24
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056b4:	4b32      	ldr	r3, [pc, #200]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	0f1b      	lsrs	r3, r3, #28
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	019a      	lsls	r2, r3, #6
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	041b      	lsls	r3, r3, #16
 80056ce:	431a      	orrs	r2, r3
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	061b      	lsls	r3, r3, #24
 80056d4:	431a      	orrs	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	071b      	lsls	r3, r3, #28
 80056da:	4929      	ldr	r1, [pc, #164]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d028      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056ee:	4b24      	ldr	r3, [pc, #144]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f4:	0e1b      	lsrs	r3, r3, #24
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056fc:	4b20      	ldr	r3, [pc, #128]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005702:	0c1b      	lsrs	r3, r3, #16
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	019a      	lsls	r2, r3, #6
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	041b      	lsls	r3, r3, #16
 8005714:	431a      	orrs	r2, r3
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	061b      	lsls	r3, r3, #24
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	071b      	lsls	r3, r3, #28
 8005722:	4917      	ldr	r1, [pc, #92]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800572c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	4911      	ldr	r1, [pc, #68]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a0e      	ldr	r2, [pc, #56]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800574a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800574c:	f7fe f80e 	bl	800376c <HAL_GetTick>
 8005750:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005754:	f7fe f80a 	bl	800376c <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b64      	cmp	r3, #100	; 0x64
 8005760:	d901      	bls.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e007      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800576e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005772:	d1ef      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3720      	adds	r7, #32
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40023800 	.word	0x40023800

08005784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e049      	b.n	800582a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fd fd8e 	bl	80032cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3304      	adds	r3, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f000 fb6e 	bl	8005ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e049      	b.n	80058d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d106      	bne.n	800585e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f841 	bl	80058e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3304      	adds	r3, #4
 800586e:	4619      	mov	r1, r3
 8005870:	4610      	mov	r0, r2
 8005872:	f000 fb17 	bl	8005ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d109      	bne.n	8005918 <HAL_TIM_PWM_Start+0x24>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	bf14      	ite	ne
 8005910:	2301      	movne	r3, #1
 8005912:	2300      	moveq	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	e03c      	b.n	8005992 <HAL_TIM_PWM_Start+0x9e>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b04      	cmp	r3, #4
 800591c:	d109      	bne.n	8005932 <HAL_TIM_PWM_Start+0x3e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b01      	cmp	r3, #1
 8005928:	bf14      	ite	ne
 800592a:	2301      	movne	r3, #1
 800592c:	2300      	moveq	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	e02f      	b.n	8005992 <HAL_TIM_PWM_Start+0x9e>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d109      	bne.n	800594c <HAL_TIM_PWM_Start+0x58>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	bf14      	ite	ne
 8005944:	2301      	movne	r3, #1
 8005946:	2300      	moveq	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	e022      	b.n	8005992 <HAL_TIM_PWM_Start+0x9e>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b0c      	cmp	r3, #12
 8005950:	d109      	bne.n	8005966 <HAL_TIM_PWM_Start+0x72>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	bf14      	ite	ne
 800595e:	2301      	movne	r3, #1
 8005960:	2300      	moveq	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	e015      	b.n	8005992 <HAL_TIM_PWM_Start+0x9e>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b10      	cmp	r3, #16
 800596a:	d109      	bne.n	8005980 <HAL_TIM_PWM_Start+0x8c>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	bf14      	ite	ne
 8005978:	2301      	movne	r3, #1
 800597a:	2300      	moveq	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e008      	b.n	8005992 <HAL_TIM_PWM_Start+0x9e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	bf14      	ite	ne
 800598c:	2301      	movne	r3, #1
 800598e:	2300      	moveq	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e092      	b.n	8005ac0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d104      	bne.n	80059aa <HAL_TIM_PWM_Start+0xb6>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a8:	e023      	b.n	80059f2 <HAL_TIM_PWM_Start+0xfe>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d104      	bne.n	80059ba <HAL_TIM_PWM_Start+0xc6>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b8:	e01b      	b.n	80059f2 <HAL_TIM_PWM_Start+0xfe>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d104      	bne.n	80059ca <HAL_TIM_PWM_Start+0xd6>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059c8:	e013      	b.n	80059f2 <HAL_TIM_PWM_Start+0xfe>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b0c      	cmp	r3, #12
 80059ce:	d104      	bne.n	80059da <HAL_TIM_PWM_Start+0xe6>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059d8:	e00b      	b.n	80059f2 <HAL_TIM_PWM_Start+0xfe>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d104      	bne.n	80059ea <HAL_TIM_PWM_Start+0xf6>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e8:	e003      	b.n	80059f2 <HAL_TIM_PWM_Start+0xfe>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2201      	movs	r2, #1
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fdea 	bl	80065d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a30      	ldr	r2, [pc, #192]	; (8005ac8 <HAL_TIM_PWM_Start+0x1d4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_TIM_PWM_Start+0x120>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a2f      	ldr	r2, [pc, #188]	; (8005acc <HAL_TIM_PWM_Start+0x1d8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d101      	bne.n	8005a18 <HAL_TIM_PWM_Start+0x124>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <HAL_TIM_PWM_Start+0x126>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a25      	ldr	r2, [pc, #148]	; (8005ac8 <HAL_TIM_PWM_Start+0x1d4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d022      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x18a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a40:	d01d      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x18a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a22      	ldr	r2, [pc, #136]	; (8005ad0 <HAL_TIM_PWM_Start+0x1dc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d018      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x18a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a20      	ldr	r2, [pc, #128]	; (8005ad4 <HAL_TIM_PWM_Start+0x1e0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x18a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <HAL_TIM_PWM_Start+0x1e4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x18a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a19      	ldr	r2, [pc, #100]	; (8005acc <HAL_TIM_PWM_Start+0x1d8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x18a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1b      	ldr	r2, [pc, #108]	; (8005adc <HAL_TIM_PWM_Start+0x1e8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x18a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a19      	ldr	r2, [pc, #100]	; (8005ae0 <HAL_TIM_PWM_Start+0x1ec>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d115      	bne.n	8005aaa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <HAL_TIM_PWM_Start+0x1f0>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b06      	cmp	r3, #6
 8005a8e:	d015      	beq.n	8005abc <HAL_TIM_PWM_Start+0x1c8>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a96:	d011      	beq.n	8005abc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa8:	e008      	b.n	8005abc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	e000      	b.n	8005abe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005abc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40010400 	.word	0x40010400
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800
 8005ad8:	40000c00 	.word	0x40000c00
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40001800 	.word	0x40001800
 8005ae4:	00010007 	.word	0x00010007

08005ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e0ff      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b14      	cmp	r3, #20
 8005b12:	f200 80f0 	bhi.w	8005cf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b16:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005cf7 	.word	0x08005cf7
 8005b24:	08005cf7 	.word	0x08005cf7
 8005b28:	08005cf7 	.word	0x08005cf7
 8005b2c:	08005bb1 	.word	0x08005bb1
 8005b30:	08005cf7 	.word	0x08005cf7
 8005b34:	08005cf7 	.word	0x08005cf7
 8005b38:	08005cf7 	.word	0x08005cf7
 8005b3c:	08005bf3 	.word	0x08005bf3
 8005b40:	08005cf7 	.word	0x08005cf7
 8005b44:	08005cf7 	.word	0x08005cf7
 8005b48:	08005cf7 	.word	0x08005cf7
 8005b4c:	08005c33 	.word	0x08005c33
 8005b50:	08005cf7 	.word	0x08005cf7
 8005b54:	08005cf7 	.word	0x08005cf7
 8005b58:	08005cf7 	.word	0x08005cf7
 8005b5c:	08005c75 	.word	0x08005c75
 8005b60:	08005cf7 	.word	0x08005cf7
 8005b64:	08005cf7 	.word	0x08005cf7
 8005b68:	08005cf7 	.word	0x08005cf7
 8005b6c:	08005cb5 	.word	0x08005cb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fa34 	bl	8005fe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0208 	orr.w	r2, r2, #8
 8005b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0204 	bic.w	r2, r2, #4
 8005b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6999      	ldr	r1, [r3, #24]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	619a      	str	r2, [r3, #24]
      break;
 8005bae:	e0a5      	b.n	8005cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fa86 	bl	80060c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6999      	ldr	r1, [r3, #24]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	021a      	lsls	r2, r3, #8
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	619a      	str	r2, [r3, #24]
      break;
 8005bf0:	e084      	b.n	8005cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fadd 	bl	80061b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0208 	orr.w	r2, r2, #8
 8005c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0204 	bic.w	r2, r2, #4
 8005c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69d9      	ldr	r1, [r3, #28]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	61da      	str	r2, [r3, #28]
      break;
 8005c30:	e064      	b.n	8005cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fb33 	bl	80062a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69d9      	ldr	r1, [r3, #28]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	021a      	lsls	r2, r3, #8
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	61da      	str	r2, [r3, #28]
      break;
 8005c72:	e043      	b.n	8005cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fb6a 	bl	8006354 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0208 	orr.w	r2, r2, #8
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0204 	bic.w	r2, r2, #4
 8005c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005cb2:	e023      	b.n	8005cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fb9c 	bl	80063f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	021a      	lsls	r2, r3, #8
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005cf4:	e002      	b.n	8005cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop

08005d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_ConfigClockSource+0x1c>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e0b4      	b.n	8005e96 <HAL_TIM_ConfigClockSource+0x186>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	4b56      	ldr	r3, [pc, #344]	; (8005ea0 <HAL_TIM_ConfigClockSource+0x190>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d64:	d03e      	beq.n	8005de4 <HAL_TIM_ConfigClockSource+0xd4>
 8005d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6a:	f200 8087 	bhi.w	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d72:	f000 8086 	beq.w	8005e82 <HAL_TIM_ConfigClockSource+0x172>
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7a:	d87f      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d7c:	2b70      	cmp	r3, #112	; 0x70
 8005d7e:	d01a      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0xa6>
 8005d80:	2b70      	cmp	r3, #112	; 0x70
 8005d82:	d87b      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d84:	2b60      	cmp	r3, #96	; 0x60
 8005d86:	d050      	beq.n	8005e2a <HAL_TIM_ConfigClockSource+0x11a>
 8005d88:	2b60      	cmp	r3, #96	; 0x60
 8005d8a:	d877      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d8c:	2b50      	cmp	r3, #80	; 0x50
 8005d8e:	d03c      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0xfa>
 8005d90:	2b50      	cmp	r3, #80	; 0x50
 8005d92:	d873      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	d058      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x13a>
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d86f      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d9c:	2b30      	cmp	r3, #48	; 0x30
 8005d9e:	d064      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005da0:	2b30      	cmp	r3, #48	; 0x30
 8005da2:	d86b      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d060      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d867      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d05c      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d05a      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005db4:	e062      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6899      	ldr	r1, [r3, #8]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f000 fbe5 	bl	8006594 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	609a      	str	r2, [r3, #8]
      break;
 8005de2:	e04f      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	6899      	ldr	r1, [r3, #8]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f000 fbce 	bl	8006594 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e06:	609a      	str	r2, [r3, #8]
      break;
 8005e08:	e03c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6859      	ldr	r1, [r3, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	461a      	mov	r2, r3
 8005e18:	f000 fb42 	bl	80064a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2150      	movs	r1, #80	; 0x50
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fb9b 	bl	800655e <TIM_ITRx_SetConfig>
      break;
 8005e28:	e02c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f000 fb61 	bl	80064fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2160      	movs	r1, #96	; 0x60
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fb8b 	bl	800655e <TIM_ITRx_SetConfig>
      break;
 8005e48:	e01c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6859      	ldr	r1, [r3, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	461a      	mov	r2, r3
 8005e58:	f000 fb22 	bl	80064a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2140      	movs	r1, #64	; 0x40
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fb7b 	bl	800655e <TIM_ITRx_SetConfig>
      break;
 8005e68:	e00c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f000 fb72 	bl	800655e <TIM_ITRx_SetConfig>
      break;
 8005e7a:	e003      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e80:	e000      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	fffeff88 	.word	0xfffeff88

08005ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a40      	ldr	r2, [pc, #256]	; (8005fb8 <TIM_Base_SetConfig+0x114>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d013      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec2:	d00f      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a3d      	ldr	r2, [pc, #244]	; (8005fbc <TIM_Base_SetConfig+0x118>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a3c      	ldr	r2, [pc, #240]	; (8005fc0 <TIM_Base_SetConfig+0x11c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a3b      	ldr	r2, [pc, #236]	; (8005fc4 <TIM_Base_SetConfig+0x120>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a3a      	ldr	r2, [pc, #232]	; (8005fc8 <TIM_Base_SetConfig+0x124>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d108      	bne.n	8005ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2f      	ldr	r2, [pc, #188]	; (8005fb8 <TIM_Base_SetConfig+0x114>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d02b      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f04:	d027      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2c      	ldr	r2, [pc, #176]	; (8005fbc <TIM_Base_SetConfig+0x118>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d023      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2b      	ldr	r2, [pc, #172]	; (8005fc0 <TIM_Base_SetConfig+0x11c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01f      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2a      	ldr	r2, [pc, #168]	; (8005fc4 <TIM_Base_SetConfig+0x120>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d01b      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a29      	ldr	r2, [pc, #164]	; (8005fc8 <TIM_Base_SetConfig+0x124>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d017      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a28      	ldr	r2, [pc, #160]	; (8005fcc <TIM_Base_SetConfig+0x128>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a27      	ldr	r2, [pc, #156]	; (8005fd0 <TIM_Base_SetConfig+0x12c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00f      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a26      	ldr	r2, [pc, #152]	; (8005fd4 <TIM_Base_SetConfig+0x130>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00b      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a25      	ldr	r2, [pc, #148]	; (8005fd8 <TIM_Base_SetConfig+0x134>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d007      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a24      	ldr	r2, [pc, #144]	; (8005fdc <TIM_Base_SetConfig+0x138>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d003      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a23      	ldr	r2, [pc, #140]	; (8005fe0 <TIM_Base_SetConfig+0x13c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d108      	bne.n	8005f68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <TIM_Base_SetConfig+0x114>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_Base_SetConfig+0xf8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a0c      	ldr	r2, [pc, #48]	; (8005fc8 <TIM_Base_SetConfig+0x124>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d103      	bne.n	8005fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	615a      	str	r2, [r3, #20]
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	40000400 	.word	0x40000400
 8005fc0:	40000800 	.word	0x40000800
 8005fc4:	40000c00 	.word	0x40000c00
 8005fc8:	40010400 	.word	0x40010400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800
 8005fd8:	40001800 	.word	0x40001800
 8005fdc:	40001c00 	.word	0x40001c00
 8005fe0:	40002000 	.word	0x40002000

08005fe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f023 0201 	bic.w	r2, r3, #1
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4b2b      	ldr	r3, [pc, #172]	; (80060bc <TIM_OC1_SetConfig+0xd8>)
 8006010:	4013      	ands	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f023 0302 	bic.w	r3, r3, #2
 800602c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a21      	ldr	r2, [pc, #132]	; (80060c0 <TIM_OC1_SetConfig+0xdc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d003      	beq.n	8006048 <TIM_OC1_SetConfig+0x64>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a20      	ldr	r2, [pc, #128]	; (80060c4 <TIM_OC1_SetConfig+0xe0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d10c      	bne.n	8006062 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f023 0308 	bic.w	r3, r3, #8
 800604e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 0304 	bic.w	r3, r3, #4
 8006060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <TIM_OC1_SetConfig+0xdc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_OC1_SetConfig+0x8e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <TIM_OC1_SetConfig+0xe0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d111      	bne.n	8006096 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	621a      	str	r2, [r3, #32]
}
 80060b0:	bf00      	nop
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	fffeff8f 	.word	0xfffeff8f
 80060c0:	40010000 	.word	0x40010000
 80060c4:	40010400 	.word	0x40010400

080060c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f023 0210 	bic.w	r2, r3, #16
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4b2e      	ldr	r3, [pc, #184]	; (80061ac <TIM_OC2_SetConfig+0xe4>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	021b      	lsls	r3, r3, #8
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f023 0320 	bic.w	r3, r3, #32
 8006112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a23      	ldr	r2, [pc, #140]	; (80061b0 <TIM_OC2_SetConfig+0xe8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d003      	beq.n	8006130 <TIM_OC2_SetConfig+0x68>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a22      	ldr	r2, [pc, #136]	; (80061b4 <TIM_OC2_SetConfig+0xec>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d10d      	bne.n	800614c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800614a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <TIM_OC2_SetConfig+0xe8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_OC2_SetConfig+0x94>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a17      	ldr	r2, [pc, #92]	; (80061b4 <TIM_OC2_SetConfig+0xec>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d113      	bne.n	8006184 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800616a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	feff8fff 	.word	0xfeff8fff
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40010400 	.word	0x40010400

080061b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4b2d      	ldr	r3, [pc, #180]	; (8006298 <TIM_OC3_SetConfig+0xe0>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a22      	ldr	r2, [pc, #136]	; (800629c <TIM_OC3_SetConfig+0xe4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_OC3_SetConfig+0x66>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a21      	ldr	r2, [pc, #132]	; (80062a0 <TIM_OC3_SetConfig+0xe8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d10d      	bne.n	800623a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a17      	ldr	r2, [pc, #92]	; (800629c <TIM_OC3_SetConfig+0xe4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d003      	beq.n	800624a <TIM_OC3_SetConfig+0x92>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <TIM_OC3_SetConfig+0xe8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d113      	bne.n	8006272 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4313      	orrs	r3, r2
 8006264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	621a      	str	r2, [r3, #32]
}
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	fffeff8f 	.word	0xfffeff8f
 800629c:	40010000 	.word	0x40010000
 80062a0:	40010400 	.word	0x40010400

080062a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4b1e      	ldr	r3, [pc, #120]	; (8006348 <TIM_OC4_SetConfig+0xa4>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	031b      	lsls	r3, r3, #12
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a13      	ldr	r2, [pc, #76]	; (800634c <TIM_OC4_SetConfig+0xa8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_OC4_SetConfig+0x68>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a12      	ldr	r2, [pc, #72]	; (8006350 <TIM_OC4_SetConfig+0xac>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d109      	bne.n	8006320 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	019b      	lsls	r3, r3, #6
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	feff8fff 	.word	0xfeff8fff
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400

08006354 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <TIM_OC5_SetConfig+0x98>)
 8006380:	4013      	ands	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006394:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	041b      	lsls	r3, r3, #16
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a12      	ldr	r2, [pc, #72]	; (80063f0 <TIM_OC5_SetConfig+0x9c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d003      	beq.n	80063b2 <TIM_OC5_SetConfig+0x5e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a11      	ldr	r2, [pc, #68]	; (80063f4 <TIM_OC5_SetConfig+0xa0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d109      	bne.n	80063c6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	621a      	str	r2, [r3, #32]
}
 80063e0:	bf00      	nop
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	fffeff8f 	.word	0xfffeff8f
 80063f0:	40010000 	.word	0x40010000
 80063f4:	40010400 	.word	0x40010400

080063f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <TIM_OC6_SetConfig+0x9c>)
 8006424:	4013      	ands	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800643a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	051b      	lsls	r3, r3, #20
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a13      	ldr	r2, [pc, #76]	; (8006498 <TIM_OC6_SetConfig+0xa0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_OC6_SetConfig+0x60>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a12      	ldr	r2, [pc, #72]	; (800649c <TIM_OC6_SetConfig+0xa4>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d109      	bne.n	800646c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800645e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	029b      	lsls	r3, r3, #10
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	feff8fff 	.word	0xfeff8fff
 8006498:	40010000 	.word	0x40010000
 800649c:	40010400 	.word	0x40010400

080064a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f023 0201 	bic.w	r2, r3, #1
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f023 030a 	bic.w	r3, r3, #10
 80064dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	621a      	str	r2, [r3, #32]
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064fe:	b480      	push	{r7}
 8006500:	b087      	sub	sp, #28
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f023 0210 	bic.w	r2, r3, #16
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006528:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	031b      	lsls	r3, r3, #12
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	4313      	orrs	r3, r2
 8006532:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800653a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800655e:	b480      	push	{r7}
 8006560:	b085      	sub	sp, #20
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006574:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	f043 0307 	orr.w	r3, r3, #7
 8006580:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	609a      	str	r2, [r3, #8]
}
 8006588:	bf00      	nop
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	021a      	lsls	r2, r3, #8
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	609a      	str	r2, [r3, #8]
}
 80065c8:	bf00      	nop
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	2201      	movs	r2, #1
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a1a      	ldr	r2, [r3, #32]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	43db      	mvns	r3, r3
 80065f6:	401a      	ands	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a1a      	ldr	r2, [r3, #32]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f003 031f 	and.w	r3, r3, #31
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	fa01 f303 	lsl.w	r3, r1, r3
 800660c:	431a      	orrs	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006634:	2302      	movs	r3, #2
 8006636:	e06d      	b.n	8006714 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a30      	ldr	r2, [pc, #192]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a2f      	ldr	r2, [pc, #188]	; (8006724 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d108      	bne.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006672:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006684:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a20      	ldr	r2, [pc, #128]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d022      	beq.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066aa:	d01d      	beq.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1d      	ldr	r2, [pc, #116]	; (8006728 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d018      	beq.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1c      	ldr	r2, [pc, #112]	; (800672c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d013      	beq.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1a      	ldr	r2, [pc, #104]	; (8006730 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00e      	beq.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a15      	ldr	r2, [pc, #84]	; (8006724 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d009      	beq.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a16      	ldr	r2, [pc, #88]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d004      	beq.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a15      	ldr	r2, [pc, #84]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d10c      	bne.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	40010000 	.word	0x40010000
 8006724:	40010400 	.word	0x40010400
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	40014000 	.word	0x40014000
 8006738:	40001800 	.word	0x40001800

0800673c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006754:	2302      	movs	r3, #2
 8006756:	e065      	b.n	8006824 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4313      	orrs	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	041b      	lsls	r3, r3, #16
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a16      	ldr	r2, [pc, #88]	; (8006830 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a14      	ldr	r2, [pc, #80]	; (8006834 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d115      	bne.n	8006812 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	051b      	lsls	r3, r3, #20
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	40010000 	.word	0x40010000
 8006834:	40010400 	.word	0x40010400

08006838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e040      	b.n	80068cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d106      	bne.n	8006860 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fc fd8e 	bl	800337c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2224      	movs	r2, #36	; 0x24
 8006864:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 0201 	bic.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fc08 	bl	800708c <UART_SetConfig>
 800687c:	4603      	mov	r3, r0
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e022      	b.n	80068cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fe60 	bl	8007554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0201 	orr.w	r2, r2, #1
 80068c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fee7 	bl	8007698 <UART_CheckIdleState>
 80068ca:	4603      	mov	r3, r0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	; 0x28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d165      	bne.n	80069b6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <HAL_UART_Transmit_DMA+0x22>
 80068f0:	88fb      	ldrh	r3, [r7, #6]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e05e      	b.n	80069b8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	88fa      	ldrh	r2, [r7, #6]
 8006904:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	88fa      	ldrh	r2, [r7, #6]
 800690c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2221      	movs	r2, #33	; 0x21
 800691c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006922:	2b00      	cmp	r3, #0
 8006924:	d027      	beq.n	8006976 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692a:	4a25      	ldr	r2, [pc, #148]	; (80069c0 <HAL_UART_Transmit_DMA+0xec>)
 800692c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006932:	4a24      	ldr	r2, [pc, #144]	; (80069c4 <HAL_UART_Transmit_DMA+0xf0>)
 8006934:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	4a23      	ldr	r2, [pc, #140]	; (80069c8 <HAL_UART_Transmit_DMA+0xf4>)
 800693c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006942:	2200      	movs	r2, #0
 8006944:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800694e:	4619      	mov	r1, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3328      	adds	r3, #40	; 0x28
 8006956:	461a      	mov	r2, r3
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	f7fd f8f7 	bl	8003b4c <HAL_DMA_Start_IT>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2210      	movs	r2, #16
 8006968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e020      	b.n	80069b8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2240      	movs	r2, #64	; 0x40
 800697c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3308      	adds	r3, #8
 8006984:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	613b      	str	r3, [r7, #16]
   return(result);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006994:	627b      	str	r3, [r7, #36]	; 0x24
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3308      	adds	r3, #8
 800699c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699e:	623a      	str	r2, [r7, #32]
 80069a0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	69f9      	ldr	r1, [r7, #28]
 80069a4:	6a3a      	ldr	r2, [r7, #32]
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e5      	bne.n	800697e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	e000      	b.n	80069b8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80069b6:	2302      	movs	r3, #2
  }
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3728      	adds	r7, #40	; 0x28
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	08007b15 	.word	0x08007b15
 80069c4:	08007bab 	.word	0x08007bab
 80069c8:	08007d2d 	.word	0x08007d2d

080069cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08a      	sub	sp, #40	; 0x28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	d132      	bne.n	8006a4a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <HAL_UART_Receive_DMA+0x24>
 80069ea:	88fb      	ldrh	r3, [r7, #6]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e02b      	b.n	8006a4c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d018      	beq.n	8006a3a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	613b      	str	r3, [r7, #16]
   return(result);
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	623b      	str	r3, [r7, #32]
 8006a28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	69f9      	ldr	r1, [r7, #28]
 8006a2c:	6a3a      	ldr	r2, [r7, #32]
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e6      	bne.n	8006a08 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a3a:	88fb      	ldrh	r3, [r7, #6]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 ff3d 	bl	80078c0 <UART_Start_Receive_DMA>
 8006a46:	4603      	mov	r3, r0
 8006a48:	e000      	b.n	8006a4c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006a4a:	2302      	movs	r3, #2
  }
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3728      	adds	r7, #40	; 0x28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b0ba      	sub	sp, #232	; 0xe8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a82:	4013      	ands	r3, r2
 8006a84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d115      	bne.n	8006abc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a94:	f003 0320 	and.w	r3, r3, #32
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00f      	beq.n	8006abc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d009      	beq.n	8006abc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 82ac 	beq.w	800700a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
      }
      return;
 8006aba:	e2a6      	b.n	800700a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006abc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8117 	beq.w	8006cf4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d106      	bne.n	8006ae0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ad2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ad6:	4b85      	ldr	r3, [pc, #532]	; (8006cec <HAL_UART_IRQHandler+0x298>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 810a 	beq.w	8006cf4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d011      	beq.n	8006b10 <HAL_UART_IRQHandler+0xbc>
 8006aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2201      	movs	r2, #1
 8006afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b06:	f043 0201 	orr.w	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d011      	beq.n	8006b40 <HAL_UART_IRQHandler+0xec>
 8006b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00b      	beq.n	8006b40 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b36:	f043 0204 	orr.w	r2, r3, #4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d011      	beq.n	8006b70 <HAL_UART_IRQHandler+0x11c>
 8006b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00b      	beq.n	8006b70 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2204      	movs	r2, #4
 8006b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b66:	f043 0202 	orr.w	r2, r3, #2
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d017      	beq.n	8006bac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d105      	bne.n	8006b94 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00b      	beq.n	8006bac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2208      	movs	r2, #8
 8006b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba2:	f043 0208 	orr.w	r2, r3, #8
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d012      	beq.n	8006bde <HAL_UART_IRQHandler+0x18a>
 8006bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00c      	beq.n	8006bde <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd4:	f043 0220 	orr.w	r2, r3, #32
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8212 	beq.w	800700e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00d      	beq.n	8006c12 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d007      	beq.n	8006c12 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	d005      	beq.n	8006c36 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d04f      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 ff08 	bl	8007a4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b40      	cmp	r3, #64	; 0x40
 8006c48:	d141      	bne.n	8006cce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3308      	adds	r3, #8
 8006c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1d9      	bne.n	8006c4a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d013      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca2:	4a13      	ldr	r2, [pc, #76]	; (8006cf0 <HAL_UART_IRQHandler+0x29c>)
 8006ca4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fd f81e 	bl	8003cec <HAL_DMA_Abort_IT>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d017      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc4:	e00f      	b.n	8006ce6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f9c0 	bl	800704c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ccc:	e00b      	b.n	8006ce6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f9bc 	bl	800704c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd4:	e007      	b.n	8006ce6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f9b8 	bl	800704c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006ce4:	e193      	b.n	800700e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce6:	bf00      	nop
    return;
 8006ce8:	e191      	b.n	800700e <HAL_UART_IRQHandler+0x5ba>
 8006cea:	bf00      	nop
 8006cec:	04000120 	.word	0x04000120
 8006cf0:	08007dab 	.word	0x08007dab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	f040 814c 	bne.w	8006f96 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d02:	f003 0310 	and.w	r3, r3, #16
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 8145 	beq.w	8006f96 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 813e 	beq.w	8006f96 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2210      	movs	r2, #16
 8006d20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2c:	2b40      	cmp	r3, #64	; 0x40
 8006d2e:	f040 80b6 	bne.w	8006e9e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 8165 	beq.w	8007012 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d52:	429a      	cmp	r2, r3
 8006d54:	f080 815d 	bcs.w	8007012 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d6c:	f000 8086 	beq.w	8006e7c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1da      	bne.n	8006d70 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dcc:	f023 0301 	bic.w	r3, r3, #1
 8006dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006de2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e1      	bne.n	8006dba <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3308      	adds	r3, #8
 8006e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e3      	bne.n	8006df6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4c:	f023 0310 	bic.w	r3, r3, #16
 8006e50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e4      	bne.n	8006e3c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fc fec8 	bl	8003c0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f8e2 	bl	8007060 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e9c:	e0b9      	b.n	8007012 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 80ab 	beq.w	8007016 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006ec0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 80a6 	beq.w	8007016 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ede:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006eec:	647b      	str	r3, [r7, #68]	; 0x44
 8006eee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e4      	bne.n	8006eca <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3308      	adds	r3, #8
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	e853 3f00 	ldrex	r3, [r3]
 8006f0e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	f023 0301 	bic.w	r3, r3, #1
 8006f16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3308      	adds	r3, #8
 8006f20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f24:	633a      	str	r2, [r7, #48]	; 0x30
 8006f26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e3      	bne.n	8006f00 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f023 0310 	bic.w	r3, r3, #16
 8006f60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	69b9      	ldr	r1, [r7, #24]
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e4      	bne.n	8006f4c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2202      	movs	r2, #2
 8006f86:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f866 	bl	8007060 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f94:	e03f      	b.n	8007016 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00e      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x56c>
 8006fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d008      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006fb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f85d 	bl	8007078 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fbe:	e02d      	b.n	800701c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00e      	beq.n	8006fea <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d008      	beq.n	8006fea <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01c      	beq.n	800701a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	4798      	blx	r3
    }
    return;
 8006fe8:	e017      	b.n	800701a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d012      	beq.n	800701c <HAL_UART_IRQHandler+0x5c8>
 8006ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00c      	beq.n	800701c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fee7 	bl	8007dd6 <UART_EndTransmit_IT>
    return;
 8007008:	e008      	b.n	800701c <HAL_UART_IRQHandler+0x5c8>
      return;
 800700a:	bf00      	nop
 800700c:	e006      	b.n	800701c <HAL_UART_IRQHandler+0x5c8>
    return;
 800700e:	bf00      	nop
 8007010:	e004      	b.n	800701c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007012:	bf00      	nop
 8007014:	e002      	b.n	800701c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007016:	bf00      	nop
 8007018:	e000      	b.n	800701c <HAL_UART_IRQHandler+0x5c8>
    return;
 800701a:	bf00      	nop
  }

}
 800701c:	37e8      	adds	r7, #232	; 0xe8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop

08007024 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	431a      	orrs	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4ba6      	ldr	r3, [pc, #664]	; (8007350 <UART_SetConfig+0x2c4>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	6979      	ldr	r1, [r7, #20]
 80070c0:	430b      	orrs	r3, r1
 80070c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a94      	ldr	r2, [pc, #592]	; (8007354 <UART_SetConfig+0x2c8>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d120      	bne.n	800714a <UART_SetConfig+0xbe>
 8007108:	4b93      	ldr	r3, [pc, #588]	; (8007358 <UART_SetConfig+0x2cc>)
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	2b03      	cmp	r3, #3
 8007114:	d816      	bhi.n	8007144 <UART_SetConfig+0xb8>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <UART_SetConfig+0x90>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	0800712d 	.word	0x0800712d
 8007120:	08007139 	.word	0x08007139
 8007124:	08007133 	.word	0x08007133
 8007128:	0800713f 	.word	0x0800713f
 800712c:	2301      	movs	r3, #1
 800712e:	77fb      	strb	r3, [r7, #31]
 8007130:	e150      	b.n	80073d4 <UART_SetConfig+0x348>
 8007132:	2302      	movs	r3, #2
 8007134:	77fb      	strb	r3, [r7, #31]
 8007136:	e14d      	b.n	80073d4 <UART_SetConfig+0x348>
 8007138:	2304      	movs	r3, #4
 800713a:	77fb      	strb	r3, [r7, #31]
 800713c:	e14a      	b.n	80073d4 <UART_SetConfig+0x348>
 800713e:	2308      	movs	r3, #8
 8007140:	77fb      	strb	r3, [r7, #31]
 8007142:	e147      	b.n	80073d4 <UART_SetConfig+0x348>
 8007144:	2310      	movs	r3, #16
 8007146:	77fb      	strb	r3, [r7, #31]
 8007148:	e144      	b.n	80073d4 <UART_SetConfig+0x348>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a83      	ldr	r2, [pc, #524]	; (800735c <UART_SetConfig+0x2d0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d132      	bne.n	80071ba <UART_SetConfig+0x12e>
 8007154:	4b80      	ldr	r3, [pc, #512]	; (8007358 <UART_SetConfig+0x2cc>)
 8007156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715a:	f003 030c 	and.w	r3, r3, #12
 800715e:	2b0c      	cmp	r3, #12
 8007160:	d828      	bhi.n	80071b4 <UART_SetConfig+0x128>
 8007162:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <UART_SetConfig+0xdc>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	0800719d 	.word	0x0800719d
 800716c:	080071b5 	.word	0x080071b5
 8007170:	080071b5 	.word	0x080071b5
 8007174:	080071b5 	.word	0x080071b5
 8007178:	080071a9 	.word	0x080071a9
 800717c:	080071b5 	.word	0x080071b5
 8007180:	080071b5 	.word	0x080071b5
 8007184:	080071b5 	.word	0x080071b5
 8007188:	080071a3 	.word	0x080071a3
 800718c:	080071b5 	.word	0x080071b5
 8007190:	080071b5 	.word	0x080071b5
 8007194:	080071b5 	.word	0x080071b5
 8007198:	080071af 	.word	0x080071af
 800719c:	2300      	movs	r3, #0
 800719e:	77fb      	strb	r3, [r7, #31]
 80071a0:	e118      	b.n	80073d4 <UART_SetConfig+0x348>
 80071a2:	2302      	movs	r3, #2
 80071a4:	77fb      	strb	r3, [r7, #31]
 80071a6:	e115      	b.n	80073d4 <UART_SetConfig+0x348>
 80071a8:	2304      	movs	r3, #4
 80071aa:	77fb      	strb	r3, [r7, #31]
 80071ac:	e112      	b.n	80073d4 <UART_SetConfig+0x348>
 80071ae:	2308      	movs	r3, #8
 80071b0:	77fb      	strb	r3, [r7, #31]
 80071b2:	e10f      	b.n	80073d4 <UART_SetConfig+0x348>
 80071b4:	2310      	movs	r3, #16
 80071b6:	77fb      	strb	r3, [r7, #31]
 80071b8:	e10c      	b.n	80073d4 <UART_SetConfig+0x348>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a68      	ldr	r2, [pc, #416]	; (8007360 <UART_SetConfig+0x2d4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d120      	bne.n	8007206 <UART_SetConfig+0x17a>
 80071c4:	4b64      	ldr	r3, [pc, #400]	; (8007358 <UART_SetConfig+0x2cc>)
 80071c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071ce:	2b30      	cmp	r3, #48	; 0x30
 80071d0:	d013      	beq.n	80071fa <UART_SetConfig+0x16e>
 80071d2:	2b30      	cmp	r3, #48	; 0x30
 80071d4:	d814      	bhi.n	8007200 <UART_SetConfig+0x174>
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d009      	beq.n	80071ee <UART_SetConfig+0x162>
 80071da:	2b20      	cmp	r3, #32
 80071dc:	d810      	bhi.n	8007200 <UART_SetConfig+0x174>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <UART_SetConfig+0x15c>
 80071e2:	2b10      	cmp	r3, #16
 80071e4:	d006      	beq.n	80071f4 <UART_SetConfig+0x168>
 80071e6:	e00b      	b.n	8007200 <UART_SetConfig+0x174>
 80071e8:	2300      	movs	r3, #0
 80071ea:	77fb      	strb	r3, [r7, #31]
 80071ec:	e0f2      	b.n	80073d4 <UART_SetConfig+0x348>
 80071ee:	2302      	movs	r3, #2
 80071f0:	77fb      	strb	r3, [r7, #31]
 80071f2:	e0ef      	b.n	80073d4 <UART_SetConfig+0x348>
 80071f4:	2304      	movs	r3, #4
 80071f6:	77fb      	strb	r3, [r7, #31]
 80071f8:	e0ec      	b.n	80073d4 <UART_SetConfig+0x348>
 80071fa:	2308      	movs	r3, #8
 80071fc:	77fb      	strb	r3, [r7, #31]
 80071fe:	e0e9      	b.n	80073d4 <UART_SetConfig+0x348>
 8007200:	2310      	movs	r3, #16
 8007202:	77fb      	strb	r3, [r7, #31]
 8007204:	e0e6      	b.n	80073d4 <UART_SetConfig+0x348>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a56      	ldr	r2, [pc, #344]	; (8007364 <UART_SetConfig+0x2d8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d120      	bne.n	8007252 <UART_SetConfig+0x1c6>
 8007210:	4b51      	ldr	r3, [pc, #324]	; (8007358 <UART_SetConfig+0x2cc>)
 8007212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007216:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800721a:	2bc0      	cmp	r3, #192	; 0xc0
 800721c:	d013      	beq.n	8007246 <UART_SetConfig+0x1ba>
 800721e:	2bc0      	cmp	r3, #192	; 0xc0
 8007220:	d814      	bhi.n	800724c <UART_SetConfig+0x1c0>
 8007222:	2b80      	cmp	r3, #128	; 0x80
 8007224:	d009      	beq.n	800723a <UART_SetConfig+0x1ae>
 8007226:	2b80      	cmp	r3, #128	; 0x80
 8007228:	d810      	bhi.n	800724c <UART_SetConfig+0x1c0>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <UART_SetConfig+0x1a8>
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	d006      	beq.n	8007240 <UART_SetConfig+0x1b4>
 8007232:	e00b      	b.n	800724c <UART_SetConfig+0x1c0>
 8007234:	2300      	movs	r3, #0
 8007236:	77fb      	strb	r3, [r7, #31]
 8007238:	e0cc      	b.n	80073d4 <UART_SetConfig+0x348>
 800723a:	2302      	movs	r3, #2
 800723c:	77fb      	strb	r3, [r7, #31]
 800723e:	e0c9      	b.n	80073d4 <UART_SetConfig+0x348>
 8007240:	2304      	movs	r3, #4
 8007242:	77fb      	strb	r3, [r7, #31]
 8007244:	e0c6      	b.n	80073d4 <UART_SetConfig+0x348>
 8007246:	2308      	movs	r3, #8
 8007248:	77fb      	strb	r3, [r7, #31]
 800724a:	e0c3      	b.n	80073d4 <UART_SetConfig+0x348>
 800724c:	2310      	movs	r3, #16
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e0c0      	b.n	80073d4 <UART_SetConfig+0x348>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a44      	ldr	r2, [pc, #272]	; (8007368 <UART_SetConfig+0x2dc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d125      	bne.n	80072a8 <UART_SetConfig+0x21c>
 800725c:	4b3e      	ldr	r3, [pc, #248]	; (8007358 <UART_SetConfig+0x2cc>)
 800725e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800726a:	d017      	beq.n	800729c <UART_SetConfig+0x210>
 800726c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007270:	d817      	bhi.n	80072a2 <UART_SetConfig+0x216>
 8007272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007276:	d00b      	beq.n	8007290 <UART_SetConfig+0x204>
 8007278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800727c:	d811      	bhi.n	80072a2 <UART_SetConfig+0x216>
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <UART_SetConfig+0x1fe>
 8007282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007286:	d006      	beq.n	8007296 <UART_SetConfig+0x20a>
 8007288:	e00b      	b.n	80072a2 <UART_SetConfig+0x216>
 800728a:	2300      	movs	r3, #0
 800728c:	77fb      	strb	r3, [r7, #31]
 800728e:	e0a1      	b.n	80073d4 <UART_SetConfig+0x348>
 8007290:	2302      	movs	r3, #2
 8007292:	77fb      	strb	r3, [r7, #31]
 8007294:	e09e      	b.n	80073d4 <UART_SetConfig+0x348>
 8007296:	2304      	movs	r3, #4
 8007298:	77fb      	strb	r3, [r7, #31]
 800729a:	e09b      	b.n	80073d4 <UART_SetConfig+0x348>
 800729c:	2308      	movs	r3, #8
 800729e:	77fb      	strb	r3, [r7, #31]
 80072a0:	e098      	b.n	80073d4 <UART_SetConfig+0x348>
 80072a2:	2310      	movs	r3, #16
 80072a4:	77fb      	strb	r3, [r7, #31]
 80072a6:	e095      	b.n	80073d4 <UART_SetConfig+0x348>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a2f      	ldr	r2, [pc, #188]	; (800736c <UART_SetConfig+0x2e0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d125      	bne.n	80072fe <UART_SetConfig+0x272>
 80072b2:	4b29      	ldr	r3, [pc, #164]	; (8007358 <UART_SetConfig+0x2cc>)
 80072b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072c0:	d017      	beq.n	80072f2 <UART_SetConfig+0x266>
 80072c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072c6:	d817      	bhi.n	80072f8 <UART_SetConfig+0x26c>
 80072c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072cc:	d00b      	beq.n	80072e6 <UART_SetConfig+0x25a>
 80072ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072d2:	d811      	bhi.n	80072f8 <UART_SetConfig+0x26c>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <UART_SetConfig+0x254>
 80072d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072dc:	d006      	beq.n	80072ec <UART_SetConfig+0x260>
 80072de:	e00b      	b.n	80072f8 <UART_SetConfig+0x26c>
 80072e0:	2301      	movs	r3, #1
 80072e2:	77fb      	strb	r3, [r7, #31]
 80072e4:	e076      	b.n	80073d4 <UART_SetConfig+0x348>
 80072e6:	2302      	movs	r3, #2
 80072e8:	77fb      	strb	r3, [r7, #31]
 80072ea:	e073      	b.n	80073d4 <UART_SetConfig+0x348>
 80072ec:	2304      	movs	r3, #4
 80072ee:	77fb      	strb	r3, [r7, #31]
 80072f0:	e070      	b.n	80073d4 <UART_SetConfig+0x348>
 80072f2:	2308      	movs	r3, #8
 80072f4:	77fb      	strb	r3, [r7, #31]
 80072f6:	e06d      	b.n	80073d4 <UART_SetConfig+0x348>
 80072f8:	2310      	movs	r3, #16
 80072fa:	77fb      	strb	r3, [r7, #31]
 80072fc:	e06a      	b.n	80073d4 <UART_SetConfig+0x348>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a1b      	ldr	r2, [pc, #108]	; (8007370 <UART_SetConfig+0x2e4>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d138      	bne.n	800737a <UART_SetConfig+0x2ee>
 8007308:	4b13      	ldr	r3, [pc, #76]	; (8007358 <UART_SetConfig+0x2cc>)
 800730a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007312:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007316:	d017      	beq.n	8007348 <UART_SetConfig+0x2bc>
 8007318:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800731c:	d82a      	bhi.n	8007374 <UART_SetConfig+0x2e8>
 800731e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007322:	d00b      	beq.n	800733c <UART_SetConfig+0x2b0>
 8007324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007328:	d824      	bhi.n	8007374 <UART_SetConfig+0x2e8>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <UART_SetConfig+0x2aa>
 800732e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007332:	d006      	beq.n	8007342 <UART_SetConfig+0x2b6>
 8007334:	e01e      	b.n	8007374 <UART_SetConfig+0x2e8>
 8007336:	2300      	movs	r3, #0
 8007338:	77fb      	strb	r3, [r7, #31]
 800733a:	e04b      	b.n	80073d4 <UART_SetConfig+0x348>
 800733c:	2302      	movs	r3, #2
 800733e:	77fb      	strb	r3, [r7, #31]
 8007340:	e048      	b.n	80073d4 <UART_SetConfig+0x348>
 8007342:	2304      	movs	r3, #4
 8007344:	77fb      	strb	r3, [r7, #31]
 8007346:	e045      	b.n	80073d4 <UART_SetConfig+0x348>
 8007348:	2308      	movs	r3, #8
 800734a:	77fb      	strb	r3, [r7, #31]
 800734c:	e042      	b.n	80073d4 <UART_SetConfig+0x348>
 800734e:	bf00      	nop
 8007350:	efff69f3 	.word	0xefff69f3
 8007354:	40011000 	.word	0x40011000
 8007358:	40023800 	.word	0x40023800
 800735c:	40004400 	.word	0x40004400
 8007360:	40004800 	.word	0x40004800
 8007364:	40004c00 	.word	0x40004c00
 8007368:	40005000 	.word	0x40005000
 800736c:	40011400 	.word	0x40011400
 8007370:	40007800 	.word	0x40007800
 8007374:	2310      	movs	r3, #16
 8007376:	77fb      	strb	r3, [r7, #31]
 8007378:	e02c      	b.n	80073d4 <UART_SetConfig+0x348>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a72      	ldr	r2, [pc, #456]	; (8007548 <UART_SetConfig+0x4bc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d125      	bne.n	80073d0 <UART_SetConfig+0x344>
 8007384:	4b71      	ldr	r3, [pc, #452]	; (800754c <UART_SetConfig+0x4c0>)
 8007386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800738e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007392:	d017      	beq.n	80073c4 <UART_SetConfig+0x338>
 8007394:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007398:	d817      	bhi.n	80073ca <UART_SetConfig+0x33e>
 800739a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800739e:	d00b      	beq.n	80073b8 <UART_SetConfig+0x32c>
 80073a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a4:	d811      	bhi.n	80073ca <UART_SetConfig+0x33e>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <UART_SetConfig+0x326>
 80073aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ae:	d006      	beq.n	80073be <UART_SetConfig+0x332>
 80073b0:	e00b      	b.n	80073ca <UART_SetConfig+0x33e>
 80073b2:	2300      	movs	r3, #0
 80073b4:	77fb      	strb	r3, [r7, #31]
 80073b6:	e00d      	b.n	80073d4 <UART_SetConfig+0x348>
 80073b8:	2302      	movs	r3, #2
 80073ba:	77fb      	strb	r3, [r7, #31]
 80073bc:	e00a      	b.n	80073d4 <UART_SetConfig+0x348>
 80073be:	2304      	movs	r3, #4
 80073c0:	77fb      	strb	r3, [r7, #31]
 80073c2:	e007      	b.n	80073d4 <UART_SetConfig+0x348>
 80073c4:	2308      	movs	r3, #8
 80073c6:	77fb      	strb	r3, [r7, #31]
 80073c8:	e004      	b.n	80073d4 <UART_SetConfig+0x348>
 80073ca:	2310      	movs	r3, #16
 80073cc:	77fb      	strb	r3, [r7, #31]
 80073ce:	e001      	b.n	80073d4 <UART_SetConfig+0x348>
 80073d0:	2310      	movs	r3, #16
 80073d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073dc:	d15b      	bne.n	8007496 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80073de:	7ffb      	ldrb	r3, [r7, #31]
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d828      	bhi.n	8007436 <UART_SetConfig+0x3aa>
 80073e4:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <UART_SetConfig+0x360>)
 80073e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ea:	bf00      	nop
 80073ec:	08007411 	.word	0x08007411
 80073f0:	08007419 	.word	0x08007419
 80073f4:	08007421 	.word	0x08007421
 80073f8:	08007437 	.word	0x08007437
 80073fc:	08007427 	.word	0x08007427
 8007400:	08007437 	.word	0x08007437
 8007404:	08007437 	.word	0x08007437
 8007408:	08007437 	.word	0x08007437
 800740c:	0800742f 	.word	0x0800742f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007410:	f7fd fd68 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 8007414:	61b8      	str	r0, [r7, #24]
        break;
 8007416:	e013      	b.n	8007440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007418:	f7fd fd78 	bl	8004f0c <HAL_RCC_GetPCLK2Freq>
 800741c:	61b8      	str	r0, [r7, #24]
        break;
 800741e:	e00f      	b.n	8007440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007420:	4b4b      	ldr	r3, [pc, #300]	; (8007550 <UART_SetConfig+0x4c4>)
 8007422:	61bb      	str	r3, [r7, #24]
        break;
 8007424:	e00c      	b.n	8007440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007426:	f7fd fc4d 	bl	8004cc4 <HAL_RCC_GetSysClockFreq>
 800742a:	61b8      	str	r0, [r7, #24]
        break;
 800742c:	e008      	b.n	8007440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800742e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007432:	61bb      	str	r3, [r7, #24]
        break;
 8007434:	e004      	b.n	8007440 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	77bb      	strb	r3, [r7, #30]
        break;
 800743e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d074      	beq.n	8007530 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	005a      	lsls	r2, r3, #1
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	441a      	add	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	fbb2 f3f3 	udiv	r3, r2, r3
 800745a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	2b0f      	cmp	r3, #15
 8007460:	d916      	bls.n	8007490 <UART_SetConfig+0x404>
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007468:	d212      	bcs.n	8007490 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	b29b      	uxth	r3, r3
 800746e:	f023 030f 	bic.w	r3, r3, #15
 8007472:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	b29b      	uxth	r3, r3
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	b29a      	uxth	r2, r3
 8007480:	89fb      	ldrh	r3, [r7, #14]
 8007482:	4313      	orrs	r3, r2
 8007484:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	89fa      	ldrh	r2, [r7, #14]
 800748c:	60da      	str	r2, [r3, #12]
 800748e:	e04f      	b.n	8007530 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	77bb      	strb	r3, [r7, #30]
 8007494:	e04c      	b.n	8007530 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007496:	7ffb      	ldrb	r3, [r7, #31]
 8007498:	2b08      	cmp	r3, #8
 800749a:	d828      	bhi.n	80074ee <UART_SetConfig+0x462>
 800749c:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <UART_SetConfig+0x418>)
 800749e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a2:	bf00      	nop
 80074a4:	080074c9 	.word	0x080074c9
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	080074ef 	.word	0x080074ef
 80074b4:	080074df 	.word	0x080074df
 80074b8:	080074ef 	.word	0x080074ef
 80074bc:	080074ef 	.word	0x080074ef
 80074c0:	080074ef 	.word	0x080074ef
 80074c4:	080074e7 	.word	0x080074e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074c8:	f7fd fd0c 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 80074cc:	61b8      	str	r0, [r7, #24]
        break;
 80074ce:	e013      	b.n	80074f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d0:	f7fd fd1c 	bl	8004f0c <HAL_RCC_GetPCLK2Freq>
 80074d4:	61b8      	str	r0, [r7, #24]
        break;
 80074d6:	e00f      	b.n	80074f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074d8:	4b1d      	ldr	r3, [pc, #116]	; (8007550 <UART_SetConfig+0x4c4>)
 80074da:	61bb      	str	r3, [r7, #24]
        break;
 80074dc:	e00c      	b.n	80074f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074de:	f7fd fbf1 	bl	8004cc4 <HAL_RCC_GetSysClockFreq>
 80074e2:	61b8      	str	r0, [r7, #24]
        break;
 80074e4:	e008      	b.n	80074f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ea:	61bb      	str	r3, [r7, #24]
        break;
 80074ec:	e004      	b.n	80074f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	77bb      	strb	r3, [r7, #30]
        break;
 80074f6:	bf00      	nop
    }

    if (pclk != 0U)
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d018      	beq.n	8007530 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	085a      	lsrs	r2, r3, #1
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	441a      	add	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007510:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b0f      	cmp	r3, #15
 8007516:	d909      	bls.n	800752c <UART_SetConfig+0x4a0>
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800751e:	d205      	bcs.n	800752c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	b29a      	uxth	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	60da      	str	r2, [r3, #12]
 800752a:	e001      	b.n	8007530 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800753c:	7fbb      	ldrb	r3, [r7, #30]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3720      	adds	r7, #32
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	40007c00 	.word	0x40007c00
 800754c:	40023800 	.word	0x40023800
 8007550:	00f42400 	.word	0x00f42400

08007554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	f003 0308 	and.w	r3, r3, #8
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01a      	beq.n	800766a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007652:	d10a      	bne.n	800766a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	605a      	str	r2, [r3, #4]
  }
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af02      	add	r7, sp, #8
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076a8:	f7fc f860 	bl	800376c <HAL_GetTick>
 80076ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0308 	and.w	r3, r3, #8
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d10e      	bne.n	80076da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f831 	bl	8007732 <UART_WaitOnFlagUntilTimeout>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e027      	b.n	800772a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d10e      	bne.n	8007706 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f81b 	bl	8007732 <UART_WaitOnFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e011      	b.n	800772a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b09c      	sub	sp, #112	; 0x70
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	603b      	str	r3, [r7, #0]
 800773e:	4613      	mov	r3, r2
 8007740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007742:	e0a7      	b.n	8007894 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774a:	f000 80a3 	beq.w	8007894 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800774e:	f7fc f80d 	bl	800376c <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800775a:	429a      	cmp	r2, r3
 800775c:	d302      	bcc.n	8007764 <UART_WaitOnFlagUntilTimeout+0x32>
 800775e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007760:	2b00      	cmp	r3, #0
 8007762:	d13f      	bne.n	80077e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007778:	667b      	str	r3, [r7, #100]	; 0x64
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007784:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e6      	bne.n	8007764 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3308      	adds	r3, #8
 800779c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	f023 0301 	bic.w	r3, r3, #1
 80077ac:	663b      	str	r3, [r7, #96]	; 0x60
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3308      	adds	r3, #8
 80077b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80077b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e5      	bne.n	8007796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2220      	movs	r2, #32
 80077ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e068      	b.n	80078b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d050      	beq.n	8007894 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007800:	d148      	bne.n	8007894 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800780a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007820:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800782a:	637b      	str	r3, [r7, #52]	; 0x34
 800782c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e6      	bne.n	800780c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	613b      	str	r3, [r7, #16]
   return(result);
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	66bb      	str	r3, [r7, #104]	; 0x68
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3308      	adds	r3, #8
 800785c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800785e:	623a      	str	r2, [r7, #32]
 8007860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	69f9      	ldr	r1, [r7, #28]
 8007864:	6a3a      	ldr	r2, [r7, #32]
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	61bb      	str	r3, [r7, #24]
   return(result);
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e5      	bne.n	800783e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2220      	movs	r2, #32
 8007876:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2220      	movs	r2, #32
 8007884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e010      	b.n	80078b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69da      	ldr	r2, [r3, #28]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	4013      	ands	r3, r2
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	bf0c      	ite	eq
 80078a4:	2301      	moveq	r3, #1
 80078a6:	2300      	movne	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	461a      	mov	r2, r3
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	f43f af48 	beq.w	8007744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3770      	adds	r7, #112	; 0x70
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b096      	sub	sp, #88	; 0x58
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	4613      	mov	r3, r2
 80078cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	88fa      	ldrh	r2, [r7, #6]
 80078d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2222      	movs	r2, #34	; 0x22
 80078e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d028      	beq.n	8007946 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f8:	4a3e      	ldr	r2, [pc, #248]	; (80079f4 <UART_Start_Receive_DMA+0x134>)
 80078fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007900:	4a3d      	ldr	r2, [pc, #244]	; (80079f8 <UART_Start_Receive_DMA+0x138>)
 8007902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007908:	4a3c      	ldr	r2, [pc, #240]	; (80079fc <UART_Start_Receive_DMA+0x13c>)
 800790a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007910:	2200      	movs	r2, #0
 8007912:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3324      	adds	r3, #36	; 0x24
 800791e:	4619      	mov	r1, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007924:	461a      	mov	r2, r3
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	f7fc f910 	bl	8003b4c <HAL_DMA_Start_IT>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2210      	movs	r2, #16
 8007936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2220      	movs	r2, #32
 800793e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e051      	b.n	80079ea <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d018      	beq.n	8007980 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007956:	e853 3f00 	ldrex	r3, [r3]
 800795a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007962:	657b      	str	r3, [r7, #84]	; 0x54
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800796c:	64bb      	str	r3, [r7, #72]	; 0x48
 800796e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800797a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e6      	bne.n	800794e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3308      	adds	r3, #8
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	e853 3f00 	ldrex	r3, [r3]
 800798e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	f043 0301 	orr.w	r3, r3, #1
 8007996:	653b      	str	r3, [r7, #80]	; 0x50
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3308      	adds	r3, #8
 800799e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079a0:	637a      	str	r2, [r7, #52]	; 0x34
 80079a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079a8:	e841 2300 	strex	r3, r2, [r1]
 80079ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e5      	bne.n	8007980 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	613b      	str	r3, [r7, #16]
   return(result);
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3308      	adds	r3, #8
 80079d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079d4:	623a      	str	r2, [r7, #32]
 80079d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	69f9      	ldr	r1, [r7, #28]
 80079da:	6a3a      	ldr	r2, [r7, #32]
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e5      	bne.n	80079b4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3758      	adds	r7, #88	; 0x58
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	08007bc7 	.word	0x08007bc7
 80079f8:	08007cef 	.word	0x08007cef
 80079fc:	08007d2d 	.word	0x08007d2d

08007a00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b089      	sub	sp, #36	; 0x24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a1c:	61fb      	str	r3, [r7, #28]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	61bb      	str	r3, [r7, #24]
 8007a28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	6979      	ldr	r1, [r7, #20]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	613b      	str	r3, [r7, #16]
   return(result);
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e6      	bne.n	8007a08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007a40:	bf00      	nop
 8007a42:	3724      	adds	r7, #36	; 0x24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b095      	sub	sp, #84	; 0x54
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a72:	643b      	str	r3, [r7, #64]	; 0x40
 8007a74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e6      	bne.n	8007a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	f023 0301 	bic.w	r3, r3, #1
 8007a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e5      	bne.n	8007a86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d118      	bne.n	8007af4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f023 0310 	bic.w	r3, r3, #16
 8007ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6979      	ldr	r1, [r7, #20]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	e841 2300 	strex	r3, r2, [r1]
 8007aec:	613b      	str	r3, [r7, #16]
   return(result);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e6      	bne.n	8007ac2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b08:	bf00      	nop
 8007b0a:	3754      	adds	r7, #84	; 0x54
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b090      	sub	sp, #64	; 0x40
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b2a:	d037      	beq.n	8007b9c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	e853 3f00 	ldrex	r3, [r3]
 8007b42:	623b      	str	r3, [r7, #32]
   return(result);
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3308      	adds	r3, #8
 8007b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b54:	633a      	str	r2, [r7, #48]	; 0x30
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b5c:	e841 2300 	strex	r3, r2, [r1]
 8007b60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1e5      	bne.n	8007b34 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	69b9      	ldr	r1, [r7, #24]
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	617b      	str	r3, [r7, #20]
   return(result);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e6      	bne.n	8007b68 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b9a:	e002      	b.n	8007ba2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8007b9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b9e:	f7fa fd95 	bl	80026cc <HAL_UART_TxCpltCallback>
}
 8007ba2:	bf00      	nop
 8007ba4:	3740      	adds	r7, #64	; 0x40
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b084      	sub	sp, #16
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f7ff fa33 	bl	8007024 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bbe:	bf00      	nop
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b09c      	sub	sp, #112	; 0x70
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bdc:	d071      	beq.n	8007cc2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8007bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	461a      	mov	r2, r3
 8007c02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c04:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e6      	bne.n	8007be6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2a:	f023 0301 	bic.w	r3, r3, #1
 8007c2e:	667b      	str	r3, [r7, #100]	; 0x64
 8007c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3308      	adds	r3, #8
 8007c36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c38:	647a      	str	r2, [r7, #68]	; 0x44
 8007c3a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e5      	bne.n	8007c18 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3308      	adds	r3, #8
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c62:	663b      	str	r3, [r7, #96]	; 0x60
 8007c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c6c:	633a      	str	r2, [r7, #48]	; 0x30
 8007c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e5      	bne.n	8007c4c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c82:	2220      	movs	r2, #32
 8007c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d118      	bne.n	8007cc2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f023 0310 	bic.w	r3, r3, #16
 8007ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	69b9      	ldr	r1, [r7, #24]
 8007cb4:	69fa      	ldr	r2, [r7, #28]
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	617b      	str	r3, [r7, #20]
   return(result);
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e6      	bne.n	8007c90 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d107      	bne.n	8007ce0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007cda:	f7ff f9c1 	bl	8007060 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cde:	e002      	b.n	8007ce6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8007ce0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ce2:	f7fa fd05 	bl	80026f0 <HAL_UART_RxCpltCallback>
}
 8007ce6:	bf00      	nop
 8007ce8:	3770      	adds	r7, #112	; 0x70
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d109      	bne.n	8007d1e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d10:	085b      	lsrs	r3, r3, #1
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	4619      	mov	r1, r3
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff f9a2 	bl	8007060 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d1c:	e002      	b.n	8007d24 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff f98a 	bl	8007038 <HAL_UART_RxHalfCpltCallback>
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d52:	2b80      	cmp	r3, #128	; 0x80
 8007d54:	d109      	bne.n	8007d6a <UART_DMAError+0x3e>
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2b21      	cmp	r3, #33	; 0x21
 8007d5a:	d106      	bne.n	8007d6a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007d64:	6978      	ldr	r0, [r7, #20]
 8007d66:	f7ff fe4b 	bl	8007a00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d74:	2b40      	cmp	r3, #64	; 0x40
 8007d76:	d109      	bne.n	8007d8c <UART_DMAError+0x60>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b22      	cmp	r3, #34	; 0x22
 8007d7c:	d106      	bne.n	8007d8c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007d86:	6978      	ldr	r0, [r7, #20]
 8007d88:	f7ff fe60 	bl	8007a4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d92:	f043 0210 	orr.w	r2, r3, #16
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d9c:	6978      	ldr	r0, [r7, #20]
 8007d9e:	f7ff f955 	bl	800704c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da2:	bf00      	nop
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f7ff f93f 	bl	800704c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dce:	bf00      	nop
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b088      	sub	sp, #32
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	e853 3f00 	ldrex	r3, [r3]
 8007dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	61bb      	str	r3, [r7, #24]
 8007dfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	6979      	ldr	r1, [r7, #20]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e6      	bne.n	8007dde <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2220      	movs	r2, #32
 8007e14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7fa fc55 	bl	80026cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e22:	bf00      	nop
 8007e24:	3720      	adds	r7, #32
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <__cxa_pure_virtual>:
 8007e2a:	b508      	push	{r3, lr}
 8007e2c:	f000 f80c 	bl	8007e48 <_ZSt9terminatev>

08007e30 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007e30:	b508      	push	{r3, lr}
 8007e32:	4780      	blx	r0
 8007e34:	f000 f80d 	bl	8007e52 <abort>

08007e38 <_ZSt13get_terminatev>:
 8007e38:	4b02      	ldr	r3, [pc, #8]	; (8007e44 <_ZSt13get_terminatev+0xc>)
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	f3bf 8f5b 	dmb	ish
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	2000000c 	.word	0x2000000c

08007e48 <_ZSt9terminatev>:
 8007e48:	b508      	push	{r3, lr}
 8007e4a:	f7ff fff5 	bl	8007e38 <_ZSt13get_terminatev>
 8007e4e:	f7ff ffef 	bl	8007e30 <_ZN10__cxxabiv111__terminateEPFvvE>

08007e52 <abort>:
 8007e52:	b508      	push	{r3, lr}
 8007e54:	2006      	movs	r0, #6
 8007e56:	f000 f873 	bl	8007f40 <raise>
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	f7fb fbba 	bl	80035d4 <_exit>

08007e60 <__errno>:
 8007e60:	4b01      	ldr	r3, [pc, #4]	; (8007e68 <__errno+0x8>)
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	20000010 	.word	0x20000010

08007e6c <__libc_init_array>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	4d0d      	ldr	r5, [pc, #52]	; (8007ea4 <__libc_init_array+0x38>)
 8007e70:	4c0d      	ldr	r4, [pc, #52]	; (8007ea8 <__libc_init_array+0x3c>)
 8007e72:	1b64      	subs	r4, r4, r5
 8007e74:	10a4      	asrs	r4, r4, #2
 8007e76:	2600      	movs	r6, #0
 8007e78:	42a6      	cmp	r6, r4
 8007e7a:	d109      	bne.n	8007e90 <__libc_init_array+0x24>
 8007e7c:	4d0b      	ldr	r5, [pc, #44]	; (8007eac <__libc_init_array+0x40>)
 8007e7e:	4c0c      	ldr	r4, [pc, #48]	; (8007eb0 <__libc_init_array+0x44>)
 8007e80:	f000 f9b0 	bl	80081e4 <_init>
 8007e84:	1b64      	subs	r4, r4, r5
 8007e86:	10a4      	asrs	r4, r4, #2
 8007e88:	2600      	movs	r6, #0
 8007e8a:	42a6      	cmp	r6, r4
 8007e8c:	d105      	bne.n	8007e9a <__libc_init_array+0x2e>
 8007e8e:	bd70      	pop	{r4, r5, r6, pc}
 8007e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e94:	4798      	blx	r3
 8007e96:	3601      	adds	r6, #1
 8007e98:	e7ee      	b.n	8007e78 <__libc_init_array+0xc>
 8007e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e9e:	4798      	blx	r3
 8007ea0:	3601      	adds	r6, #1
 8007ea2:	e7f2      	b.n	8007e8a <__libc_init_array+0x1e>
 8007ea4:	080084d0 	.word	0x080084d0
 8007ea8:	080084d0 	.word	0x080084d0
 8007eac:	080084d0 	.word	0x080084d0
 8007eb0:	080084d8 	.word	0x080084d8

08007eb4 <memcpy>:
 8007eb4:	440a      	add	r2, r1
 8007eb6:	4291      	cmp	r1, r2
 8007eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ebc:	d100      	bne.n	8007ec0 <memcpy+0xc>
 8007ebe:	4770      	bx	lr
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eca:	4291      	cmp	r1, r2
 8007ecc:	d1f9      	bne.n	8007ec2 <memcpy+0xe>
 8007ece:	bd10      	pop	{r4, pc}

08007ed0 <memset>:
 8007ed0:	4402      	add	r2, r0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d100      	bne.n	8007eda <memset+0xa>
 8007ed8:	4770      	bx	lr
 8007eda:	f803 1b01 	strb.w	r1, [r3], #1
 8007ede:	e7f9      	b.n	8007ed4 <memset+0x4>

08007ee0 <realloc>:
 8007ee0:	4b02      	ldr	r3, [pc, #8]	; (8007eec <realloc+0xc>)
 8007ee2:	460a      	mov	r2, r1
 8007ee4:	4601      	mov	r1, r0
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	f000 b8da 	b.w	80080a0 <_realloc_r>
 8007eec:	20000010 	.word	0x20000010

08007ef0 <_raise_r>:
 8007ef0:	291f      	cmp	r1, #31
 8007ef2:	b538      	push	{r3, r4, r5, lr}
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	460d      	mov	r5, r1
 8007ef8:	d904      	bls.n	8007f04 <_raise_r+0x14>
 8007efa:	2316      	movs	r3, #22
 8007efc:	6003      	str	r3, [r0, #0]
 8007efe:	f04f 30ff 	mov.w	r0, #4294967295
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f06:	b112      	cbz	r2, 8007f0e <_raise_r+0x1e>
 8007f08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f0c:	b94b      	cbnz	r3, 8007f22 <_raise_r+0x32>
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 f830 	bl	8007f74 <_getpid_r>
 8007f14:	462a      	mov	r2, r5
 8007f16:	4601      	mov	r1, r0
 8007f18:	4620      	mov	r0, r4
 8007f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f1e:	f000 b817 	b.w	8007f50 <_kill_r>
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d00a      	beq.n	8007f3c <_raise_r+0x4c>
 8007f26:	1c59      	adds	r1, r3, #1
 8007f28:	d103      	bne.n	8007f32 <_raise_r+0x42>
 8007f2a:	2316      	movs	r3, #22
 8007f2c:	6003      	str	r3, [r0, #0]
 8007f2e:	2001      	movs	r0, #1
 8007f30:	e7e7      	b.n	8007f02 <_raise_r+0x12>
 8007f32:	2400      	movs	r4, #0
 8007f34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f38:	4628      	mov	r0, r5
 8007f3a:	4798      	blx	r3
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	e7e0      	b.n	8007f02 <_raise_r+0x12>

08007f40 <raise>:
 8007f40:	4b02      	ldr	r3, [pc, #8]	; (8007f4c <raise+0xc>)
 8007f42:	4601      	mov	r1, r0
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	f7ff bfd3 	b.w	8007ef0 <_raise_r>
 8007f4a:	bf00      	nop
 8007f4c:	20000010 	.word	0x20000010

08007f50 <_kill_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4d07      	ldr	r5, [pc, #28]	; (8007f70 <_kill_r+0x20>)
 8007f54:	2300      	movs	r3, #0
 8007f56:	4604      	mov	r4, r0
 8007f58:	4608      	mov	r0, r1
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	602b      	str	r3, [r5, #0]
 8007f5e:	f7fb fb29 	bl	80035b4 <_kill>
 8007f62:	1c43      	adds	r3, r0, #1
 8007f64:	d102      	bne.n	8007f6c <_kill_r+0x1c>
 8007f66:	682b      	ldr	r3, [r5, #0]
 8007f68:	b103      	cbz	r3, 8007f6c <_kill_r+0x1c>
 8007f6a:	6023      	str	r3, [r4, #0]
 8007f6c:	bd38      	pop	{r3, r4, r5, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000fd8 	.word	0x20000fd8

08007f74 <_getpid_r>:
 8007f74:	f7fb bb16 	b.w	80035a4 <_getpid>

08007f78 <sbrk_aligned>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	4e0e      	ldr	r6, [pc, #56]	; (8007fb4 <sbrk_aligned+0x3c>)
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	6831      	ldr	r1, [r6, #0]
 8007f80:	4605      	mov	r5, r0
 8007f82:	b911      	cbnz	r1, 8007f8a <sbrk_aligned+0x12>
 8007f84:	f000 f8bc 	bl	8008100 <_sbrk_r>
 8007f88:	6030      	str	r0, [r6, #0]
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f000 f8b7 	bl	8008100 <_sbrk_r>
 8007f92:	1c43      	adds	r3, r0, #1
 8007f94:	d00a      	beq.n	8007fac <sbrk_aligned+0x34>
 8007f96:	1cc4      	adds	r4, r0, #3
 8007f98:	f024 0403 	bic.w	r4, r4, #3
 8007f9c:	42a0      	cmp	r0, r4
 8007f9e:	d007      	beq.n	8007fb0 <sbrk_aligned+0x38>
 8007fa0:	1a21      	subs	r1, r4, r0
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f000 f8ac 	bl	8008100 <_sbrk_r>
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d101      	bne.n	8007fb0 <sbrk_aligned+0x38>
 8007fac:	f04f 34ff 	mov.w	r4, #4294967295
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	bd70      	pop	{r4, r5, r6, pc}
 8007fb4:	20000fd4 	.word	0x20000fd4

08007fb8 <_malloc_r>:
 8007fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fbc:	1ccd      	adds	r5, r1, #3
 8007fbe:	f025 0503 	bic.w	r5, r5, #3
 8007fc2:	3508      	adds	r5, #8
 8007fc4:	2d0c      	cmp	r5, #12
 8007fc6:	bf38      	it	cc
 8007fc8:	250c      	movcc	r5, #12
 8007fca:	2d00      	cmp	r5, #0
 8007fcc:	4607      	mov	r7, r0
 8007fce:	db01      	blt.n	8007fd4 <_malloc_r+0x1c>
 8007fd0:	42a9      	cmp	r1, r5
 8007fd2:	d905      	bls.n	8007fe0 <_malloc_r+0x28>
 8007fd4:	230c      	movs	r3, #12
 8007fd6:	603b      	str	r3, [r7, #0]
 8007fd8:	2600      	movs	r6, #0
 8007fda:	4630      	mov	r0, r6
 8007fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe0:	4e2e      	ldr	r6, [pc, #184]	; (800809c <_malloc_r+0xe4>)
 8007fe2:	f000 f89d 	bl	8008120 <__malloc_lock>
 8007fe6:	6833      	ldr	r3, [r6, #0]
 8007fe8:	461c      	mov	r4, r3
 8007fea:	bb34      	cbnz	r4, 800803a <_malloc_r+0x82>
 8007fec:	4629      	mov	r1, r5
 8007fee:	4638      	mov	r0, r7
 8007ff0:	f7ff ffc2 	bl	8007f78 <sbrk_aligned>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	d14d      	bne.n	8008096 <_malloc_r+0xde>
 8007ffa:	6834      	ldr	r4, [r6, #0]
 8007ffc:	4626      	mov	r6, r4
 8007ffe:	2e00      	cmp	r6, #0
 8008000:	d140      	bne.n	8008084 <_malloc_r+0xcc>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	4631      	mov	r1, r6
 8008006:	4638      	mov	r0, r7
 8008008:	eb04 0803 	add.w	r8, r4, r3
 800800c:	f000 f878 	bl	8008100 <_sbrk_r>
 8008010:	4580      	cmp	r8, r0
 8008012:	d13a      	bne.n	800808a <_malloc_r+0xd2>
 8008014:	6821      	ldr	r1, [r4, #0]
 8008016:	3503      	adds	r5, #3
 8008018:	1a6d      	subs	r5, r5, r1
 800801a:	f025 0503 	bic.w	r5, r5, #3
 800801e:	3508      	adds	r5, #8
 8008020:	2d0c      	cmp	r5, #12
 8008022:	bf38      	it	cc
 8008024:	250c      	movcc	r5, #12
 8008026:	4629      	mov	r1, r5
 8008028:	4638      	mov	r0, r7
 800802a:	f7ff ffa5 	bl	8007f78 <sbrk_aligned>
 800802e:	3001      	adds	r0, #1
 8008030:	d02b      	beq.n	800808a <_malloc_r+0xd2>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	442b      	add	r3, r5
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	e00e      	b.n	8008058 <_malloc_r+0xa0>
 800803a:	6822      	ldr	r2, [r4, #0]
 800803c:	1b52      	subs	r2, r2, r5
 800803e:	d41e      	bmi.n	800807e <_malloc_r+0xc6>
 8008040:	2a0b      	cmp	r2, #11
 8008042:	d916      	bls.n	8008072 <_malloc_r+0xba>
 8008044:	1961      	adds	r1, r4, r5
 8008046:	42a3      	cmp	r3, r4
 8008048:	6025      	str	r5, [r4, #0]
 800804a:	bf18      	it	ne
 800804c:	6059      	strne	r1, [r3, #4]
 800804e:	6863      	ldr	r3, [r4, #4]
 8008050:	bf08      	it	eq
 8008052:	6031      	streq	r1, [r6, #0]
 8008054:	5162      	str	r2, [r4, r5]
 8008056:	604b      	str	r3, [r1, #4]
 8008058:	4638      	mov	r0, r7
 800805a:	f104 060b 	add.w	r6, r4, #11
 800805e:	f000 f865 	bl	800812c <__malloc_unlock>
 8008062:	f026 0607 	bic.w	r6, r6, #7
 8008066:	1d23      	adds	r3, r4, #4
 8008068:	1af2      	subs	r2, r6, r3
 800806a:	d0b6      	beq.n	8007fda <_malloc_r+0x22>
 800806c:	1b9b      	subs	r3, r3, r6
 800806e:	50a3      	str	r3, [r4, r2]
 8008070:	e7b3      	b.n	8007fda <_malloc_r+0x22>
 8008072:	6862      	ldr	r2, [r4, #4]
 8008074:	42a3      	cmp	r3, r4
 8008076:	bf0c      	ite	eq
 8008078:	6032      	streq	r2, [r6, #0]
 800807a:	605a      	strne	r2, [r3, #4]
 800807c:	e7ec      	b.n	8008058 <_malloc_r+0xa0>
 800807e:	4623      	mov	r3, r4
 8008080:	6864      	ldr	r4, [r4, #4]
 8008082:	e7b2      	b.n	8007fea <_malloc_r+0x32>
 8008084:	4634      	mov	r4, r6
 8008086:	6876      	ldr	r6, [r6, #4]
 8008088:	e7b9      	b.n	8007ffe <_malloc_r+0x46>
 800808a:	230c      	movs	r3, #12
 800808c:	603b      	str	r3, [r7, #0]
 800808e:	4638      	mov	r0, r7
 8008090:	f000 f84c 	bl	800812c <__malloc_unlock>
 8008094:	e7a1      	b.n	8007fda <_malloc_r+0x22>
 8008096:	6025      	str	r5, [r4, #0]
 8008098:	e7de      	b.n	8008058 <_malloc_r+0xa0>
 800809a:	bf00      	nop
 800809c:	20000fd0 	.word	0x20000fd0

080080a0 <_realloc_r>:
 80080a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a4:	4680      	mov	r8, r0
 80080a6:	4614      	mov	r4, r2
 80080a8:	460e      	mov	r6, r1
 80080aa:	b921      	cbnz	r1, 80080b6 <_realloc_r+0x16>
 80080ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080b0:	4611      	mov	r1, r2
 80080b2:	f7ff bf81 	b.w	8007fb8 <_malloc_r>
 80080b6:	b92a      	cbnz	r2, 80080c4 <_realloc_r+0x24>
 80080b8:	f000 f83e 	bl	8008138 <_free_r>
 80080bc:	4625      	mov	r5, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c4:	f000 f884 	bl	80081d0 <_malloc_usable_size_r>
 80080c8:	4284      	cmp	r4, r0
 80080ca:	4607      	mov	r7, r0
 80080cc:	d802      	bhi.n	80080d4 <_realloc_r+0x34>
 80080ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080d2:	d812      	bhi.n	80080fa <_realloc_r+0x5a>
 80080d4:	4621      	mov	r1, r4
 80080d6:	4640      	mov	r0, r8
 80080d8:	f7ff ff6e 	bl	8007fb8 <_malloc_r>
 80080dc:	4605      	mov	r5, r0
 80080de:	2800      	cmp	r0, #0
 80080e0:	d0ed      	beq.n	80080be <_realloc_r+0x1e>
 80080e2:	42bc      	cmp	r4, r7
 80080e4:	4622      	mov	r2, r4
 80080e6:	4631      	mov	r1, r6
 80080e8:	bf28      	it	cs
 80080ea:	463a      	movcs	r2, r7
 80080ec:	f7ff fee2 	bl	8007eb4 <memcpy>
 80080f0:	4631      	mov	r1, r6
 80080f2:	4640      	mov	r0, r8
 80080f4:	f000 f820 	bl	8008138 <_free_r>
 80080f8:	e7e1      	b.n	80080be <_realloc_r+0x1e>
 80080fa:	4635      	mov	r5, r6
 80080fc:	e7df      	b.n	80080be <_realloc_r+0x1e>
	...

08008100 <_sbrk_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4d06      	ldr	r5, [pc, #24]	; (800811c <_sbrk_r+0x1c>)
 8008104:	2300      	movs	r3, #0
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	f7fb fa6c 	bl	80035e8 <_sbrk>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d102      	bne.n	800811a <_sbrk_r+0x1a>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	b103      	cbz	r3, 800811a <_sbrk_r+0x1a>
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	20000fd8 	.word	0x20000fd8

08008120 <__malloc_lock>:
 8008120:	4801      	ldr	r0, [pc, #4]	; (8008128 <__malloc_lock+0x8>)
 8008122:	f000 b85d 	b.w	80081e0 <__retarget_lock_acquire_recursive>
 8008126:	bf00      	nop
 8008128:	20000fdc 	.word	0x20000fdc

0800812c <__malloc_unlock>:
 800812c:	4801      	ldr	r0, [pc, #4]	; (8008134 <__malloc_unlock+0x8>)
 800812e:	f000 b858 	b.w	80081e2 <__retarget_lock_release_recursive>
 8008132:	bf00      	nop
 8008134:	20000fdc 	.word	0x20000fdc

08008138 <_free_r>:
 8008138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800813a:	2900      	cmp	r1, #0
 800813c:	d044      	beq.n	80081c8 <_free_r+0x90>
 800813e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008142:	9001      	str	r0, [sp, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f1a1 0404 	sub.w	r4, r1, #4
 800814a:	bfb8      	it	lt
 800814c:	18e4      	addlt	r4, r4, r3
 800814e:	f7ff ffe7 	bl	8008120 <__malloc_lock>
 8008152:	4a1e      	ldr	r2, [pc, #120]	; (80081cc <_free_r+0x94>)
 8008154:	9801      	ldr	r0, [sp, #4]
 8008156:	6813      	ldr	r3, [r2, #0]
 8008158:	b933      	cbnz	r3, 8008168 <_free_r+0x30>
 800815a:	6063      	str	r3, [r4, #4]
 800815c:	6014      	str	r4, [r2, #0]
 800815e:	b003      	add	sp, #12
 8008160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008164:	f7ff bfe2 	b.w	800812c <__malloc_unlock>
 8008168:	42a3      	cmp	r3, r4
 800816a:	d908      	bls.n	800817e <_free_r+0x46>
 800816c:	6825      	ldr	r5, [r4, #0]
 800816e:	1961      	adds	r1, r4, r5
 8008170:	428b      	cmp	r3, r1
 8008172:	bf01      	itttt	eq
 8008174:	6819      	ldreq	r1, [r3, #0]
 8008176:	685b      	ldreq	r3, [r3, #4]
 8008178:	1949      	addeq	r1, r1, r5
 800817a:	6021      	streq	r1, [r4, #0]
 800817c:	e7ed      	b.n	800815a <_free_r+0x22>
 800817e:	461a      	mov	r2, r3
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	b10b      	cbz	r3, 8008188 <_free_r+0x50>
 8008184:	42a3      	cmp	r3, r4
 8008186:	d9fa      	bls.n	800817e <_free_r+0x46>
 8008188:	6811      	ldr	r1, [r2, #0]
 800818a:	1855      	adds	r5, r2, r1
 800818c:	42a5      	cmp	r5, r4
 800818e:	d10b      	bne.n	80081a8 <_free_r+0x70>
 8008190:	6824      	ldr	r4, [r4, #0]
 8008192:	4421      	add	r1, r4
 8008194:	1854      	adds	r4, r2, r1
 8008196:	42a3      	cmp	r3, r4
 8008198:	6011      	str	r1, [r2, #0]
 800819a:	d1e0      	bne.n	800815e <_free_r+0x26>
 800819c:	681c      	ldr	r4, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	6053      	str	r3, [r2, #4]
 80081a2:	4421      	add	r1, r4
 80081a4:	6011      	str	r1, [r2, #0]
 80081a6:	e7da      	b.n	800815e <_free_r+0x26>
 80081a8:	d902      	bls.n	80081b0 <_free_r+0x78>
 80081aa:	230c      	movs	r3, #12
 80081ac:	6003      	str	r3, [r0, #0]
 80081ae:	e7d6      	b.n	800815e <_free_r+0x26>
 80081b0:	6825      	ldr	r5, [r4, #0]
 80081b2:	1961      	adds	r1, r4, r5
 80081b4:	428b      	cmp	r3, r1
 80081b6:	bf04      	itt	eq
 80081b8:	6819      	ldreq	r1, [r3, #0]
 80081ba:	685b      	ldreq	r3, [r3, #4]
 80081bc:	6063      	str	r3, [r4, #4]
 80081be:	bf04      	itt	eq
 80081c0:	1949      	addeq	r1, r1, r5
 80081c2:	6021      	streq	r1, [r4, #0]
 80081c4:	6054      	str	r4, [r2, #4]
 80081c6:	e7ca      	b.n	800815e <_free_r+0x26>
 80081c8:	b003      	add	sp, #12
 80081ca:	bd30      	pop	{r4, r5, pc}
 80081cc:	20000fd0 	.word	0x20000fd0

080081d0 <_malloc_usable_size_r>:
 80081d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d4:	1f18      	subs	r0, r3, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bfbc      	itt	lt
 80081da:	580b      	ldrlt	r3, [r1, r0]
 80081dc:	18c0      	addlt	r0, r0, r3
 80081de:	4770      	bx	lr

080081e0 <__retarget_lock_acquire_recursive>:
 80081e0:	4770      	bx	lr

080081e2 <__retarget_lock_release_recursive>:
 80081e2:	4770      	bx	lr

080081e4 <_init>:
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	bf00      	nop
 80081e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ea:	bc08      	pop	{r3}
 80081ec:	469e      	mov	lr, r3
 80081ee:	4770      	bx	lr

080081f0 <_fini>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	bf00      	nop
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr
