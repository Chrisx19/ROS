
AV_ROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bbc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08008db4  08008db4  00018db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009080  08009080  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009080  08009080  00019080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009088  08009088  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009090  08009090  00019090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004888  20000078  08009108  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004900  08009108  00024900  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a022  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa0  00000000  00000000  0003a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0003d068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  0003e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000059e0  00000000  00000000  0003f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d70  00000000  00000000  00044c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001038d4  00000000  00000000  00059988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d25c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ddc  00000000  00000000  0015d2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000078 	.word	0x20000078
 8000214:	00000000 	.word	0x00000000
 8000218:	08008d9c 	.word	0x08008d9c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000007c 	.word	0x2000007c
 8000234:	08008d9c 	.word	0x08008d9c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	0a5a      	lsrs	r2, r3, #9
 800055c:	490f      	ldr	r1, [pc, #60]	; (800059c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800055e:	fba1 1202 	umull	r1, r2, r1, r2
 8000562:	09d2      	lsrs	r2, r2, #7
 8000564:	490e      	ldr	r1, [pc, #56]	; (80005a0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000566:	fb01 f202 	mul.w	r2, r1, r2
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	0a5b      	lsrs	r3, r3, #9
 8000574:	4a09      	ldr	r2, [pc, #36]	; (800059c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000576:	fba2 2303 	umull	r2, r3, r2, r3
 800057a:	09db      	lsrs	r3, r3, #7
 800057c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	441a      	add	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	00044b83 	.word	0x00044b83
 80005a0:	3b9aca00 	.word	0x3b9aca00

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f003 fcbd 	bl	8003f26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f814 	bl	80005d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fb00 	bl	8000bb4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80005b4:	f000 fad8 	bl	8000b68 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 80005b8:	f000 fa6a 	bl	8000a90 <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 80005bc:	f000 fa9c 	bl	8000af8 <_ZL19MX_USART3_UART_Initv>
  MX_TIM11_Init();
 80005c0:	f000 fa0a 	bl	80009d8 <_ZL13MX_TIM11_Initv>
  MX_TIM3_Init();
 80005c4:	f000 f888 	bl	80006d8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80005c8:	f000 f946 	bl	8000858 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 80005cc:	f002 fa34 	bl	8002a38 <setup>
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 80005d0:	f002 fa66 	bl	8002aa0 <loop>
 80005d4:	e7fc      	b.n	80005d0 <main+0x2c>
	...

080005d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 fa4e 	bl	8008a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <_Z18SystemClock_Configv+0xf8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a33      	ldr	r2, [pc, #204]	; (80006d0 <_Z18SystemClock_Configv+0xf8>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <_Z18SystemClock_Configv+0xf8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000614:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <_Z18SystemClock_Configv+0xfc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061c:	4a2d      	ldr	r2, [pc, #180]	; (80006d4 <_Z18SystemClock_Configv+0xfc>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <_Z18SystemClock_Configv+0xfc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4618      	mov	r0, r3
 800065e:	f004 fc15 	bl	8004e8c <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	bf14      	ite	ne
 8000668:	2301      	movne	r3, #1
 800066a:	2300      	moveq	r3, #0
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000672:	f000 fbb1 	bl	8000dd8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000676:	f004 fbb9 	bl	8004dec <HAL_PWREx_EnableOverDrive>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	bf14      	ite	ne
 8000680:	2301      	movne	r3, #1
 8000682:	2300      	moveq	r3, #0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800068a:	f000 fba5 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	2103      	movs	r1, #3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f004 fe9b 	bl	80053e8 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	bf14      	ite	ne
 80006b8:	2301      	movne	r3, #1
 80006ba:	2300      	moveq	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 80006c2:	f000 fb89 	bl	8000dd8 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f8:	463b      	mov	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
 8000706:	615a      	str	r2, [r3, #20]
 8000708:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800070a:	4b51      	ldr	r3, [pc, #324]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 800070c:	4a51      	ldr	r2, [pc, #324]	; (8000854 <_ZL12MX_TIM3_Initv+0x17c>)
 800070e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000710:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000716:	4b4e      	ldr	r3, [pc, #312]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800071c:	4b4c      	ldr	r3, [pc, #304]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 800071e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000722:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000724:	4b4a      	ldr	r3, [pc, #296]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072a:	4b49      	ldr	r3, [pc, #292]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000730:	4847      	ldr	r0, [pc, #284]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000732:	f005 fca7 	bl	8006084 <HAL_TIM_Base_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8000746:	f000 fb47 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000754:	4619      	mov	r1, r3
 8000756:	483e      	ldr	r0, [pc, #248]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000758:	f006 f87a 	bl	8006850 <HAL_TIM_ConfigClockSource>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 800076c:	f000 fb34 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000770:	4837      	ldr	r0, [pc, #220]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000772:	f005 fcde 	bl	8006132 <HAL_TIM_PWM_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8000786:	f000 fb27 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	482d      	ldr	r0, [pc, #180]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 800079a:	f006 fd13 	bl	80071c4 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf14      	ite	ne
 80007a4:	2301      	movne	r3, #1
 80007a6:	2300      	moveq	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80007ae:	f000 fb13 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b2:	2360      	movs	r3, #96	; 0x60
 80007b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c2:	463b      	mov	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	4619      	mov	r1, r3
 80007c8:	4821      	ldr	r0, [pc, #132]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 80007ca:	f005 ff2d 	bl	8006628 <HAL_TIM_PWM_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf14      	ite	ne
 80007d4:	2301      	movne	r3, #1
 80007d6:	2300      	moveq	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 80007de:	f000 fafb 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007e2:	463b      	mov	r3, r7
 80007e4:	2204      	movs	r2, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4819      	ldr	r0, [pc, #100]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 80007ea:	f005 ff1d 	bl	8006628 <HAL_TIM_PWM_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <_ZL12MX_TIM3_Initv+0x12a>
  {
    Error_Handler();
 80007fe:	f000 faeb 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	2208      	movs	r2, #8
 8000806:	4619      	mov	r1, r3
 8000808:	4811      	ldr	r0, [pc, #68]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 800080a:	f005 ff0d 	bl	8006628 <HAL_TIM_PWM_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	bf14      	ite	ne
 8000814:	2301      	movne	r3, #1
 8000816:	2300      	moveq	r3, #0
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <_ZL12MX_TIM3_Initv+0x14a>
  {
    Error_Handler();
 800081e:	f000 fadb 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	220c      	movs	r2, #12
 8000826:	4619      	mov	r1, r3
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 800082a:	f005 fefd 	bl	8006628 <HAL_TIM_PWM_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	bf14      	ite	ne
 8000834:	2301      	movne	r3, #1
 8000836:	2300      	moveq	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <_ZL12MX_TIM3_Initv+0x16a>
  {
    Error_Handler();
 800083e:	f000 facb 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000844:	f003 f874 	bl	8003930 <HAL_TIM_MspPostInit>

}
 8000848:	bf00      	nop
 800084a:	3738      	adds	r7, #56	; 0x38
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000094 	.word	0x20000094
 8000854:	40000400 	.word	0x40000400

08000858 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	; 0x38
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800088a:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 800088c:	4a51      	ldr	r2, [pc, #324]	; (80009d4 <_ZL12MX_TIM4_Initv+0x17c>)
 800088e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000890:	4b4f      	ldr	r3, [pc, #316]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800089c:	4b4c      	ldr	r3, [pc, #304]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 800089e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a4:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b49      	ldr	r3, [pc, #292]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008b0:	4847      	ldr	r0, [pc, #284]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80008b2:	f005 fbe7 	bl	8006084 <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bf14      	ite	ne
 80008bc:	2301      	movne	r3, #1
 80008be:	2300      	moveq	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 80008c6:	f000 fa87 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d4:	4619      	mov	r1, r3
 80008d6:	483e      	ldr	r0, [pc, #248]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80008d8:	f005 ffba 	bl	8006850 <HAL_TIM_ConfigClockSource>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	bf14      	ite	ne
 80008e2:	2301      	movne	r3, #1
 80008e4:	2300      	moveq	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 80008ec:	f000 fa74 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008f0:	4837      	ldr	r0, [pc, #220]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80008f2:	f005 fc1e 	bl	8006132 <HAL_TIM_PWM_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bf14      	ite	ne
 80008fc:	2301      	movne	r3, #1
 80008fe:	2300      	moveq	r3, #0
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8000906:	f000 fa67 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	482d      	ldr	r0, [pc, #180]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 800091a:	f006 fc53 	bl	80071c4 <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	bf14      	ite	ne
 8000924:	2301      	movne	r3, #1
 8000926:	2300      	moveq	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 800092e:	f000 fa53 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000932:	2360      	movs	r3, #96	; 0x60
 8000934:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	4619      	mov	r1, r3
 8000948:	4821      	ldr	r0, [pc, #132]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 800094a:	f005 fe6d 	bl	8006628 <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf14      	ite	ne
 8000954:	2301      	movne	r3, #1
 8000956:	2300      	moveq	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 800095e:	f000 fa3b 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	2204      	movs	r2, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4819      	ldr	r0, [pc, #100]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 800096a:	f005 fe5d 	bl	8006628 <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <_ZL12MX_TIM4_Initv+0x12a>
  {
    Error_Handler();
 800097e:	f000 fa2b 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000982:	463b      	mov	r3, r7
 8000984:	2208      	movs	r2, #8
 8000986:	4619      	mov	r1, r3
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 800098a:	f005 fe4d 	bl	8006628 <HAL_TIM_PWM_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	bf14      	ite	ne
 8000994:	2301      	movne	r3, #1
 8000996:	2300      	moveq	r3, #0
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <_ZL12MX_TIM4_Initv+0x14a>
  {
    Error_Handler();
 800099e:	f000 fa1b 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	220c      	movs	r2, #12
 80009a6:	4619      	mov	r1, r3
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80009aa:	f005 fe3d 	bl	8006628 <HAL_TIM_PWM_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <_ZL12MX_TIM4_Initv+0x16a>
  {
    Error_Handler();
 80009be:	f000 fa0b 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80009c4:	f002 ffb4 	bl	8003930 <HAL_TIM_MspPostInit>

}
 80009c8:	bf00      	nop
 80009ca:	3738      	adds	r7, #56	; 0x38
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000e0 	.word	0x200000e0
 80009d4:	40000800 	.word	0x40000800

080009d8 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]
 80009ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80009f0:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 80009f2:	4a26      	ldr	r2, [pc, #152]	; (8000a8c <_ZL13MX_TIM11_Initv+0xb4>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80009f6:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 80009f8:	2263      	movs	r2, #99	; 0x63
 80009fa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 19999;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a04:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a08:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000a16:	481c      	ldr	r0, [pc, #112]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a18:	f005 fb34 	bl	8006084 <HAL_TIM_Base_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <_ZL13MX_TIM11_Initv+0x58>
  {
    Error_Handler();
 8000a2c:	f000 f9d4 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000a30:	4815      	ldr	r0, [pc, #84]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a32:	f005 fb7e 	bl	8006132 <HAL_TIM_PWM_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	2300      	moveq	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <_ZL13MX_TIM11_Initv+0x72>
  {
    Error_Handler();
 8000a46:	f000 f9c7 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4a:	2360      	movs	r3, #96	; 0x60
 8000a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a62:	f005 fde1 	bl	8006628 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	bf14      	ite	ne
 8000a6c:	2301      	movne	r3, #1
 8000a6e:	2300      	moveq	r3, #0
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <_ZL13MX_TIM11_Initv+0xa2>
  {
    Error_Handler();
 8000a76:	f000 f9af 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a7c:	f002 ff58 	bl	8003930 <HAL_TIM_MspPostInit>

}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000012c 	.word	0x2000012c
 8000a8c:	40014800 	.word	0x40014800

08000a90 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ad4:	f006 fc22 	bl	800731c <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bf14      	ite	ne
 8000ade:	2301      	movne	r3, #1
 8000ae0:	2300      	moveq	r3, #0
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000ae8:	f000 f976 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000178 	.word	0x20000178
 8000af4:	40011000 	.word	0x40011000

08000af8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000afe:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <_ZL19MX_USART3_UART_Initv+0x6c>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b04:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000b08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b42:	f007 fee5 	bl	8008910 <HAL_RS485Ex_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf14      	ite	ne
 8000b4c:	2301      	movne	r3, #1
 8000b4e:	2300      	moveq	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000b56:	f000 f93f 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000200 	.word	0x20000200
 8000b64:	40004800 	.word	0x40004800

08000b68 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_ZL11MX_DMA_Initv+0x48>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <_ZL11MX_DMA_Initv+0x48>)
 8000b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <_ZL11MX_DMA_Initv+0x48>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	200c      	movs	r0, #12
 8000b8c:	f003 fb27 	bl	80041de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b90:	200c      	movs	r0, #12
 8000b92:	f003 fb40 	bl	8004216 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200e      	movs	r0, #14
 8000b9c:	f003 fb1f 	bl	80041de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ba0:	200e      	movs	r0, #14
 8000ba2:	f003 fb38 	bl	8004216 <HAL_NVIC_EnableIRQ>

}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b7d      	ldr	r3, [pc, #500]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a7c      	ldr	r2, [pc, #496]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b7a      	ldr	r3, [pc, #488]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	61bb      	str	r3, [r7, #24]
 8000be0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be2:	4b77      	ldr	r3, [pc, #476]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a76      	ldr	r2, [pc, #472]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000be8:	f043 0320 	orr.w	r3, r3, #32
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b74      	ldr	r3, [pc, #464]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0320 	and.w	r3, r3, #32
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	4b71      	ldr	r3, [pc, #452]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a70      	ldr	r2, [pc, #448]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b6e      	ldr	r3, [pc, #440]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b6b      	ldr	r3, [pc, #428]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a6a      	ldr	r2, [pc, #424]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b68      	ldr	r3, [pc, #416]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b65      	ldr	r3, [pc, #404]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a64      	ldr	r2, [pc, #400]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b62      	ldr	r3, [pc, #392]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c42:	4b5f      	ldr	r3, [pc, #380]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a5e      	ldr	r2, [pc, #376]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b5c      	ldr	r3, [pc, #368]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c5a:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a58      	ldr	r2, [pc, #352]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b56      	ldr	r3, [pc, #344]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2101      	movs	r1, #1
 8000c76:	4853      	ldr	r0, [pc, #332]	; (8000dc4 <_ZL12MX_GPIO_Initv+0x210>)
 8000c78:	f004 f89e 	bl	8004db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2140      	movs	r1, #64	; 0x40
 8000c80:	4851      	ldr	r0, [pc, #324]	; (8000dc8 <_ZL12MX_GPIO_Initv+0x214>)
 8000c82:	f004 f899 	bl	8004db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	484b      	ldr	r0, [pc, #300]	; (8000dcc <_ZL12MX_GPIO_Initv+0x218>)
 8000c9e:	f003 fedf 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ca2:	2332      	movs	r3, #50	; 0x32
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb2:	230b      	movs	r3, #11
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4843      	ldr	r0, [pc, #268]	; (8000dcc <_ZL12MX_GPIO_Initv+0x218>)
 8000cbe:	f003 fecf 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000cc2:	2306      	movs	r3, #6
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd2:	230b      	movs	r3, #11
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	483c      	ldr	r0, [pc, #240]	; (8000dd0 <_ZL12MX_GPIO_Initv+0x21c>)
 8000cde:	f003 febf 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4832      	ldr	r0, [pc, #200]	; (8000dc4 <_ZL12MX_GPIO_Initv+0x210>)
 8000cfa:	f003 feb1 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d10:	230b      	movs	r3, #11
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	482a      	ldr	r0, [pc, #168]	; (8000dc4 <_ZL12MX_GPIO_Initv+0x210>)
 8000d1c:	f003 fea0 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d20:	2340      	movs	r3, #64	; 0x40
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4824      	ldr	r0, [pc, #144]	; (8000dc8 <_ZL12MX_GPIO_Initv+0x214>)
 8000d38:	f003 fe92 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <_ZL12MX_GPIO_Initv+0x214>)
 8000d50:	f003 fe86 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d54:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d66:	230a      	movs	r3, #10
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <_ZL12MX_GPIO_Initv+0x21c>)
 8000d72:	f003 fe75 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d76:	2340      	movs	r3, #64	; 0x40
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d86:	2307      	movs	r3, #7
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <_ZL12MX_GPIO_Initv+0x220>)
 8000d92:	f003 fe65 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d96:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da8:	230b      	movs	r3, #11
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <_ZL12MX_GPIO_Initv+0x214>)
 8000db4:	f003 fe54 	bl	8004a60 <HAL_GPIO_Init>

}
 8000db8:	bf00      	nop
 8000dba:	3730      	adds	r7, #48	; 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40021800 	.word	0x40021800
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>

08000de2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <_ZN3ros3MsgC1Ev+0x1c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	08009050 	.word	0x08009050

08000e24 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
      data()
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ffe8 	bl	8000e04 <_ZN3ros3MsgC1Ev>
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ffcf 	bl	8000de2 <_ZN3ros4TimeC1Ev>
    {
    }
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08009038 	.word	0x08009038

08000e54 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6859      	ldr	r1, [r3, #4]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b2ca      	uxtb	r2, r1
 8000e6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	0a19      	lsrs	r1, r3, #8
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b2ca      	uxtb	r2, r1
 8000e80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	0c19      	lsrs	r1, r3, #16
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	b2ca      	uxtb	r2, r1
 8000e92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	0e19      	lsrs	r1, r3, #24
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3303      	adds	r3, #3
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b2ca      	uxtb	r2, r1
 8000ea4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6899      	ldr	r1, [r3, #8]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b2ca      	uxtb	r2, r1
 8000eb8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	0a19      	lsrs	r1, r3, #8
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b2ca      	uxtb	r2, r1
 8000eca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	0c19      	lsrs	r1, r3, #16
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	0e19      	lsrs	r1, r3, #24
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	3303      	adds	r3, #3
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	b2ca      	uxtb	r2, r1
 8000eee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	60fb      	str	r3, [r7, #12]
      return offset;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    }
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3301      	adds	r3, #1
 8000f28:	6839      	ldr	r1, [r7, #0]
 8000f2a:	440b      	add	r3, r1
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	6839      	ldr	r1, [r7, #0]
 8000f40:	440b      	add	r3, r1
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3303      	adds	r3, #3
 8000f54:	6839      	ldr	r1, [r7, #0]
 8000f56:	440b      	add	r3, r1
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	061b      	lsls	r3, r3, #24
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3304      	adds	r3, #4
 8000f66:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	6839      	ldr	r1, [r7, #0]
 8000f80:	440b      	add	r3, r1
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3302      	adds	r3, #2
 8000f94:	6839      	ldr	r1, [r7, #0]
 8000f96:	440b      	add	r3, r1
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3303      	adds	r3, #3
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	440b      	add	r3, r1
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	061b      	lsls	r3, r3, #24
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	60fb      	str	r3, [r7, #12]
     return offset;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    }
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	08008db4 	.word	0x08008db4

08000fe8 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	08008dc4 	.word	0x08008dc4

08001004 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fef8 	bl	8000e04 <_ZN3ros3MsgC1Ev>
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	809a      	strh	r2, [r3, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a09      	ldr	r2, [pc, #36]	; (8001048 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a06      	ldr	r2, [pc, #24]	; (8001048 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
    {
    }
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	08009020 	.word	0x08009020
 8001048:	08008de8 	.word	0x08008de8

0800104c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	8899      	ldrh	r1, [r3, #4]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	4413      	add	r3, r2
 8001064:	b2ca      	uxtb	r2, r1
 8001066:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	889b      	ldrh	r3, [r3, #4]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	b299      	uxth	r1, r3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	3301      	adds	r3, #1
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	4413      	add	r3, r2
 8001078:	b2ca      	uxtb	r2, r1
 800107a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	3302      	adds	r3, #2
 8001080:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f8d6 	bl	8000238 <strlen>
 800108c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	4413      	add	r3, r2
 8001094:	69b9      	ldr	r1, [r7, #24]
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fd88 	bl	8002bac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	3304      	adds	r3, #4
 80010a0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	18d0      	adds	r0, r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4619      	mov	r1, r3
 80010b0:	f007 fcdc 	bl	8008a6c <memcpy>
      offset += length_topic_name;
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4413      	add	r3, r2
 80010ba:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f8b9 	bl	8000238 <strlen>
 80010c6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	6979      	ldr	r1, [r7, #20]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fd6b 	bl	8002bac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	18d0      	adds	r0, r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f007 fcbf 	bl	8008a6c <memcpy>
      offset += length_message_type;
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	4413      	add	r3, r2
 80010f4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f89c 	bl	8000238 <strlen>
 8001100:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fd4e 	bl	8002bac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	3304      	adds	r3, #4
 8001114:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	18d0      	adds	r0, r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4619      	mov	r1, r3
 8001124:	f007 fca2 	bl	8008a6c <memcpy>
      offset += length_md5sum;
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4413      	add	r3, r2
 800112e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001136:	68f9      	ldr	r1, [r7, #12]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	b2ca      	uxtb	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	0a19      	lsrs	r1, r3, #8
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	4413      	add	r3, r2
 800114e:	b2ca      	uxtb	r2, r1
 8001150:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	0c19      	lsrs	r1, r3, #16
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3302      	adds	r3, #2
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	4413      	add	r3, r2
 800115e:	b2ca      	uxtb	r2, r1
 8001160:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	0e19      	lsrs	r1, r3, #24
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3303      	adds	r3, #3
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	4413      	add	r3, r2
 800116e:	b2ca      	uxtb	r2, r1
 8001170:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	61fb      	str	r3, [r7, #28]
      return offset;
 8001178:	69fb      	ldr	r3, [r7, #28]
    }
 800117a:	4618      	mov	r0, r3
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001182:	b580      	push	{r7, lr}
 8001184:	b08a      	sub	sp, #40	; 0x28
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b29a      	uxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	889b      	ldrh	r3, [r3, #4]
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	3301      	adds	r3, #1
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	440b      	add	r3, r1
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	3302      	adds	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	441a      	add	r2, r3
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fd0a 	bl	8002be8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	3304      	adds	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	4413      	add	r3, r2
 80011e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d20c      	bcs.n	8001204 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	441a      	add	r2, r3
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6839      	ldr	r1, [r7, #0]
 80011f6:	440b      	add	r3, r1
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	3301      	adds	r3, #1
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
 8001202:	e7ec      	b.n	80011de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	4413      	add	r3, r2
 800120a:	3b01      	subs	r3, #1
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	3b01      	subs	r3, #1
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	441a      	add	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	4413      	add	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	441a      	add	r2, r3
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fcd7 	bl	8002be8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	3304      	adds	r3, #4
 800123e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4413      	add	r3, r2
 800124a:	6a3a      	ldr	r2, [r7, #32]
 800124c:	429a      	cmp	r2, r3
 800124e:	d20c      	bcs.n	800126a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	441a      	add	r2, r3
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	3b01      	subs	r3, #1
 800125a:	6839      	ldr	r1, [r7, #0]
 800125c:	440b      	add	r3, r1
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	3301      	adds	r3, #1
 8001266:	623b      	str	r3, [r7, #32]
 8001268:	e7ec      	b.n	8001244 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4413      	add	r3, r2
 8001270:	3b01      	subs	r3, #1
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	4413      	add	r3, r2
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	3b01      	subs	r3, #1
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	441a      	add	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4413      	add	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	441a      	add	r2, r3
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fca4 	bl	8002be8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	3304      	adds	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d20c      	bcs.n	80012d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	441a      	add	r2, r3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6839      	ldr	r1, [r7, #0]
 80012c2:	440b      	add	r3, r1
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	3301      	adds	r3, #1
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	e7ec      	b.n	80012aa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	3b01      	subs	r3, #1
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	441a      	add	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	440a      	add	r2, r1
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	4313      	orrs	r3, r2
 8001304:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	3301      	adds	r3, #1
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	440b      	add	r3, r1
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	4313      	orrs	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	3302      	adds	r3, #2
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	440b      	add	r3, r1
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	041b      	lsls	r3, r3, #16
 8001326:	4313      	orrs	r3, r2
 8001328:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	3303      	adds	r3, #3
 8001330:	6839      	ldr	r1, [r7, #0]
 8001332:	440b      	add	r3, r1
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	061b      	lsls	r3, r3, #24
 8001338:	4313      	orrs	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	3304      	adds	r3, #4
 8001346:	61bb      	str	r3, [r7, #24]
     return offset;
 8001348:	69bb      	ldr	r3, [r7, #24]
    }
 800134a:	4618      	mov	r0, r3
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	08008dec 	.word	0x08008dec

08001370 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	08008e08 	.word	0x08008e08

0800138c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fd34 	bl	8000e04 <_ZN3ros3MsgC1Ev>
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	711a      	strb	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a04      	ldr	r2, [pc, #16]	; (80013bc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80013ac:	609a      	str	r2, [r3, #8]
    {
    }
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	08009008 	.word	0x08009008
 80013bc:	08008de8 	.word	0x08008de8

080013c0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	7912      	ldrb	r2, [r2, #4]
 80013d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3301      	adds	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe ff27 	bl	8000238 <strlen>
 80013ea:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 fbd9 	bl	8002bac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3304      	adds	r3, #4
 80013fe:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	18d0      	adds	r0, r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	4619      	mov	r1, r3
 800140e:	f007 fb2d 	bl	8008a6c <memcpy>
      offset += length_msg;
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4413      	add	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
      return offset;
 800141a:	68fb      	ldr	r3, [r7, #12]
    }
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	4413      	add	r3, r2
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	3301      	adds	r3, #1
 8001442:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	441a      	add	r2, r3
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fbc9 	bl	8002be8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	3304      	adds	r3, #4
 800145a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	429a      	cmp	r2, r3
 800146a:	d20c      	bcs.n	8001486 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	441a      	add	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3b01      	subs	r3, #1
 8001476:	6839      	ldr	r1, [r7, #0]
 8001478:	440b      	add	r3, r1
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e7ec      	b.n	8001460 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	3b01      	subs	r3, #1
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	4413      	add	r3, r2
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	3b01      	subs	r3, #1
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	441a      	add	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
     return offset;
 80014aa:	693b      	ldr	r3, [r7, #16]
    }
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	08008e2c 	.word	0x08008e2c

080014d0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	08008e40 	.word	0x08008e40

080014ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fc84 	bl	8000e04 <_ZN3ros3MsgC1Ev>
 80014fc:	4a11      	ldr	r2, [pc, #68]	; (8001544 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	08008ff0 	.word	0x08008ff0

08001548 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6859      	ldr	r1, [r3, #4]
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	4413      	add	r3, r2
 8001560:	b2ca      	uxtb	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	0a19      	lsrs	r1, r3, #8
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	3301      	adds	r3, #1
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	4413      	add	r3, r2
 8001572:	b2ca      	uxtb	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	0c19      	lsrs	r1, r3, #16
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	3302      	adds	r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	b2ca      	uxtb	r2, r1
 8001586:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	0e19      	lsrs	r1, r3, #24
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	3303      	adds	r3, #3
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	4413      	add	r3, r2
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	3304      	adds	r3, #4
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	6a3a      	ldr	r2, [r7, #32]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d22b      	bcs.n	8001606 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80015bc:	6939      	ldr	r1, [r7, #16]
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	b2ca      	uxtb	r2, r1
 80015c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	0a19      	lsrs	r1, r3, #8
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	3301      	adds	r3, #1
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	b2ca      	uxtb	r2, r1
 80015d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	0c19      	lsrs	r1, r3, #16
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	3302      	adds	r3, #2
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	b2ca      	uxtb	r2, r1
 80015e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	0e19      	lsrs	r1, r3, #24
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	3303      	adds	r3, #3
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	b2ca      	uxtb	r2, r1
 80015f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	3304      	adds	r3, #4
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	3301      	adds	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
 8001604:	e7ce      	b.n	80015a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6919      	ldr	r1, [r3, #16]
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	4413      	add	r3, r2
 8001610:	b2ca      	uxtb	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	0a19      	lsrs	r1, r3, #8
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	3301      	adds	r3, #1
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	4413      	add	r3, r2
 8001622:	b2ca      	uxtb	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	0c19      	lsrs	r1, r3, #16
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	3302      	adds	r3, #2
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	4413      	add	r3, r2
 8001634:	b2ca      	uxtb	r2, r1
 8001636:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	0e19      	lsrs	r1, r3, #24
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	3303      	adds	r3, #3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	b2ca      	uxtb	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	3304      	adds	r3, #4
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	429a      	cmp	r2, r3
 800165c:	d22b      	bcs.n	80016b6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699a      	ldr	r2, [r3, #24]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800166c:	68f9      	ldr	r1, [r7, #12]
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	4413      	add	r3, r2
 8001674:	b2ca      	uxtb	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	0a19      	lsrs	r1, r3, #8
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	3301      	adds	r3, #1
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	4413      	add	r3, r2
 8001684:	b2ca      	uxtb	r2, r1
 8001686:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	0c19      	lsrs	r1, r3, #16
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	3302      	adds	r3, #2
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	4413      	add	r3, r2
 8001694:	b2ca      	uxtb	r2, r1
 8001696:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	0e19      	lsrs	r1, r3, #24
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	3303      	adds	r3, #3
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	b2ca      	uxtb	r2, r1
 80016a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	3304      	adds	r3, #4
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	e7ce      	b.n	8001654 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69d9      	ldr	r1, [r3, #28]
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	b2ca      	uxtb	r2, r1
 80016c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	0a19      	lsrs	r1, r3, #8
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	3301      	adds	r3, #1
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	b2ca      	uxtb	r2, r1
 80016d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	0c19      	lsrs	r1, r3, #16
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	3302      	adds	r3, #2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	b2ca      	uxtb	r2, r1
 80016e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	0e19      	lsrs	r1, r3, #24
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	3303      	adds	r3, #3
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	b2ca      	uxtb	r2, r1
 80016f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3304      	adds	r3, #4
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	429a      	cmp	r2, r3
 800170c:	d228      	bcs.n	8001760 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fd8c 	bl	8000238 <strlen>
 8001720:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	4413      	add	r3, r2
 8001728:	6979      	ldr	r1, [r7, #20]
 800172a:	4618      	mov	r0, r3
 800172c:	f001 fa3e 	bl	8002bac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	3304      	adds	r3, #4
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	18d0      	adds	r0, r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	4619      	mov	r1, r3
 800174c:	f007 f98e 	bl	8008a6c <memcpy>
      offset += length_stringsi;
 8001750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	4413      	add	r3, r2
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	3301      	adds	r3, #1
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	e7d1      	b.n	8001704 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001762:	4618      	mov	r0, r3
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800176a:	b580      	push	{r7, lr}
 800176c:	b08e      	sub	sp, #56	; 0x38
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001784:	3301      	adds	r3, #1
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	6a3a      	ldr	r2, [r7, #32]
 8001790:	4313      	orrs	r3, r2
 8001792:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001796:	3302      	adds	r3, #2
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	4413      	add	r3, r2
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	041b      	lsls	r3, r3, #16
 80017a0:	6a3a      	ldr	r2, [r7, #32]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80017a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a8:	3303      	adds	r3, #3
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	6a3a      	ldr	r2, [r7, #32]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ba:	3304      	adds	r3, #4
 80017bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	6a3a      	ldr	r2, [r7, #32]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d90a      	bls.n	80017de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4619      	mov	r1, r3
 80017d2:	4610      	mov	r0, r2
 80017d4:	f007 f960 	bl	8008a98 <realloc>
 80017d8:	4602      	mov	r2, r0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a3a      	ldr	r2, [r7, #32]
 80017e2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80017e4:	2300      	movs	r3, #0
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d236      	bcs.n	8001860 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017fa:	6839      	ldr	r1, [r7, #0]
 80017fc:	440a      	add	r2, r1
 80017fe:	7812      	ldrb	r2, [r2, #0]
 8001800:	4313      	orrs	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001808:	3301      	adds	r3, #1
 800180a:	6839      	ldr	r1, [r7, #0]
 800180c:	440b      	add	r3, r1
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	4313      	orrs	r3, r2
 8001814:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181a:	3302      	adds	r3, #2
 800181c:	6839      	ldr	r1, [r7, #0]
 800181e:	440b      	add	r3, r1
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	041b      	lsls	r3, r3, #16
 8001824:	4313      	orrs	r3, r2
 8001826:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182c:	3303      	adds	r3, #3
 800182e:	6839      	ldr	r1, [r7, #0]
 8001830:	440b      	add	r3, r1
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	4313      	orrs	r3, r2
 8001838:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001842:	3304      	adds	r3, #4
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185a:	3301      	adds	r3, #1
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
 800185e:	e7c3      	b.n	80017e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	4413      	add	r3, r2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	3301      	adds	r3, #1
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	4313      	orrs	r3, r2
 800187a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800187c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187e:	3302      	adds	r3, #2
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	041b      	lsls	r3, r3, #16
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	4313      	orrs	r3, r2
 800188c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800188e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001890:	3303      	adds	r3, #3
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	061b      	lsls	r3, r3, #24
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	4313      	orrs	r3, r2
 800189e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80018a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a2:	3304      	adds	r3, #4
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d90a      	bls.n	80018c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4619      	mov	r1, r3
 80018ba:	4610      	mov	r0, r2
 80018bc:	f007 f8ec 	bl	8008a98 <realloc>
 80018c0:	4602      	mov	r2, r0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d236      	bcs.n	8001948 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	440a      	add	r2, r1
 80018e6:	7812      	ldrb	r2, [r2, #0]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f0:	3301      	adds	r3, #1
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	440b      	add	r3, r1
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001902:	3302      	adds	r3, #2
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	440b      	add	r3, r1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	041b      	lsls	r3, r3, #16
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001914:	3303      	adds	r3, #3
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	440b      	add	r3, r1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192a:	3304      	adds	r3, #4
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	3214      	adds	r2, #20
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001942:	3301      	adds	r3, #1
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001946:	e7c3      	b.n	80018d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	4413      	add	r3, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001954:	3301      	adds	r3, #1
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001966:	3302      	adds	r3, #2
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001978:	3303      	adds	r3, #3
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	4413      	add	r3, r2
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198a:	3304      	adds	r3, #4
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	429a      	cmp	r2, r3
 8001996:	d90a      	bls.n	80019ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4619      	mov	r1, r3
 80019a2:	4610      	mov	r0, r2
 80019a4:	f007 f878 	bl	8008a98 <realloc>
 80019a8:	4602      	mov	r2, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019be:	429a      	cmp	r2, r3
 80019c0:	d23f      	bcs.n	8001a42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80019c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	441a      	add	r2, r3
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 f90a 	bl	8002be8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d6:	3304      	adds	r3, #4
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80019da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
 80019de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d20c      	bcs.n	8001a04 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	441a      	add	r2, r3
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	440b      	add	r3, r1
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	3301      	adds	r3, #1
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
 8001a02:	e7ec      	b.n	80019de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	3b01      	subs	r3, #1
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	441a      	add	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4413      	add	r3, r2
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	3220      	adds	r2, #32
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a40:	e7ba      	b.n	80019b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001a44:	4618      	mov	r0, r3
 8001a46:	3738      	adds	r7, #56	; 0x38
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	08008f44 	.word	0x08008f44

08001a68 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	08008e64 	.word	0x08008e64

08001a84 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
  }
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 8192;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8001ab2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 8192;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <_ZN13STM32HardwareC1Ev+0x40>)
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2300      	movs	r3, #0
 8001adc:	6053      	str	r3, [r2, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	6093      	str	r3, [r2, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001af0:	461a      	mov	r2, r3
 8001af2:	2300      	movs	r3, #0
 8001af4:	60d3      	str	r3, [r2, #12]
    }
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	20000200 	.word	0x20000200

08001b08 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f804 	bl	8001b1e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b32:	4619      	mov	r1, r3
 8001b34:	f005 fcbc 	bl	80074b0 <HAL_UART_Receive_DMA>
    }
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b54:	685c      	ldr	r4, [r3, #4]
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffa0 	bl	8001a9c <_ZN13STM32Hardware10getRdmaIndEv>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	429c      	cmp	r4, r3
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d016      	beq.n	8001b9a <_ZN13STM32Hardware4readEv+0x5a>
        c = rbuf[rind++];
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8001b7c:	604a      	str	r2, [r1, #4]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	791b      	ldrb	r3, [r3, #4]
 8001b84:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001b98:	6053      	str	r3, [r2, #4]
      }
      return c;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    }
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}

08001ba4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d108      	bne.n	8001bc8 <_ZN13STM32Hardware5flushEv+0x24>
 8001bb6:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <_ZN13STM32Hardware5flushEv+0xfc>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	f083 0301 	eor.w	r3, r3, #1
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <_ZN13STM32Hardware5flushEv+0x24>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <_ZN13STM32Hardware5flushEv+0x26>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d064      	beq.n	8001c98 <_ZN13STM32Hardware5flushEv+0xf4>
        mutex = true;
 8001bce:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <_ZN13STM32Hardware5flushEv+0xfc>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d054      	beq.n	8001c92 <_ZN13STM32Hardware5flushEv+0xee>
          uint16_t len = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d21b      	bcs.n	8001c38 <_ZN13STM32Hardware5flushEv+0x94>
			len = twind - tfind;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	f242 0308 	movw	r3, #8200	; 0x2008
 8001c28:	4413      	add	r3, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	89fa      	ldrh	r2, [r7, #14]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f005 fbc1 	bl	80073b8 <HAL_UART_Transmit_DMA>
 8001c36:	e024      	b.n	8001c82 <_ZN13STM32Hardware5flushEv+0xde>
		  }else{
			len = tbuflen - tfind;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8001c46:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	f242 0308 	movw	r3, #8200	; 0x2008
 8001c58:	4413      	add	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	89fa      	ldrh	r2, [r7, #14]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f005 fba9 	bl	80073b8 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	f242 0308 	movw	r3, #8200	; 0x2008
 8001c70:	4413      	add	r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001c78:	6892      	ldr	r2, [r2, #8]
 8001c7a:	b292      	uxth	r2, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f005 fb9b 	bl	80073b8 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001c90:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8001c92:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <_ZN13STM32Hardware5flushEv+0xfc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
      }
    }
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000348 	.word	0x20000348

08001ca4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
      int n = length;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cba:	bfa8      	it	ge
 8001cbc:	f44f 5300 	movge.w	r3, #8192	; 0x2000
 8001cc0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f5c3 5200 	rsb	r2, r3, #8192	; 0x2000
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	bf28      	it	cs
 8001cd4:	4613      	movcs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	f242 0308 	movw	r3, #8200	; 0x2008
 8001ce4:	4413      	add	r3, r2
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f006 febc 	bl	8008a6c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001d0a:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d00d      	beq.n	8001d30 <_ZN13STM32Hardware5writeEPhi+0x8c>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	f242 0308 	movw	r3, #8200	; 0x2008
 8001d1a:	4413      	add	r3, r2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68b9      	ldr	r1, [r7, #8]
 8001d20:	1888      	adds	r0, r1, r2
 8001d22:	6979      	ldr	r1, [r7, #20]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	1a8a      	subs	r2, r1, r2
 8001d28:	4601      	mov	r1, r0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f006 fe9e 	bl	8008a6c <memcpy>
      }

      flush();
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7ff ff37 	bl	8001ba4 <_ZN13STM32Hardware5flushEv>
    }
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	f002 f93f 	bl	8003fc8 <HAL_GetTick>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f850 	bl	8000e04 <_ZN3ros3MsgC1Ev>
 8001d64:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	08008fac 	.word	0x08008fac

08001da4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001da4:	b480      	push	{r7}
 8001da6:	b08b      	sub	sp, #44	; 0x2c
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001db8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8001dbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dc2:	6838      	ldr	r0, [r7, #0]
 8001dc4:	4401      	add	r1, r0
 8001dc6:	b2d3      	uxtb	r3, r2
 8001dc8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8001dca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	0a02      	lsrs	r2, r0, #8
 8001dd8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001ddc:	0a0b      	lsrs	r3, r1, #8
 8001dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de0:	3101      	adds	r1, #1
 8001de2:	6838      	ldr	r0, [r7, #0]
 8001de4:	4401      	add	r1, r0
 8001de6:	b2d3      	uxtb	r3, r2
 8001de8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8001dea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	0c02      	lsrs	r2, r0, #16
 8001df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001dfc:	0c0b      	lsrs	r3, r1, #16
 8001dfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e00:	3102      	adds	r1, #2
 8001e02:	6838      	ldr	r0, [r7, #0]
 8001e04:	4401      	add	r1, r0
 8001e06:	b2d3      	uxtb	r3, r2
 8001e08:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8001e0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	0e02      	lsrs	r2, r0, #24
 8001e18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e1c:	0e0b      	lsrs	r3, r1, #24
 8001e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e20:	3103      	adds	r1, #3
 8001e22:	6838      	ldr	r0, [r7, #0]
 8001e24:	4401      	add	r1, r0
 8001e26:	b2d3      	uxtb	r3, r2
 8001e28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8001e2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	000a      	movs	r2, r1
 8001e38:	2300      	movs	r3, #0
 8001e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e3c:	3104      	adds	r1, #4
 8001e3e:	6838      	ldr	r0, [r7, #0]
 8001e40:	4401      	add	r1, r0
 8001e42:	b2d3      	uxtb	r3, r2
 8001e44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8001e46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	0a0a      	lsrs	r2, r1, #8
 8001e54:	2300      	movs	r3, #0
 8001e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e58:	3105      	adds	r1, #5
 8001e5a:	6838      	ldr	r0, [r7, #0]
 8001e5c:	4401      	add	r1, r0
 8001e5e:	b2d3      	uxtb	r3, r2
 8001e60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8001e62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	0c0a      	lsrs	r2, r1, #16
 8001e70:	2300      	movs	r3, #0
 8001e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e74:	3106      	adds	r1, #6
 8001e76:	6838      	ldr	r0, [r7, #0]
 8001e78:	4401      	add	r1, r0
 8001e7a:	b2d3      	uxtb	r3, r2
 8001e7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8001e7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	0e0a      	lsrs	r2, r1, #24
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e90:	3107      	adds	r1, #7
 8001e92:	6838      	ldr	r0, [r7, #0]
 8001e94:	4401      	add	r1, r0
 8001e96:	b2d3      	uxtb	r3, r2
 8001e98:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	3308      	adds	r3, #8
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ea6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8001eaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eb0:	6838      	ldr	r0, [r7, #0]
 8001eb2:	4401      	add	r1, r0
 8001eb4:	b2d3      	uxtb	r3, r2
 8001eb6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8001eb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	0a02      	lsrs	r2, r0, #8
 8001ec6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001eca:	0a0b      	lsrs	r3, r1, #8
 8001ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ece:	3101      	adds	r1, #1
 8001ed0:	6838      	ldr	r0, [r7, #0]
 8001ed2:	4401      	add	r1, r0
 8001ed4:	b2d3      	uxtb	r3, r2
 8001ed6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8001ed8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	0c02      	lsrs	r2, r0, #16
 8001ee6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001eea:	0c0b      	lsrs	r3, r1, #16
 8001eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eee:	3102      	adds	r1, #2
 8001ef0:	6838      	ldr	r0, [r7, #0]
 8001ef2:	4401      	add	r1, r0
 8001ef4:	b2d3      	uxtb	r3, r2
 8001ef6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8001ef8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	0e02      	lsrs	r2, r0, #24
 8001f06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f0a:	0e0b      	lsrs	r3, r1, #24
 8001f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0e:	3103      	adds	r1, #3
 8001f10:	6838      	ldr	r0, [r7, #0]
 8001f12:	4401      	add	r1, r0
 8001f14:	b2d3      	uxtb	r3, r2
 8001f16:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8001f18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	000a      	movs	r2, r1
 8001f26:	2300      	movs	r3, #0
 8001f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2a:	3104      	adds	r1, #4
 8001f2c:	6838      	ldr	r0, [r7, #0]
 8001f2e:	4401      	add	r1, r0
 8001f30:	b2d3      	uxtb	r3, r2
 8001f32:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001f34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	0a0a      	lsrs	r2, r1, #8
 8001f42:	2300      	movs	r3, #0
 8001f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f46:	3105      	adds	r1, #5
 8001f48:	6838      	ldr	r0, [r7, #0]
 8001f4a:	4401      	add	r1, r0
 8001f4c:	b2d3      	uxtb	r3, r2
 8001f4e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001f50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	0c0a      	lsrs	r2, r1, #16
 8001f5e:	2300      	movs	r3, #0
 8001f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f62:	3106      	adds	r1, #6
 8001f64:	6838      	ldr	r0, [r7, #0]
 8001f66:	4401      	add	r1, r0
 8001f68:	b2d3      	uxtb	r3, r2
 8001f6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8001f6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	0e0a      	lsrs	r2, r1, #24
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f7e:	3107      	adds	r1, #7
 8001f80:	6838      	ldr	r0, [r7, #0]
 8001f82:	4401      	add	r1, r0
 8001f84:	b2d3      	uxtb	r3, r2
 8001f86:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f94:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8001f98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f9e:	6838      	ldr	r0, [r7, #0]
 8001fa0:	4401      	add	r1, r0
 8001fa2:	b2d3      	uxtb	r3, r2
 8001fa4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8001fa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	0a02      	lsrs	r2, r0, #8
 8001fb4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001fb8:	0a0b      	lsrs	r3, r1, #8
 8001fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fbc:	3101      	adds	r1, #1
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	4401      	add	r1, r0
 8001fc2:	b2d3      	uxtb	r3, r2
 8001fc4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8001fc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	0c02      	lsrs	r2, r0, #16
 8001fd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001fd8:	0c0b      	lsrs	r3, r1, #16
 8001fda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fdc:	3102      	adds	r1, #2
 8001fde:	6838      	ldr	r0, [r7, #0]
 8001fe0:	4401      	add	r1, r0
 8001fe2:	b2d3      	uxtb	r3, r2
 8001fe4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8001fe6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	0e02      	lsrs	r2, r0, #24
 8001ff4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ff8:	0e0b      	lsrs	r3, r1, #24
 8001ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ffc:	3103      	adds	r1, #3
 8001ffe:	6838      	ldr	r0, [r7, #0]
 8002000:	4401      	add	r1, r0
 8002002:	b2d3      	uxtb	r3, r2
 8002004:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	000a      	movs	r2, r1
 8002014:	2300      	movs	r3, #0
 8002016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002018:	3104      	adds	r1, #4
 800201a:	6838      	ldr	r0, [r7, #0]
 800201c:	4401      	add	r1, r0
 800201e:	b2d3      	uxtb	r3, r2
 8002020:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002022:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	0a0a      	lsrs	r2, r1, #8
 8002030:	2300      	movs	r3, #0
 8002032:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002034:	3105      	adds	r1, #5
 8002036:	6838      	ldr	r0, [r7, #0]
 8002038:	4401      	add	r1, r0
 800203a:	b2d3      	uxtb	r3, r2
 800203c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800203e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	0c0a      	lsrs	r2, r1, #16
 800204c:	2300      	movs	r3, #0
 800204e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002050:	3106      	adds	r1, #6
 8002052:	6838      	ldr	r0, [r7, #0]
 8002054:	4401      	add	r1, r0
 8002056:	b2d3      	uxtb	r3, r2
 8002058:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800205a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	0e0a      	lsrs	r2, r1, #24
 8002068:	2300      	movs	r3, #0
 800206a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800206c:	3107      	adds	r1, #7
 800206e:	6838      	ldr	r0, [r7, #0]
 8002070:	4401      	add	r1, r0
 8002072:	b2d3      	uxtb	r3, r2
 8002074:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	3308      	adds	r3, #8
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800207e:	4618      	mov	r0, r3
 8002080:	372c      	adds	r7, #44	; 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800208a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800208e:	b0eb      	sub	sp, #428	; 0x1ac
 8002090:	af00      	add	r7, sp, #0
 8002092:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002096:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020ac:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80020b0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80020b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020b8:	4413      	add	r3, r2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2200      	movs	r2, #0
 80020c0:	461c      	mov	r4, r3
 80020c2:	4615      	mov	r5, r2
 80020c4:	ea40 0804 	orr.w	r8, r0, r4
 80020c8:	ea41 0905 	orr.w	r9, r1, r5
 80020cc:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020d0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80020d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2200      	movs	r2, #0
 80020e6:	469a      	mov	sl, r3
 80020e8:	4693      	mov	fp, r2
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80020f6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80020fa:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80020fe:	ea40 0402 	orr.w	r4, r0, r2
 8002102:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002106:	430b      	orrs	r3, r1
 8002108:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800210c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002110:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002114:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002118:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800211c:	1c9a      	adds	r2, r3, #2
 800211e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2200      	movs	r2, #0
 800212a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800212e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800213e:	464c      	mov	r4, r9
 8002140:	0423      	lsls	r3, r4, #16
 8002142:	4644      	mov	r4, r8
 8002144:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002148:	4644      	mov	r4, r8
 800214a:	0422      	lsls	r2, r4, #16
 800214c:	ea40 0402 	orr.w	r4, r0, r2
 8002150:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002154:	430b      	orrs	r3, r1
 8002156:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800215a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800215e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002162:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002166:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800216a:	1cda      	adds	r2, r3, #3
 800216c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002170:	4413      	add	r3, r2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2200      	movs	r2, #0
 8002178:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800217c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002180:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002184:	4623      	mov	r3, r4
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800218c:	4623      	mov	r3, r4
 800218e:	061b      	lsls	r3, r3, #24
 8002190:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002194:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002198:	4623      	mov	r3, r4
 800219a:	4303      	orrs	r3, r0
 800219c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021a0:	462b      	mov	r3, r5
 80021a2:	430b      	orrs	r3, r1
 80021a4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021a8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80021ac:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80021b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80021b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021b8:	1d1a      	adds	r2, r3, #4
 80021ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2200      	movs	r2, #0
 80021c6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80021ca:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80021da:	0023      	movs	r3, r4
 80021dc:	2200      	movs	r2, #0
 80021de:	ea40 0402 	orr.w	r4, r0, r2
 80021e2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80021e6:	430b      	orrs	r3, r1
 80021e8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80021ec:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80021f0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80021f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80021f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021fc:	1d5a      	adds	r2, r3, #5
 80021fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2200      	movs	r2, #0
 800220a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800220e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800221e:	0223      	lsls	r3, r4, #8
 8002220:	2200      	movs	r2, #0
 8002222:	ea40 0402 	orr.w	r4, r0, r2
 8002226:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800222a:	430b      	orrs	r3, r1
 800222c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002230:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002234:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002238:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800223c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002240:	1d9a      	adds	r2, r3, #6
 8002242:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2200      	movs	r2, #0
 800224e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002252:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002262:	0423      	lsls	r3, r4, #16
 8002264:	2200      	movs	r2, #0
 8002266:	ea40 0402 	orr.w	r4, r0, r2
 800226a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800226e:	430b      	orrs	r3, r1
 8002270:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002274:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002278:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800227c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002280:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002284:	1dda      	adds	r2, r3, #7
 8002286:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800228a:	4413      	add	r3, r2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2200      	movs	r2, #0
 8002292:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002296:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80022a6:	0623      	lsls	r3, r4, #24
 80022a8:	2200      	movs	r2, #0
 80022aa:	ea40 0402 	orr.w	r4, r0, r2
 80022ae:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80022b2:	430b      	orrs	r3, r1
 80022b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80022b8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80022bc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80022c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80022c4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80022c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80022cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022d0:	3308      	adds	r3, #8
 80022d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022e2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80022e6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80022ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2200      	movs	r2, #0
 80022f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80022fa:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80022fe:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002302:	4623      	mov	r3, r4
 8002304:	4303      	orrs	r3, r0
 8002306:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800230a:	462b      	mov	r3, r5
 800230c:	430b      	orrs	r3, r1
 800230e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002312:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002316:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800231a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800231e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002328:	4413      	add	r3, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2200      	movs	r2, #0
 8002330:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002334:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002344:	464c      	mov	r4, r9
 8002346:	0223      	lsls	r3, r4, #8
 8002348:	4644      	mov	r4, r8
 800234a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800234e:	4644      	mov	r4, r8
 8002350:	0222      	lsls	r2, r4, #8
 8002352:	ea40 0402 	orr.w	r4, r0, r2
 8002356:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800235a:	430b      	orrs	r3, r1
 800235c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002360:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002364:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002368:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800236c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002370:	1c9a      	adds	r2, r3, #2
 8002372:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002376:	4413      	add	r3, r2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2200      	movs	r2, #0
 800237e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002382:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002392:	464c      	mov	r4, r9
 8002394:	0423      	lsls	r3, r4, #16
 8002396:	4644      	mov	r4, r8
 8002398:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800239c:	4644      	mov	r4, r8
 800239e:	0422      	lsls	r2, r4, #16
 80023a0:	ea40 0402 	orr.w	r4, r0, r2
 80023a4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80023a8:	430b      	orrs	r3, r1
 80023aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023ae:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80023b2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023b6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80023ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023be:	1cda      	adds	r2, r3, #3
 80023c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023c4:	4413      	add	r3, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2200      	movs	r2, #0
 80023cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023d0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023d4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80023d8:	4623      	mov	r3, r4
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023e0:	4623      	mov	r3, r4
 80023e2:	061b      	lsls	r3, r3, #24
 80023e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023e8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80023ec:	4623      	mov	r3, r4
 80023ee:	4303      	orrs	r3, r0
 80023f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023f4:	462b      	mov	r3, r5
 80023f6:	430b      	orrs	r3, r1
 80023f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023fc:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002400:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002404:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002408:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800240c:	1d1a      	adds	r2, r3, #4
 800240e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2200      	movs	r2, #0
 800241a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800241e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800242e:	0023      	movs	r3, r4
 8002430:	2200      	movs	r2, #0
 8002432:	ea40 0402 	orr.w	r4, r0, r2
 8002436:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800243a:	430b      	orrs	r3, r1
 800243c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002440:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002444:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002448:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800244c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002450:	1d5a      	adds	r2, r3, #5
 8002452:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002456:	4413      	add	r3, r2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2200      	movs	r2, #0
 800245e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002462:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002472:	0223      	lsls	r3, r4, #8
 8002474:	2200      	movs	r2, #0
 8002476:	ea40 0402 	orr.w	r4, r0, r2
 800247a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800247e:	430b      	orrs	r3, r1
 8002480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002484:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002488:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800248c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002490:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002494:	1d9a      	adds	r2, r3, #6
 8002496:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800249a:	4413      	add	r3, r2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2200      	movs	r2, #0
 80024a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80024b6:	0423      	lsls	r3, r4, #16
 80024b8:	2200      	movs	r2, #0
 80024ba:	ea40 0402 	orr.w	r4, r0, r2
 80024be:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80024c2:	430b      	orrs	r3, r1
 80024c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80024c8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80024cc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80024d0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80024d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024d8:	1dda      	adds	r2, r3, #7
 80024da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024de:	4413      	add	r3, r2
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2200      	movs	r2, #0
 80024e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80024fa:	0623      	lsls	r3, r4, #24
 80024fc:	2200      	movs	r2, #0
 80024fe:	ea40 0402 	orr.w	r4, r0, r2
 8002502:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002506:	430b      	orrs	r3, r1
 8002508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800250c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002510:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002514:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002518:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800251c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002520:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002524:	3308      	adds	r3, #8
 8002526:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002536:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800253a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800253e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002542:	4413      	add	r3, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2200      	movs	r2, #0
 800254a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800254e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002552:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002556:	4623      	mov	r3, r4
 8002558:	4303      	orrs	r3, r0
 800255a:	67bb      	str	r3, [r7, #120]	; 0x78
 800255c:	462b      	mov	r3, r5
 800255e:	430b      	orrs	r3, r1
 8002560:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002562:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002566:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800256a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800256e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002578:	4413      	add	r3, r2
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2200      	movs	r2, #0
 8002580:	673b      	str	r3, [r7, #112]	; 0x70
 8002582:	677a      	str	r2, [r7, #116]	; 0x74
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002590:	464c      	mov	r4, r9
 8002592:	0223      	lsls	r3, r4, #8
 8002594:	4644      	mov	r4, r8
 8002596:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800259a:	4644      	mov	r4, r8
 800259c:	0222      	lsls	r2, r4, #8
 800259e:	ea40 0402 	orr.w	r4, r0, r2
 80025a2:	66bc      	str	r4, [r7, #104]	; 0x68
 80025a4:	430b      	orrs	r3, r1
 80025a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025a8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80025ac:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025b0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80025b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025b8:	1c9a      	adds	r2, r3, #2
 80025ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025be:	4413      	add	r3, r2
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2200      	movs	r2, #0
 80025c6:	663b      	str	r3, [r7, #96]	; 0x60
 80025c8:	667a      	str	r2, [r7, #100]	; 0x64
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025d6:	464c      	mov	r4, r9
 80025d8:	0423      	lsls	r3, r4, #16
 80025da:	4644      	mov	r4, r8
 80025dc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80025e0:	4644      	mov	r4, r8
 80025e2:	0422      	lsls	r2, r4, #16
 80025e4:	ea40 0402 	orr.w	r4, r0, r2
 80025e8:	65bc      	str	r4, [r7, #88]	; 0x58
 80025ea:	430b      	orrs	r3, r1
 80025ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ee:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80025f2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025f6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80025fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025fe:	1cda      	adds	r2, r3, #3
 8002600:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002604:	4413      	add	r3, r2
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2200      	movs	r2, #0
 800260c:	653b      	str	r3, [r7, #80]	; 0x50
 800260e:	657a      	str	r2, [r7, #84]	; 0x54
 8002610:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002614:	4623      	mov	r3, r4
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800261a:	4623      	mov	r3, r4
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002620:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002624:	4623      	mov	r3, r4
 8002626:	4303      	orrs	r3, r0
 8002628:	643b      	str	r3, [r7, #64]	; 0x40
 800262a:	462b      	mov	r3, r5
 800262c:	430b      	orrs	r3, r1
 800262e:	647b      	str	r3, [r7, #68]	; 0x44
 8002630:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002634:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002638:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800263c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002640:	1d1a      	adds	r2, r3, #4
 8002642:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2200      	movs	r2, #0
 800264e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002650:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800265c:	0023      	movs	r3, r4
 800265e:	2200      	movs	r2, #0
 8002660:	ea40 0402 	orr.w	r4, r0, r2
 8002664:	633c      	str	r4, [r7, #48]	; 0x30
 8002666:	430b      	orrs	r3, r1
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
 800266a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800266e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002672:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002676:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800267a:	1d5a      	adds	r2, r3, #5
 800267c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2200      	movs	r2, #0
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
 800268a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002696:	0223      	lsls	r3, r4, #8
 8002698:	2200      	movs	r2, #0
 800269a:	ea40 0402 	orr.w	r4, r0, r2
 800269e:	623c      	str	r4, [r7, #32]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80026a8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80026ac:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80026b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026b4:	3306      	adds	r3, #6
 80026b6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2200      	movs	r2, #0
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	61fa      	str	r2, [r7, #28]
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	69bc      	ldr	r4, [r7, #24]
 80026d0:	0423      	lsls	r3, r4, #16
 80026d2:	2200      	movs	r2, #0
 80026d4:	ea40 0402 	orr.w	r4, r0, r2
 80026d8:	613c      	str	r4, [r7, #16]
 80026da:	430b      	orrs	r3, r1
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80026e2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80026e6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80026ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026ee:	3307      	adds	r3, #7
 80026f0:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80026f4:	4413      	add	r3, r2
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2200      	movs	r2, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	60fa      	str	r2, [r7, #12]
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	68bc      	ldr	r4, [r7, #8]
 800270a:	0623      	lsls	r3, r4, #24
 800270c:	2200      	movs	r2, #0
 800270e:	ea40 0402 	orr.w	r4, r0, r2
 8002712:	603c      	str	r4, [r7, #0]
 8002714:	430b      	orrs	r3, r1
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	e9d7 3400 	ldrd	r3, r4, [r7]
 800271c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002720:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002724:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002728:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 800272c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002730:	3308      	adds	r3, #8
 8002732:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002736:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800273a:	4618      	mov	r0, r3
 800273c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002740:	46bd      	mov	sp, r7
 8002742:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002746:	4770      	bx	lr

08002748 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	08008e88 	.word	0x08008e88

08002764 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	08008ea0 	.word	0x08008ea0

08002780 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fb3a 	bl	8000e04 <_ZN3ros3MsgC1Ev>
 8002790:	4a08      	ldr	r2, [pc, #32]	; (80027b4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3308      	adds	r3, #8
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fada 	bl	8001d54 <_ZN13geometry_msgs7Vector3C1Ev>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3328      	adds	r3, #40	; 0x28
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fad5 	bl	8001d54 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	08008f94 	.word	0x08008f94

080027b8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f103 0008 	add.w	r0, r3, #8
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	4413      	add	r3, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	f7ff fae6 	bl	8001da4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4413      	add	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7ff fad9 	bl	8001da4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
      return offset;
 80027fa:	68fb      	ldr	r3, [r7, #12]
    }
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f103 0008 	add.w	r0, r3, #8
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	4413      	add	r3, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f7ff fc33 	bl	800208a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4413      	add	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4619      	mov	r1, r3
 800283a:	f7ff fc26 	bl	800208a <_ZN13geometry_msgs7Vector311deserializeEPh>
 800283e:	4602      	mov	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
     return offset;
 8002846:	68fb      	ldr	r3, [r7, #12]
    }
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	08008ec4 	.word	0x08008ec4

0800286c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	08008ed8 	.word	0x08008ed8

08002888 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	08008fdc 	.word	0x08008fdc

080028a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ffe8 	bl	8002888 <_ZN3ros15NodeHandleBase_C1Ev>
 80028b8:	4a4c      	ldr	r2, [pc, #304]	; (80029ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x144>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f8fe 	bl	8001ac4 <_ZN13STM32HardwareC1Ev>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028ce:	461a      	mov	r2, r3
 80028d0:	2300      	movs	r3, #0
 80028d2:	6153      	str	r3, [r2, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028da:	461a      	mov	r2, r3
 80028dc:	2300      	movs	r3, #0
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028e6:	461a      	mov	r2, r3
 80028e8:	2300      	movs	r3, #0
 80028ea:	61d3      	str	r3, [r2, #28]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028f2:	461a      	mov	r2, r3
 80028f4:	2300      	movs	r3, #0
 80028f6:	6213      	str	r3, [r2, #32]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028fe:	3324      	adds	r3, #36	; 0x24
 8002900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f006 f8be 	bl	8008a88 <memset>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002912:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8002916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f006 f8b3 	bl	8008a88 <memset>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002928:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800292c:	2264      	movs	r2, #100	; 0x64
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f006 f8a9 	bl	8008a88 <memset>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800293c:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8002940:	2264      	movs	r2, #100	; 0x64
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f006 f89f 	bl	8008a88 <memset>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002950:	461a      	mov	r2, r3
 8002952:	2300      	movs	r3, #0
 8002954:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800295e:	461a      	mov	r2, r3
 8002960:	2300      	movs	r3, #0
 8002962:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800296c:	461a      	mov	r2, r3
 800296e:	2300      	movs	r3, #0
 8002970:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800297a:	461a      	mov	r2, r3
 800297c:	2300      	movs	r3, #0
 800297e:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002988:	461a      	mov	r2, r3
 800298a:	2300      	movs	r3, #0
 800298c:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80029a2:	461a      	mov	r2, r3
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80029b0:	461a      	mov	r2, r3
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80029be:	461a      	mov	r2, r3
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	f244 5314 	movw	r3, #17684	; 0x4514
 80029d8:	4413      	add	r3, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fd86 	bl	80014ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	08008f80 	.word	0x08008f80

080029f0 <HAL_UART_TxCpltCallback>:

void ugv_vel_cb(const geometry_msgs::Twist& ugv_vel_msg);

ros::Subscriber<geometry_msgs::Twist> ugv_vel_sub("cmd_vel_ugv", &ugv_vel_cb);	//subscribing a topic from rpi's topic

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80029f8:	4805      	ldr	r0, [pc, #20]	; (8002a10 <HAL_UART_TxCpltCallback+0x20>)
 80029fa:	f000 f94f 	bl	8002c9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff f8cf 	bl	8001ba4 <_ZN13STM32Hardware5flushEv>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000034c 	.word	0x2000034c

08002a14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002a1c:	4805      	ldr	r0, [pc, #20]	; (8002a34 <HAL_UART_RxCpltCallback+0x20>)
 8002a1e:	f000 f93d 	bl	8002c9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f87a 	bl	8001b1e <_ZN13STM32Hardware10reset_rbufEv>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	2000034c 	.word	0x2000034c

08002a38 <setup>:

void setup(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  nh.initNode();
 8002a3c:	4814      	ldr	r0, [pc, #80]	; (8002a90 <setup+0x58>)
 8002a3e:	f000 f939 	bl	8002cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(ugv_vel_sub);
 8002a42:	4914      	ldr	r1, [pc, #80]	; (8002a94 <setup+0x5c>)
 8002a44:	4812      	ldr	r0, [pc, #72]	; (8002a90 <setup+0x58>)
 8002a46:	f000 f95e 	bl	8002d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4812      	ldr	r0, [pc, #72]	; (8002a98 <setup+0x60>)
 8002a4e:	f003 fbd1 	bl	80061f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002a52:	2104      	movs	r1, #4
 8002a54:	4810      	ldr	r0, [pc, #64]	; (8002a98 <setup+0x60>)
 8002a56:	f003 fbcd 	bl	80061f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002a5a:	2108      	movs	r1, #8
 8002a5c:	480e      	ldr	r0, [pc, #56]	; (8002a98 <setup+0x60>)
 8002a5e:	f003 fbc9 	bl	80061f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002a62:	210c      	movs	r1, #12
 8002a64:	480c      	ldr	r0, [pc, #48]	; (8002a98 <setup+0x60>)
 8002a66:	f003 fbc5 	bl	80061f4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	480b      	ldr	r0, [pc, #44]	; (8002a9c <setup+0x64>)
 8002a6e:	f003 fbc1 	bl	80061f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002a72:	2104      	movs	r1, #4
 8002a74:	4809      	ldr	r0, [pc, #36]	; (8002a9c <setup+0x64>)
 8002a76:	f003 fbbd 	bl	80061f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002a7a:	2108      	movs	r1, #8
 8002a7c:	4807      	ldr	r0, [pc, #28]	; (8002a9c <setup+0x64>)
 8002a7e:	f003 fbb9 	bl	80061f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002a82:	210c      	movs	r1, #12
 8002a84:	4805      	ldr	r0, [pc, #20]	; (8002a9c <setup+0x64>)
 8002a86:	f003 fbb5 	bl	80061f4 <HAL_TIM_PWM_Start>
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2000034c 	.word	0x2000034c
 8002a94:	20004888 	.word	0x20004888
 8002a98:	20000094 	.word	0x20000094
 8002a9c:	200000e0 	.word	0x200000e0

08002aa0 <loop>:

void loop(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  nh.spinOnce();
 8002aa4:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <loop+0x14>)
 8002aa6:	f000 f95b 	bl	8002d60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(10);								//rate of 10hz
 8002aaa:	200a      	movs	r0, #10
 8002aac:	f001 fa98 	bl	8003fe0 <HAL_Delay>
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000034c 	.word	0x2000034c

08002ab8 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE>:

void ugv_vel_cb(const geometry_msgs::Twist& ugv_vel_msg)	//callback function from subscribe
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

	int drive_duty_cycle = ugv_vel_msg.linear.x;//val: -100 <-> 100
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ac6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002aca:	ee17 3a90 	vmov	r3, s15
 8002ace:	60fb      	str	r3, [r7, #12]

	if (drive_duty_cycle > 0)					//Forward
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	dd30      	ble.n	8002b38 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x80>
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, drive_duty_cycle*400);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002adc:	fb03 f202 	mul.w	r2, r3, r2
 8002ae0:	4b30      	ldr	r3, [pc, #192]	; (8002ba4 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xec>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xec>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2200      	movs	r2, #0
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, drive_duty_cycle*400);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002af4:	fb03 f202 	mul.w	r2, r3, r2
 8002af8:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xec>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 8002afe:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xec>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, drive_duty_cycle*400);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b0c:	fb03 f202 	mul.w	r2, r3, r2
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xf0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 0);
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xf0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, drive_duty_cycle*400);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b24:	fb03 f202 	mul.w	r2, r3, r2
 8002b28:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xf0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, 0);
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xf0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, (drive_duty_cycle) *400);

		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, 0);
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, (drive_duty_cycle) *400);
	}
}
 8002b36:	e02f      	b.n	8002b98 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xe0>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xec>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, (drive_duty_cycle) *400);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b46:	fb03 f202 	mul.w	r2, r3, r2
 8002b4a:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xec>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 0);
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xec>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2200      	movs	r2, #0
 8002b56:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, (drive_duty_cycle) *400);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b5e:	fb03 f202 	mul.w	r2, r3, r2
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xec>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 0);
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xf0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, (drive_duty_cycle) *400);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b76:	fb03 f202 	mul.w	r2, r3, r2
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xf0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, 0);
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xf0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, (drive_duty_cycle) *400);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b8e:	fb03 f202 	mul.w	r2, r3, r2
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xf0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	20000094 	.word	0x20000094
 8002ba8:	200000e0 	.word	0x200000e0

08002bac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d80d      	bhi.n	8002bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	fa22 f103 	lsr.w	r1, r2, r3
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	b2ca      	uxtb	r2, r1
 8002bd2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	e7ee      	b.n	8002bba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d811      	bhi.n	8002c26 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6839      	ldr	r1, [r7, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	440a      	add	r2, r1
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	00d2      	lsls	r2, r2, #3
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3301      	adds	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e7ea      	b.n	8002bfc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	08008fc4 	.word	0x08008fc4

08002c54 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ffe5 	bl	8002c34 <_ZN3ros11Subscriber_C1Ev>
 8002c6a:	4a0b      	ldr	r2, [pc, #44]	; (8002c98 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3310      	adds	r3, #16
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fd83 	bl	8002780 <_ZN13geometry_msgs5TwistC1Ev>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	609a      	str	r2, [r3, #8]
  };
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	08008f68 	.word	0x08008f68

08002c9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
  }
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe ff21 	bl	8001b08 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8002d06:	b480      	push	{r7}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b18      	cmp	r3, #24
 8002d18:	dc1b      	bgt.n	8002d52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68f9      	ldr	r1, [r7, #12]
 8002d1e:	f241 1322 	movw	r3, #4386	; 0x1122
 8002d22:	440b      	add	r3, r1
 8002d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10e      	bne.n	8002d4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x44>
      {
        subscribers[i] = &s;
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68f9      	ldr	r1, [r7, #12]
 8002d30:	f241 1322 	movw	r3, #4386	; 0x1122
 8002d34:	440b      	add	r3, r1
 8002d36:	6839      	ldr	r1, [r7, #0]
 8002d38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        s.id_ = i + 100;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	605a      	str	r2, [r3, #4]
        return true;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e004      	b.n	8002d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	e7e0      	b.n	8002d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8002d52:	2300      	movs	r3, #0
  }
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe ffe6 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 8002d72:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002d7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d905      	bls.n	8002d96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002d9c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002daa:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d906      	bls.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d015      	beq.n	8002dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe ffb3 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad2      	subs	r2, r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	bf8c      	ite	hi
 8002dea:	2301      	movhi	r3, #1
 8002dec:	2300      	movls	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8002df4:	f06f 0301 	mvn.w	r3, #1
 8002df8:	e229      	b.n	800324e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ee>
      int data = hardware_.read();
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe fe9e 	bl	8001b40 <_ZN13STM32Hardware4readEv>
 8002e04:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f2c0 8202 	blt.w	8003212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b2>
      checksum_ += data;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e14:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002e22:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e2c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002e30:	2b07      	cmp	r3, #7
 8002e32:	d12d      	bne.n	8002e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e3a:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8002e46:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	b2d1      	uxtb	r1, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	441a      	add	r2, r3
 8002e52:	f244 0324 	movw	r3, #16420	; 0x4024
 8002e56:	4413      	add	r3, r2
 8002e58:	460a      	mov	r2, r1
 8002e5a:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e62:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002e66:	3b01      	subs	r3, #1
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002e6e:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e78:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1a0      	bne.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e86:	461a      	mov	r2, r3
 8002e88:	2308      	movs	r3, #8
 8002e8a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002e8e:	e798      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e96:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d130      	bne.n	8002f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2bff      	cmp	r3, #255	; 0xff
 8002ea2:	d112      	bne.n	8002eca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002eaa:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002eae:	3301      	adds	r3, #1
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002eb6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002ec4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8002ec8:	e77b      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe ff35 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	bf8c      	ite	hi
 8002ee2:	2301      	movhi	r3, #1
 8002ee4:	2300      	movls	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f43f af6a 	beq.w	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8002efa:	f06f 0301 	mvn.w	r3, #1
 8002efe:	e1a6      	b.n	800324e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ee>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f06:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d121      	bne.n	8002f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2bfe      	cmp	r3, #254	; 0xfe
 8002f12:	d10b      	bne.n	8002f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f1a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002f1e:	3301      	adds	r3, #1
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002f26:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002f2a:	e74a      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f32:	461a      	mov	r2, r3
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f40:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f47f af3c 	bne.w	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f983 	bl	8003256 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002f50:	e737      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f58:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d120      	bne.n	8002fa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f66:	461a      	mov	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f74:	461a      	mov	r2, r3
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f82:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002f86:	3301      	adds	r3, #1
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002f8e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8002fa0:	e70f      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002fa8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d118      	bne.n	8002fe2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002fb6:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	4413      	add	r3, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002fc6:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002fd0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002fdc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002fe0:	e6ef      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002fe8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d11f      	bne.n	8003030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002ff6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002ffa:	425a      	negs	r2, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	bf58      	it	pl
 8003002:	4253      	negpl	r3, r2
 8003004:	2bff      	cmp	r3, #255	; 0xff
 8003006:	d10b      	bne.n	8003020 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800300e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003012:	3301      	adds	r3, #1
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800301a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800301e:	e6d0      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003026:	461a      	mov	r2, r3
 8003028:	2300      	movs	r3, #0
 800302a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800302e:	e6c8      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003036:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800303a:	2b05      	cmp	r3, #5
 800303c:	d119      	bne.n	8003072 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003044:	461a      	mov	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003052:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003056:	3301      	adds	r3, #1
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800305e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003068:	461a      	mov	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003070:	e6a7      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003078:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800307c:	2b06      	cmp	r3, #6
 800307e:	d123      	bne.n	80030c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003086:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	4413      	add	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003096:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80030a0:	461a      	mov	r2, r3
 80030a2:	2307      	movs	r3, #7
 80030a4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80030ae:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f47f ae85 	bne.w	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80030be:	461a      	mov	r2, r3
 80030c0:	2308      	movs	r3, #8
 80030c2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80030c6:	e67c      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80030ce:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	f47f ae75 	bne.w	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80030de:	461a      	mov	r2, r3
 80030e0:	2300      	movs	r3, #0
 80030e2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80030ec:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80030f0:	425a      	negs	r2, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	bf58      	it	pl
 80030f8:	4253      	negpl	r3, r2
 80030fa:	2bff      	cmp	r3, #255	; 0xff
 80030fc:	f47f ae61 	bne.w	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003106:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d116      	bne.n	800313c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f8a1 	bl	8003256 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f8bd 	bl	8003294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003120:	461a      	mov	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800312e:	461a      	mov	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
 800313a:	e088      	b.n	800324e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ee>
          else if (topic_ == TopicInfo::ID_TIME)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003142:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003146:	2b0a      	cmp	r3, #10
 8003148:	d108      	bne.n	800315c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	f244 0324 	movw	r3, #16420	; 0x4024
 8003150:	4413      	add	r3, r2
 8003152:	4619      	mov	r1, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f98b 	bl	8003470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800315a:	e632      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003162:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003166:	2b06      	cmp	r3, #6
 8003168:	d112      	bne.n	8003190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	f244 5314 	movw	r3, #17684	; 0x4514
 8003170:	4413      	add	r3, r2
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	f244 0224 	movw	r2, #16420	; 0x4024
 8003178:	440a      	add	r2, r1
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe faf4 	bl	800176a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 800318e:	e618      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003196:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800319a:	2b0b      	cmp	r3, #11
 800319c:	d106      	bne.n	80031ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80031aa:	e60a      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80031b2:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80031b6:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	f241 1322 	movw	r3, #4386	; 0x1122
 80031c0:	440b      	add	r3, r1
 80031c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f43f adfb 	beq.w	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80031d2:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80031d6:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	f241 1322 	movw	r3, #4386	; 0x1122
 80031e0:	440b      	add	r3, r1
 80031e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80031ec:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80031f0:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	f241 1322 	movw	r3, #4386	; 0x1122
 80031fa:	440b      	add	r3, r1
 80031fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	f244 0324 	movw	r3, #16420	; 0x4024
 800320a:	440b      	add	r3, r1
 800320c:	4619      	mov	r1, r3
 800320e:	4790      	blx	r2
    while (true)
 8003210:	e5d7      	b.n	8002dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8003212:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800321a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800321e:	2b00      	cmp	r3, #0
 8003220:	d014      	beq.n	800324c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ec>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003228:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003234:	4293      	cmp	r3, r2
 8003236:	d909      	bls.n	800324c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ec>
      requestSyncTime();
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f80c 	bl	8003256 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003244:	461a      	mov	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 800324c:	2300      	movs	r3, #0
  }
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800325e:	f107 030c 	add.w	r3, r7, #12
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd fdde 	bl	8000e24 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f107 020c 	add.w	r2, r7, #12
 8003272:	210a      	movs	r1, #10
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
    rt_time = hardware_.time();
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe fd5e 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 8003282:	4602      	mov	r2, r0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800328a:	615a      	str	r2, [r3, #20]
  }
 800328c:	bf00      	nop
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b08b      	sub	sp, #44	; 0x2c
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800329c:	f107 030c 	add.w	r3, r7, #12
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd feaf 	bl	8001004 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	2b18      	cmp	r3, #24
 80032ae:	dc69      	bgt.n	8003384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xf0>
    {
      if (publishers[i] != 0) // non-empty slot
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032b4:	f241 1308 	movw	r3, #4360	; 0x1108
 80032b8:	440b      	add	r3, r1
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d05b      	beq.n	800337c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      {
        ti.topic_id = publishers[i]->id_;
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032c8:	f241 1308 	movw	r3, #4360	; 0x1108
 80032cc:	440b      	add	r3, r1
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032de:	f241 1308 	movw	r3, #4360	; 0x1108
 80032e2:	440b      	add	r3, r1
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032f2:	f241 1308 	movw	r3, #4360	; 0x1108
 80032f6:	440b      	add	r3, r1
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	6858      	ldr	r0, [r3, #4]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003304:	f241 1308 	movw	r3, #4360	; 0x1108
 8003308:	440b      	add	r3, r1
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3308      	adds	r3, #8
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4798      	blx	r3
 800331a:	4603      	mov	r3, r0
 800331c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003322:	f241 1308 	movw	r3, #4360	; 0x1108
 8003326:	440b      	add	r3, r1
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	6858      	ldr	r0, [r3, #4]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003334:	f241 1308 	movw	r3, #4360	; 0x1108
 8003338:	440b      	add	r3, r1
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4798      	blx	r3
 800334a:	4603      	mov	r3, r0
 800334c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800334e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003352:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681c      	ldr	r4, [r3, #0]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800335e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003362:	440b      	add	r3, r1
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe fb8a 	bl	8001a84 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003370:	4601      	mov	r1, r0
 8003372:	f107 030c 	add.w	r3, r7, #12
 8003376:	461a      	mov	r2, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	3301      	adds	r3, #1
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
 8003382:	e792      	b.n	80032aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003384:	2300      	movs	r3, #0
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	2b18      	cmp	r3, #24
 800338c:	dc65      	bgt.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1c6>
    {
      if (subscribers[i] != 0) // non-empty slot
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003392:	f241 1322 	movw	r3, #4386	; 0x1122
 8003396:	440b      	add	r3, r1
 8003398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d058      	beq.n	8003452 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1be>
      {
        ti.topic_id = subscribers[i]->id_;
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a4:	f241 1322 	movw	r3, #4386	; 0x1122
 80033a8:	440b      	add	r3, r1
 80033aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b8:	f241 1322 	movw	r3, #4386	; 0x1122
 80033bc:	440b      	add	r3, r1
 80033be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ca:	f241 1322 	movw	r3, #4386	; 0x1122
 80033ce:	440b      	add	r3, r1
 80033d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d8:	f241 1322 	movw	r3, #4386	; 0x1122
 80033dc:	440b      	add	r3, r1
 80033de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3308      	adds	r3, #8
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4798      	blx	r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f2:	f241 1322 	movw	r3, #4386	; 0x1122
 80033f6:	440b      	add	r3, r1
 80033f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003400:	f241 1322 	movw	r3, #4386	; 0x1122
 8003404:	440b      	add	r3, r1
 8003406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4798      	blx	r3
 8003412:	4603      	mov	r3, r0
 8003414:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800341a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681c      	ldr	r4, [r3, #0]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003426:	f241 1322 	movw	r3, #4386	; 0x1122
 800342a:	440b      	add	r3, r1
 800342c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003434:	f241 1322 	movw	r3, #4386	; 0x1122
 8003438:	440b      	add	r3, r1
 800343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3304      	adds	r3, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4798      	blx	r3
 8003446:	4601      	mov	r1, r0
 8003448:	f107 030c 	add.w	r3, r7, #12
 800344c:	461a      	mov	r2, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	3301      	adds	r3, #1
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
 8003458:	e796      	b.n	8003388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xf4>
      }
    }
    configured_ = true;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8003466:	bf00      	nop
 8003468:	372c      	adds	r7, #44	; 0x2c
 800346a:	46bd      	mov	sp, r7
 800346c:	bd90      	pop	{r4, r7, pc}
	...

08003470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800347a:	f107 0308 	add.w	r3, r7, #8
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd fcd0 	bl	8000e24 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe fc58 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 800348e:	4602      	mov	r2, r0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800349c:	f107 0308 	add.w	r3, r7, #8
 80034a0:	6839      	ldr	r1, [r7, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fd2e 	bl	8000f04 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	4915      	ldr	r1, [pc, #84]	; (8003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80034ae:	fba1 1303 	umull	r1, r3, r1, r3
 80034b2:	099b      	lsrs	r3, r3, #6
 80034b4:	4413      	add	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80034b8:	6939      	ldr	r1, [r7, #16]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80034be:	fba3 0302 	umull	r0, r3, r3, r2
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034c8:	fb00 f303 	mul.w	r3, r0, r3
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	4a0e      	ldr	r2, [pc, #56]	; (8003508 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 80034d0:	fb02 f303 	mul.w	r3, r2, r3
 80034d4:	440b      	add	r3, r1
 80034d6:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80034d8:	f107 0308 	add.w	r3, r7, #8
 80034dc:	3304      	adds	r3, #4
 80034de:	4619      	mov	r1, r3
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f8bf 	bl	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3304      	adds	r3, #4
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fc27 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 80034f0:	4602      	mov	r2, r0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80034f8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 80034fc:	bf00      	nop
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	10624dd3 	.word	0x10624dd3
 8003508:	000f4240 	.word	0x000f4240

0800350c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b63      	cmp	r3, #99	; 0x63
 800351c:	dd0b      	ble.n	8003536 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003524:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003528:	f083 0301 	eor.w	r3, r3, #1
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003532:	2300      	movs	r3, #0
 8003534:	e090      	b.n	8003658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68f9      	ldr	r1, [r7, #12]
 800353e:	f244 2324 	movw	r3, #16932	; 0x4224
 8003542:	440b      	add	r3, r1
 8003544:	3307      	adds	r3, #7
 8003546:	4619      	mov	r1, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4790      	blx	r2
 800354c:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003554:	22ff      	movs	r2, #255	; 0xff
 8003556:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003560:	22fe      	movs	r2, #254	; 0xfe
 8003562:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003570:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	b29b      	uxth	r3, r3
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	b29b      	uxth	r3, r3
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003584:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800358e:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003598:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 800359c:	4413      	add	r3, r2
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80035aa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80035b8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	b21b      	sxth	r3, r3
 80035c0:	121b      	asrs	r3, r3, #8
 80035c2:	b21b      	sxth	r3, r3
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80035cc:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80035d4:	2305      	movs	r3, #5
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	3306      	adds	r3, #6
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	429a      	cmp	r2, r3
 80035e0:	dc0e      	bgt.n	8003600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	441a      	add	r2, r3
 80035e8:	f244 2324 	movw	r3, #16932	; 0x4224
 80035ec:	4413      	add	r3, r2
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	3301      	adds	r3, #1
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e7eb      	b.n	80035d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3307      	adds	r3, #7
 8003604:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	425a      	negs	r2, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	bf58      	it	pl
 8003610:	4253      	negpl	r3, r2
 8003612:	b2da      	uxtb	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1c59      	adds	r1, r3, #1
 8003618:	6179      	str	r1, [r7, #20]
 800361a:	43d2      	mvns	r2, r2
 800361c:	b2d1      	uxtb	r1, r2
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	441a      	add	r2, r3
 8003622:	f244 2324 	movw	r3, #16932	; 0x4224
 8003626:	4413      	add	r3, r2
 8003628:	460a      	mov	r2, r1
 800362a:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003632:	dc0b      	bgt.n	800364c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1d18      	adds	r0, r3, #4
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	f244 2324 	movw	r3, #16932	; 0x4224
 800363e:	4413      	add	r3, r2
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4619      	mov	r1, r3
 8003644:	f7fe fb2e 	bl	8001ca4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	e005      	b.n	8003658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800364c:	4904      	ldr	r1, [pc, #16]	; (8003660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f84c 	bl	80036ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003658:	4618      	mov	r0, r3
 800365a:	3720      	adds	r7, #32
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	08008efc 	.word	0x08008efc

08003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3304      	adds	r3, #4
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe fb63 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 8003678:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4917      	ldr	r1, [pc, #92]	; (80036e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003682:	fba1 1303 	umull	r1, r3, r1, r3
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003692:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 800369c:	fba3 0302 	umull	r0, r3, r3, r2
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036a6:	fb00 f303 	mul.w	r3, r0, r3
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	4a0d      	ldr	r2, [pc, #52]	; (80036e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x80>)
 80036ae:	fb02 f303 	mul.w	r3, r2, r3
 80036b2:	1aca      	subs	r2, r1, r3
 80036b4:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x84>)
 80036b6:	4413      	add	r3, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80036be:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	f244 0318 	movw	r3, #16408	; 0x4018
 80036c6:	4413      	add	r3, r2
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	f244 021c 	movw	r2, #16412	; 0x401c
 80036ce:	440a      	add	r2, r1
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc ff3a 	bl	800054c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	10624dd3 	.word	0x10624dd3
 80036e4:	000f4240 	.word	0x000f4240
 80036e8:	3b9aca00 	.word	0x3b9aca00

080036ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	2103      	movs	r1, #3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f804 	bl	8003708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	460b      	mov	r3, r1
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd fe36 	bl	800138c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003720:	7afb      	ldrb	r3, [r7, #11]
 8003722:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f107 0214 	add.w	r2, r7, #20
 8003732:	2107      	movs	r1, #7
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	4798      	blx	r3
  }
 8003738:	bf00      	nop
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <_Z41__static_initialization_and_destruction_0ii>:
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10d      	bne.n	800376c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003756:	4293      	cmp	r3, r2
 8003758:	d108      	bne.n	800376c <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 800375a:	4806      	ldr	r0, [pc, #24]	; (8003774 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800375c:	f7ff f8a4 	bl	80028a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> ugv_vel_sub("cmd_vel_ugv", &ugv_vel_cb);	//subscribing a topic from rpi's topic
 8003760:	2301      	movs	r3, #1
 8003762:	4a05      	ldr	r2, [pc, #20]	; (8003778 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003764:	4905      	ldr	r1, [pc, #20]	; (800377c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003766:	4806      	ldr	r0, [pc, #24]	; (8003780 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003768:	f7ff fa74 	bl	8002c54 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	2000034c 	.word	0x2000034c
 8003778:	08002ab9 	.word	0x08002ab9
 800377c:	08008f38 	.word	0x08008f38
 8003780:	20004888 	.word	0x20004888

08003784 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3310      	adds	r3, #16
 8003792:	6839      	ldr	r1, [r7, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff f835 	bl	8002804 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	3210      	adds	r2, #16
 80037a2:	4610      	mov	r0, r2
 80037a4:	4798      	blx	r3
  }
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3310      	adds	r3, #16
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff f83c 	bl	8002850 <_ZN13geometry_msgs5Twist7getTypeEv>
 80037d8:	4603      	mov	r3, r0
  }
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3310      	adds	r3, #16
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff f83c 	bl	800286c <_ZN13geometry_msgs5Twist6getMD5Ev>
 80037f4:	4603      	mov	r3, r0
  }
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
    return configured_;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800380c:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <_GLOBAL__sub_I_nh>:
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
 8003820:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003824:	2001      	movs	r0, #1
 8003826:	f7ff ff8b 	bl	8003740 <_Z41__static_initialization_and_destruction_0ii>
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <HAL_MspInit+0x44>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a0e      	ldr	r2, [pc, #56]	; (8003870 <HAL_MspInit+0x44>)
 8003838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <HAL_MspInit+0x44>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384a:	4b09      	ldr	r3, [pc, #36]	; (8003870 <HAL_MspInit+0x44>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	4a08      	ldr	r2, [pc, #32]	; (8003870 <HAL_MspInit+0x44>)
 8003850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003854:	6453      	str	r3, [r2, #68]	; 0x44
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_MspInit+0x44>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800

08003874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a27      	ldr	r2, [pc, #156]	; (8003920 <HAL_TIM_Base_MspInit+0xac>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d114      	bne.n	80038b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003886:	4b27      	ldr	r3, [pc, #156]	; (8003924 <HAL_TIM_Base_MspInit+0xb0>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	4a26      	ldr	r2, [pc, #152]	; (8003924 <HAL_TIM_Base_MspInit+0xb0>)
 800388c:	f043 0302 	orr.w	r3, r3, #2
 8003890:	6413      	str	r3, [r2, #64]	; 0x40
 8003892:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_TIM_Base_MspInit+0xb0>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800389e:	2200      	movs	r2, #0
 80038a0:	2100      	movs	r1, #0
 80038a2:	201d      	movs	r0, #29
 80038a4:	f000 fc9b 	bl	80041de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038a8:	201d      	movs	r0, #29
 80038aa:	f000 fcb4 	bl	8004216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80038ae:	e032      	b.n	8003916 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1c      	ldr	r2, [pc, #112]	; (8003928 <HAL_TIM_Base_MspInit+0xb4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d114      	bne.n	80038e4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038ba:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <HAL_TIM_Base_MspInit+0xb0>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_TIM_Base_MspInit+0xb0>)
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	6413      	str	r3, [r2, #64]	; 0x40
 80038c6:	4b17      	ldr	r3, [pc, #92]	; (8003924 <HAL_TIM_Base_MspInit+0xb0>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80038d2:	2200      	movs	r2, #0
 80038d4:	2100      	movs	r1, #0
 80038d6:	201e      	movs	r0, #30
 80038d8:	f000 fc81 	bl	80041de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80038dc:	201e      	movs	r0, #30
 80038de:	f000 fc9a 	bl	8004216 <HAL_NVIC_EnableIRQ>
}
 80038e2:	e018      	b.n	8003916 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM11)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a10      	ldr	r2, [pc, #64]	; (800392c <HAL_TIM_Base_MspInit+0xb8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d113      	bne.n	8003916 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_TIM_Base_MspInit+0xb0>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	4a0c      	ldr	r2, [pc, #48]	; (8003924 <HAL_TIM_Base_MspInit+0xb0>)
 80038f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f8:	6453      	str	r3, [r2, #68]	; 0x44
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_TIM_Base_MspInit+0xb0>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	2100      	movs	r1, #0
 800390a:	201a      	movs	r0, #26
 800390c:	f000 fc67 	bl	80041de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003910:	201a      	movs	r0, #26
 8003912:	f000 fc80 	bl	8004216 <HAL_NVIC_EnableIRQ>
}
 8003916:	bf00      	nop
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40000400 	.word	0x40000400
 8003924:	40023800 	.word	0x40023800
 8003928:	40000800 	.word	0x40000800
 800392c:	40014800 	.word	0x40014800

08003930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	; 0x30
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	f107 031c 	add.w	r3, r7, #28
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a42      	ldr	r2, [pc, #264]	; (8003a58 <HAL_TIM_MspPostInit+0x128>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d139      	bne.n	80039c6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003952:	4b42      	ldr	r3, [pc, #264]	; (8003a5c <HAL_TIM_MspPostInit+0x12c>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	4a41      	ldr	r2, [pc, #260]	; (8003a5c <HAL_TIM_MspPostInit+0x12c>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6313      	str	r3, [r2, #48]	; 0x30
 800395e:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <HAL_TIM_MspPostInit+0x12c>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800396a:	4b3c      	ldr	r3, [pc, #240]	; (8003a5c <HAL_TIM_MspPostInit+0x12c>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4a3b      	ldr	r2, [pc, #236]	; (8003a5c <HAL_TIM_MspPostInit+0x12c>)
 8003970:	f043 0304 	orr.w	r3, r3, #4
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
 8003976:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <HAL_TIM_MspPostInit+0x12c>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	697b      	ldr	r3, [r7, #20]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003982:	23c0      	movs	r3, #192	; 0xc0
 8003984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003986:	2302      	movs	r3, #2
 8003988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398e:	2300      	movs	r3, #0
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003992:	2302      	movs	r3, #2
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003996:	f107 031c 	add.w	r3, r7, #28
 800399a:	4619      	mov	r1, r3
 800399c:	4830      	ldr	r0, [pc, #192]	; (8003a60 <HAL_TIM_MspPostInit+0x130>)
 800399e:	f001 f85f 	bl	8004a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a8:	2302      	movs	r3, #2
 80039aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b0:	2300      	movs	r3, #0
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039b4:	2302      	movs	r3, #2
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039b8:	f107 031c 	add.w	r3, r7, #28
 80039bc:	4619      	mov	r1, r3
 80039be:	4829      	ldr	r0, [pc, #164]	; (8003a64 <HAL_TIM_MspPostInit+0x134>)
 80039c0:	f001 f84e 	bl	8004a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80039c4:	e043      	b.n	8003a4e <HAL_TIM_MspPostInit+0x11e>
  else if(htim->Instance==TIM4)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <HAL_TIM_MspPostInit+0x138>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d11d      	bne.n	8003a0c <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039d0:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <HAL_TIM_MspPostInit+0x12c>)
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <HAL_TIM_MspPostInit+0x12c>)
 80039d6:	f043 0308 	orr.w	r3, r3, #8
 80039da:	6313      	str	r3, [r2, #48]	; 0x30
 80039dc:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <HAL_TIM_MspPostInit+0x12c>)
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80039e8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80039ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f6:	2300      	movs	r3, #0
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039fa:	2302      	movs	r3, #2
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039fe:	f107 031c 	add.w	r3, r7, #28
 8003a02:	4619      	mov	r1, r3
 8003a04:	4819      	ldr	r0, [pc, #100]	; (8003a6c <HAL_TIM_MspPostInit+0x13c>)
 8003a06:	f001 f82b 	bl	8004a60 <HAL_GPIO_Init>
}
 8003a0a:	e020      	b.n	8003a4e <HAL_TIM_MspPostInit+0x11e>
  else if(htim->Instance==TIM11)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <HAL_TIM_MspPostInit+0x140>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d11b      	bne.n	8003a4e <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_TIM_MspPostInit+0x12c>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	4a10      	ldr	r2, [pc, #64]	; (8003a5c <HAL_TIM_MspPostInit+0x12c>)
 8003a1c:	f043 0320 	orr.w	r3, r3, #32
 8003a20:	6313      	str	r3, [r2, #48]	; 0x30
 8003a22:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <HAL_TIM_MspPostInit+0x12c>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM11_Servo_Pin;
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a32:	2302      	movs	r3, #2
 8003a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM11_Servo_GPIO_Port, &GPIO_InitStruct);
 8003a42:	f107 031c 	add.w	r3, r7, #28
 8003a46:	4619      	mov	r1, r3
 8003a48:	480a      	ldr	r0, [pc, #40]	; (8003a74 <HAL_TIM_MspPostInit+0x144>)
 8003a4a:	f001 f809 	bl	8004a60 <HAL_GPIO_Init>
}
 8003a4e:	bf00      	nop
 8003a50:	3730      	adds	r7, #48	; 0x30
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40020800 	.word	0x40020800
 8003a68:	40000800 	.word	0x40000800
 8003a6c:	40020c00 	.word	0x40020c00
 8003a70:	40014800 	.word	0x40014800
 8003a74:	40021400 	.word	0x40021400

08003a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b0b0      	sub	sp, #192	; 0xc0
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a90:	f107 031c 	add.w	r3, r7, #28
 8003a94:	2290      	movs	r2, #144	; 0x90
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 fff5 	bl	8008a88 <memset>
  if(huart->Instance==USART1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a96      	ldr	r2, [pc, #600]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d159      	bne.n	8003b5c <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003aa8:	2340      	movs	r3, #64	; 0x40
 8003aaa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003aac:	2300      	movs	r3, #0
 8003aae:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ab0:	f107 031c 	add.w	r3, r7, #28
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 febd 	bl	8005834 <HAL_RCCEx_PeriphCLKConfig>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ac0:	f7fd f98a 	bl	8000dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ac4:	4b8e      	ldr	r3, [pc, #568]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	4a8d      	ldr	r2, [pc, #564]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003aca:	f043 0310 	orr.w	r3, r3, #16
 8003ace:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad0:	4b8b      	ldr	r3, [pc, #556]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003adc:	4b88      	ldr	r3, [pc, #544]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	4a87      	ldr	r2, [pc, #540]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003ae2:	f043 0302 	orr.w	r3, r3, #2
 8003ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae8:	4b85      	ldr	r3, [pc, #532]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USART1_Rx_Claw_Pin;
 8003af4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afc:	2302      	movs	r3, #2
 8003afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003b0e:	2304      	movs	r3, #4
 8003b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(USART1_Rx_Claw_GPIO_Port, &GPIO_InitStruct);
 8003b14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b18:	4619      	mov	r1, r3
 8003b1a:	487a      	ldr	r0, [pc, #488]	; (8003d04 <HAL_UART_MspInit+0x28c>)
 8003b1c:	f000 ffa0 	bl	8004a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_Tx_Claw_Pin;
 8003b20:	2340      	movs	r3, #64	; 0x40
 8003b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b26:	2302      	movs	r3, #2
 8003b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b32:	2303      	movs	r3, #3
 8003b34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b38:	2307      	movs	r3, #7
 8003b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(USART1_Tx_Claw_GPIO_Port, &GPIO_InitStruct);
 8003b3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b42:	4619      	mov	r1, r3
 8003b44:	486f      	ldr	r0, [pc, #444]	; (8003d04 <HAL_UART_MspInit+0x28c>)
 8003b46:	f000 ff8b 	bl	8004a60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	2025      	movs	r0, #37	; 0x25
 8003b50:	f000 fb45 	bl	80041de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b54:	2025      	movs	r0, #37	; 0x25
 8003b56:	f000 fb5e 	bl	8004216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003b5a:	e0ca      	b.n	8003cf2 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART3)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a69      	ldr	r2, [pc, #420]	; (8003d08 <HAL_UART_MspInit+0x290>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	f040 80c5 	bne.w	8003cf2 <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b72:	f107 031c 	add.w	r3, r7, #28
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 fe5c 	bl	8005834 <HAL_RCCEx_PeriphCLKConfig>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_UART_MspInit+0x10e>
      Error_Handler();
 8003b82:	f7fd f929 	bl	8000dd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b86:	4b5e      	ldr	r3, [pc, #376]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	4a5d      	ldr	r2, [pc, #372]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b90:	6413      	str	r3, [r2, #64]	; 0x40
 8003b92:	4b5b      	ldr	r3, [pc, #364]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9e:	4b58      	ldr	r3, [pc, #352]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a57      	ldr	r2, [pc, #348]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003ba4:	f043 0302 	orr.w	r3, r3, #2
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b55      	ldr	r3, [pc, #340]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bb6:	4b52      	ldr	r3, [pc, #328]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	4a51      	ldr	r2, [pc, #324]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003bbc:	f043 0308 	orr.w	r3, r3, #8
 8003bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc2:	4b4f      	ldr	r3, [pc, #316]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003bce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be2:	2303      	movs	r3, #3
 8003be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003be8:	2307      	movs	r3, #7
 8003bea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4843      	ldr	r0, [pc, #268]	; (8003d04 <HAL_UART_MspInit+0x28c>)
 8003bf6:	f000 ff33 	bl	8004a60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_Tx_Rpi_Pin|USART3_Rx_Rpi_Pin;
 8003bfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c02:	2302      	movs	r3, #2
 8003c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c14:	2307      	movs	r3, #7
 8003c16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c1e:	4619      	mov	r1, r3
 8003c20:	483a      	ldr	r0, [pc, #232]	; (8003d0c <HAL_UART_MspInit+0x294>)
 8003c22:	f000 ff1d 	bl	8004a60 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003c26:	4b3a      	ldr	r3, [pc, #232]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c28:	4a3a      	ldr	r2, [pc, #232]	; (8003d14 <HAL_UART_MspInit+0x29c>)
 8003c2a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003c2c:	4b38      	ldr	r3, [pc, #224]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c32:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c34:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c3a:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c40:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c46:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c48:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c4e:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003c54:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003c5a:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c60:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c62:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003c68:	4829      	ldr	r0, [pc, #164]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c6a:	f000 faef 	bl	800424c <HAL_DMA_Init>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_UART_MspInit+0x200>
      Error_Handler();
 8003c74:	f7fd f8b0 	bl	8000dd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a25      	ldr	r2, [pc, #148]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c7c:	675a      	str	r2, [r3, #116]	; 0x74
 8003c7e:	4a24      	ldr	r2, [pc, #144]	; (8003d10 <HAL_UART_MspInit+0x298>)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003c84:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003c86:	4a25      	ldr	r2, [pc, #148]	; (8003d1c <HAL_UART_MspInit+0x2a4>)
 8003c88:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003c8a:	4b23      	ldr	r3, [pc, #140]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c90:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c92:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003c94:	2240      	movs	r2, #64	; 0x40
 8003c96:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c98:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ca4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cac:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003cb2:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003cb8:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003cba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cbe:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cc0:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003cc6:	4814      	ldr	r0, [pc, #80]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003cc8:	f000 fac0 	bl	800424c <HAL_DMA_Init>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8003cd2:	f7fd f881 	bl	8000dd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a0f      	ldr	r2, [pc, #60]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003cda:	671a      	str	r2, [r3, #112]	; 0x70
 8003cdc:	4a0e      	ldr	r2, [pc, #56]	; (8003d18 <HAL_UART_MspInit+0x2a0>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	2027      	movs	r0, #39	; 0x27
 8003ce8:	f000 fa79 	bl	80041de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003cec:	2027      	movs	r0, #39	; 0x27
 8003cee:	f000 fa92 	bl	8004216 <HAL_NVIC_EnableIRQ>
}
 8003cf2:	bf00      	nop
 8003cf4:	37c0      	adds	r7, #192	; 0xc0
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40011000 	.word	0x40011000
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020400 	.word	0x40020400
 8003d08:	40004800 	.word	0x40004800
 8003d0c:	40020c00 	.word	0x40020c00
 8003d10:	20000288 	.word	0x20000288
 8003d14:	40026028 	.word	0x40026028
 8003d18:	200002e8 	.word	0x200002e8
 8003d1c:	40026058 	.word	0x40026058

08003d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <NMI_Handler+0x4>

08003d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d2a:	e7fe      	b.n	8003d2a <HardFault_Handler+0x4>

08003d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d30:	e7fe      	b.n	8003d30 <MemManage_Handler+0x4>

08003d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d36:	e7fe      	b.n	8003d36 <BusFault_Handler+0x4>

08003d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d3c:	e7fe      	b.n	8003d3c <UsageFault_Handler+0x4>

08003d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d6c:	f000 f918 	bl	8003fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003d78:	4802      	ldr	r0, [pc, #8]	; (8003d84 <DMA1_Stream1_IRQHandler+0x10>)
 8003d7a:	f000 fc07 	bl	800458c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000288 	.word	0x20000288

08003d88 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003d8c:	4802      	ldr	r0, [pc, #8]	; (8003d98 <DMA1_Stream3_IRQHandler+0x10>)
 8003d8e:	f000 fbfd 	bl	800458c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200002e8 	.word	0x200002e8

08003d9c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003da0:	4802      	ldr	r0, [pc, #8]	; (8003dac <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003da2:	f002 fb21 	bl	80063e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	2000012c 	.word	0x2000012c

08003db0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003db4:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <TIM3_IRQHandler+0x10>)
 8003db6:	f002 fb17 	bl	80063e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000094 	.word	0x20000094

08003dc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003dc8:	4802      	ldr	r0, [pc, #8]	; (8003dd4 <TIM4_IRQHandler+0x10>)
 8003dca:	f002 fb0d 	bl	80063e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200000e0 	.word	0x200000e0

08003dd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ddc:	4802      	ldr	r0, [pc, #8]	; (8003de8 <USART1_IRQHandler+0x10>)
 8003dde:	f003 fbab 	bl	8007538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000178 	.word	0x20000178

08003dec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003df0:	4802      	ldr	r0, [pc, #8]	; (8003dfc <USART3_IRQHandler+0x10>)
 8003df2:	f003 fba1 	bl	8007538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000200 	.word	0x20000200

08003e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
	return 1;
 8003e04:	2301      	movs	r3, #1
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <_kill>:

int _kill(int pid, int sig)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e1a:	f004 fdfd 	bl	8008a18 <__errno>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2216      	movs	r2, #22
 8003e22:	601a      	str	r2, [r3, #0]
	return -1;
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <_exit>:

void _exit (int status)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e38:	f04f 31ff 	mov.w	r1, #4294967295
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ffe7 	bl	8003e10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e42:	e7fe      	b.n	8003e42 <_exit+0x12>

08003e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e4c:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <_sbrk+0x5c>)
 8003e4e:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <_sbrk+0x60>)
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e58:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <_sbrk+0x64>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d102      	bne.n	8003e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e60:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <_sbrk+0x64>)
 8003e62:	4a12      	ldr	r2, [pc, #72]	; (8003eac <_sbrk+0x68>)
 8003e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <_sbrk+0x64>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d207      	bcs.n	8003e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e74:	f004 fdd0 	bl	8008a18 <__errno>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	220c      	movs	r2, #12
 8003e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e82:	e009      	b.n	8003e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <_sbrk+0x64>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e8a:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <_sbrk+0x64>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <_sbrk+0x64>)
 8003e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e96:	68fb      	ldr	r3, [r7, #12]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20080000 	.word	0x20080000
 8003ea4:	00000400 	.word	0x00000400
 8003ea8:	200048e8 	.word	0x200048e8
 8003eac:	20004900 	.word	0x20004900

08003eb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <SystemInit+0x20>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	4a05      	ldr	r2, [pc, #20]	; (8003ed0 <SystemInit+0x20>)
 8003ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ed8:	480d      	ldr	r0, [pc, #52]	; (8003f10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003eda:	490e      	ldr	r1, [pc, #56]	; (8003f14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003edc:	4a0e      	ldr	r2, [pc, #56]	; (8003f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ee0:	e002      	b.n	8003ee8 <LoopCopyDataInit>

08003ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ee6:	3304      	adds	r3, #4

08003ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eec:	d3f9      	bcc.n	8003ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eee:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ef0:	4c0b      	ldr	r4, [pc, #44]	; (8003f20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ef4:	e001      	b.n	8003efa <LoopFillZerobss>

08003ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ef8:	3204      	adds	r2, #4

08003efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003efc:	d3fb      	bcc.n	8003ef6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003efe:	f7ff ffd7 	bl	8003eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f02:	f004 fd8f 	bl	8008a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f06:	f7fc fb4d 	bl	80005a4 <main>
  bx  lr    
 8003f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f0c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f14:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003f18:	08009094 	.word	0x08009094
  ldr r2, =_sbss
 8003f1c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003f20:	20004900 	.word	0x20004900

08003f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f24:	e7fe      	b.n	8003f24 <ADC_IRQHandler>

08003f26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f2a:	2003      	movs	r0, #3
 8003f2c:	f000 f94c 	bl	80041c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f30:	2000      	movs	r0, #0
 8003f32:	f000 f805 	bl	8003f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f36:	f7ff fc79 	bl	800382c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f48:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <HAL_InitTick+0x54>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <HAL_InitTick+0x58>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	4619      	mov	r1, r3
 8003f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f967 	bl	8004232 <HAL_SYSTICK_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e00e      	b.n	8003f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b0f      	cmp	r3, #15
 8003f72:	d80a      	bhi.n	8003f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f74:	2200      	movs	r2, #0
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	f000 f92f 	bl	80041de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f80:	4a06      	ldr	r2, [pc, #24]	; (8003f9c <HAL_InitTick+0x5c>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000000 	.word	0x20000000
 8003f98:	20000008 	.word	0x20000008
 8003f9c:	20000004 	.word	0x20000004

08003fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_IncTick+0x20>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_IncTick+0x24>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4413      	add	r3, r2
 8003fb0:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <HAL_IncTick+0x24>)
 8003fb2:	6013      	str	r3, [r2, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20000008 	.word	0x20000008
 8003fc4:	200048ec 	.word	0x200048ec

08003fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  return uwTick;
 8003fcc:	4b03      	ldr	r3, [pc, #12]	; (8003fdc <HAL_GetTick+0x14>)
 8003fce:	681b      	ldr	r3, [r3, #0]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	200048ec 	.word	0x200048ec

08003fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe8:	f7ff ffee 	bl	8003fc8 <HAL_GetTick>
 8003fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d005      	beq.n	8004006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_Delay+0x44>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004006:	bf00      	nop
 8004008:	f7ff ffde 	bl	8003fc8 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	429a      	cmp	r2, r3
 8004016:	d8f7      	bhi.n	8004008 <HAL_Delay+0x28>
  {
  }
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000008 	.word	0x20000008

08004028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <__NVIC_SetPriorityGrouping+0x40>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004044:	4013      	ands	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004050:	4b06      	ldr	r3, [pc, #24]	; (800406c <__NVIC_SetPriorityGrouping+0x44>)
 8004052:	4313      	orrs	r3, r2
 8004054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004056:	4a04      	ldr	r2, [pc, #16]	; (8004068 <__NVIC_SetPriorityGrouping+0x40>)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	60d3      	str	r3, [r2, #12]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	e000ed00 	.word	0xe000ed00
 800406c:	05fa0000 	.word	0x05fa0000

08004070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004074:	4b04      	ldr	r3, [pc, #16]	; (8004088 <__NVIC_GetPriorityGrouping+0x18>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	0a1b      	lsrs	r3, r3, #8
 800407a:	f003 0307 	and.w	r3, r3, #7
}
 800407e:	4618      	mov	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	e000ed00 	.word	0xe000ed00

0800408c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409a:	2b00      	cmp	r3, #0
 800409c:	db0b      	blt.n	80040b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	f003 021f 	and.w	r2, r3, #31
 80040a4:	4907      	ldr	r1, [pc, #28]	; (80040c4 <__NVIC_EnableIRQ+0x38>)
 80040a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2001      	movs	r0, #1
 80040ae:	fa00 f202 	lsl.w	r2, r0, r2
 80040b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	e000e100 	.word	0xe000e100

080040c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	6039      	str	r1, [r7, #0]
 80040d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	db0a      	blt.n	80040f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	490c      	ldr	r1, [pc, #48]	; (8004114 <__NVIC_SetPriority+0x4c>)
 80040e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e6:	0112      	lsls	r2, r2, #4
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	440b      	add	r3, r1
 80040ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040f0:	e00a      	b.n	8004108 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	4908      	ldr	r1, [pc, #32]	; (8004118 <__NVIC_SetPriority+0x50>)
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	3b04      	subs	r3, #4
 8004100:	0112      	lsls	r2, r2, #4
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	440b      	add	r3, r1
 8004106:	761a      	strb	r2, [r3, #24]
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000e100 	.word	0xe000e100
 8004118:	e000ed00 	.word	0xe000ed00

0800411c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800411c:	b480      	push	{r7}
 800411e:	b089      	sub	sp, #36	; 0x24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f1c3 0307 	rsb	r3, r3, #7
 8004136:	2b04      	cmp	r3, #4
 8004138:	bf28      	it	cs
 800413a:	2304      	movcs	r3, #4
 800413c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3304      	adds	r3, #4
 8004142:	2b06      	cmp	r3, #6
 8004144:	d902      	bls.n	800414c <NVIC_EncodePriority+0x30>
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3b03      	subs	r3, #3
 800414a:	e000      	b.n	800414e <NVIC_EncodePriority+0x32>
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004150:	f04f 32ff 	mov.w	r2, #4294967295
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43da      	mvns	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	401a      	ands	r2, r3
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004164:	f04f 31ff 	mov.w	r1, #4294967295
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	fa01 f303 	lsl.w	r3, r1, r3
 800416e:	43d9      	mvns	r1, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004174:	4313      	orrs	r3, r2
         );
}
 8004176:	4618      	mov	r0, r3
 8004178:	3724      	adds	r7, #36	; 0x24
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3b01      	subs	r3, #1
 8004190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004194:	d301      	bcc.n	800419a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004196:	2301      	movs	r3, #1
 8004198:	e00f      	b.n	80041ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800419a:	4a0a      	ldr	r2, [pc, #40]	; (80041c4 <SysTick_Config+0x40>)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3b01      	subs	r3, #1
 80041a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041a2:	210f      	movs	r1, #15
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	f7ff ff8e 	bl	80040c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <SysTick_Config+0x40>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041b2:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <SysTick_Config+0x40>)
 80041b4:	2207      	movs	r2, #7
 80041b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	e000e010 	.word	0xe000e010

080041c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ff29 	bl	8004028 <__NVIC_SetPriorityGrouping>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041de:	b580      	push	{r7, lr}
 80041e0:	b086      	sub	sp, #24
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	4603      	mov	r3, r0
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041f0:	f7ff ff3e 	bl	8004070 <__NVIC_GetPriorityGrouping>
 80041f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f7ff ff8e 	bl	800411c <NVIC_EncodePriority>
 8004200:	4602      	mov	r2, r0
 8004202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004206:	4611      	mov	r1, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff ff5d 	bl	80040c8 <__NVIC_SetPriority>
}
 800420e:	bf00      	nop
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	4603      	mov	r3, r0
 800421e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff ff31 	bl	800408c <__NVIC_EnableIRQ>
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff ffa2 	bl	8004184 <SysTick_Config>
 8004240:	4603      	mov	r3, r0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004258:	f7ff feb6 	bl	8003fc8 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e099      	b.n	800439c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004288:	e00f      	b.n	80042aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800428a:	f7ff fe9d 	bl	8003fc8 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b05      	cmp	r3, #5
 8004296:	d908      	bls.n	80042aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2203      	movs	r2, #3
 80042a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e078      	b.n	800439c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e8      	bne.n	800428a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4b38      	ldr	r3, [pc, #224]	; (80043a4 <HAL_DMA_Init+0x158>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b04      	cmp	r3, #4
 8004302:	d107      	bne.n	8004314 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	4313      	orrs	r3, r2
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f023 0307 	bic.w	r3, r3, #7
 800432a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	2b04      	cmp	r3, #4
 800433c:	d117      	bne.n	800436e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00e      	beq.n	800436e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fb09 	bl	8004968 <DMA_CheckFifoParam>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2240      	movs	r2, #64	; 0x40
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800436a:	2301      	movs	r3, #1
 800436c:	e016      	b.n	800439c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fac0 	bl	80048fc <DMA_CalcBaseAndBitshift>
 800437c:	4603      	mov	r3, r0
 800437e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	223f      	movs	r2, #63	; 0x3f
 8004386:	409a      	lsls	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	e010803f 	.word	0xe010803f

080043a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_DMA_Start_IT+0x26>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e048      	b.n	8004460 <HAL_DMA_Start_IT+0xb8>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d137      	bne.n	8004452 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fa52 	bl	80048a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004400:	223f      	movs	r2, #63	; 0x3f
 8004402:	409a      	lsls	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0216 	orr.w	r2, r2, #22
 8004416:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004426:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0208 	orr.w	r2, r2, #8
 800443e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e005      	b.n	800445e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800445a:	2302      	movs	r3, #2
 800445c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800445e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004476:	f7ff fda7 	bl	8003fc8 <HAL_GetTick>
 800447a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d008      	beq.n	800449a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2280      	movs	r2, #128	; 0x80
 800448c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e052      	b.n	8004540 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0216 	bic.w	r2, r2, #22
 80044a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <HAL_DMA_Abort+0x62>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0208 	bic.w	r2, r2, #8
 80044d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ea:	e013      	b.n	8004514 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ec:	f7ff fd6c 	bl	8003fc8 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d90c      	bls.n	8004514 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2203      	movs	r2, #3
 8004504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e015      	b.n	8004540 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e4      	bne.n	80044ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004526:	223f      	movs	r2, #63	; 0x3f
 8004528:	409a      	lsls	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d004      	beq.n	8004566 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2280      	movs	r2, #128	; 0x80
 8004560:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e00c      	b.n	8004580 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2205      	movs	r2, #5
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0201 	bic.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004598:	4b8e      	ldr	r3, [pc, #568]	; (80047d4 <HAL_DMA_IRQHandler+0x248>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a8e      	ldr	r2, [pc, #568]	; (80047d8 <HAL_DMA_IRQHandler+0x24c>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	0a9b      	lsrs	r3, r3, #10
 80045a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b6:	2208      	movs	r2, #8
 80045b8:	409a      	lsls	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4013      	ands	r3, r2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01a      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d013      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0204 	bic.w	r2, r2, #4
 80045de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e4:	2208      	movs	r2, #8
 80045e6:	409a      	lsls	r2, r3
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	2201      	movs	r2, #1
 80045fe:	409a      	lsls	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d012      	beq.n	800462e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461a:	2201      	movs	r2, #1
 800461c:	409a      	lsls	r2, r3
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	f043 0202 	orr.w	r2, r3, #2
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	2204      	movs	r2, #4
 8004634:	409a      	lsls	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4013      	ands	r3, r2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d012      	beq.n	8004664 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	2204      	movs	r2, #4
 8004652:	409a      	lsls	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	f043 0204 	orr.w	r2, r3, #4
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	2210      	movs	r2, #16
 800466a:	409a      	lsls	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d043      	beq.n	80046fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d03c      	beq.n	80046fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	2210      	movs	r2, #16
 8004688:	409a      	lsls	r2, r3
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d018      	beq.n	80046ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d108      	bne.n	80046bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d024      	beq.n	80046fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
 80046ba:	e01f      	b.n	80046fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	4798      	blx	r3
 80046cc:	e016      	b.n	80046fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d107      	bne.n	80046ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0208 	bic.w	r2, r2, #8
 80046ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004700:	2220      	movs	r2, #32
 8004702:	409a      	lsls	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 808f 	beq.w	800482c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 8087 	beq.w	800482c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004722:	2220      	movs	r2, #32
 8004724:	409a      	lsls	r2, r3
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b05      	cmp	r3, #5
 8004734:	d136      	bne.n	80047a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0216 	bic.w	r2, r2, #22
 8004744:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004754:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <HAL_DMA_IRQHandler+0x1da>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0208 	bic.w	r2, r2, #8
 8004774:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	223f      	movs	r2, #63	; 0x3f
 800477c:	409a      	lsls	r2, r3
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004796:	2b00      	cmp	r3, #0
 8004798:	d07e      	beq.n	8004898 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	4798      	blx	r3
        }
        return;
 80047a2:	e079      	b.n	8004898 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01d      	beq.n	80047ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d031      	beq.n	800482c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	4798      	blx	r3
 80047d0:	e02c      	b.n	800482c <HAL_DMA_IRQHandler+0x2a0>
 80047d2:	bf00      	nop
 80047d4:	20000000 	.word	0x20000000
 80047d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d023      	beq.n	800482c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	4798      	blx	r3
 80047ec:	e01e      	b.n	800482c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10f      	bne.n	800481c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0210 	bic.w	r2, r2, #16
 800480a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	2b00      	cmp	r3, #0
 8004832:	d032      	beq.n	800489a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d022      	beq.n	8004886 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2205      	movs	r2, #5
 8004844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	3301      	adds	r3, #1
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	d307      	bcc.n	8004874 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f2      	bne.n	8004858 <HAL_DMA_IRQHandler+0x2cc>
 8004872:	e000      	b.n	8004876 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004874:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	4798      	blx	r3
 8004896:	e000      	b.n	800489a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004898:	bf00      	nop
    }
  }
}
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d108      	bne.n	80048e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048de:	e007      	b.n	80048f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	60da      	str	r2, [r3, #12]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	3b10      	subs	r3, #16
 800490c:	4a13      	ldr	r2, [pc, #76]	; (800495c <DMA_CalcBaseAndBitshift+0x60>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004916:	4a12      	ldr	r2, [pc, #72]	; (8004960 <DMA_CalcBaseAndBitshift+0x64>)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b03      	cmp	r3, #3
 8004928:	d908      	bls.n	800493c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <DMA_CalcBaseAndBitshift+0x68>)
 8004932:	4013      	ands	r3, r2
 8004934:	1d1a      	adds	r2, r3, #4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	659a      	str	r2, [r3, #88]	; 0x58
 800493a:	e006      	b.n	800494a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <DMA_CalcBaseAndBitshift+0x68>)
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	aaaaaaab 	.word	0xaaaaaaab
 8004960:	08009078 	.word	0x08009078
 8004964:	fffffc00 	.word	0xfffffc00

08004968 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d11f      	bne.n	80049c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b03      	cmp	r3, #3
 8004986:	d856      	bhi.n	8004a36 <DMA_CheckFifoParam+0xce>
 8004988:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <DMA_CheckFifoParam+0x28>)
 800498a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498e:	bf00      	nop
 8004990:	080049a1 	.word	0x080049a1
 8004994:	080049b3 	.word	0x080049b3
 8004998:	080049a1 	.word	0x080049a1
 800499c:	08004a37 	.word	0x08004a37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d046      	beq.n	8004a3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b0:	e043      	b.n	8004a3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049ba:	d140      	bne.n	8004a3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c0:	e03d      	b.n	8004a3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ca:	d121      	bne.n	8004a10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d837      	bhi.n	8004a42 <DMA_CheckFifoParam+0xda>
 80049d2:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <DMA_CheckFifoParam+0x70>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049ef 	.word	0x080049ef
 80049e0:	080049e9 	.word	0x080049e9
 80049e4:	08004a01 	.word	0x08004a01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
      break;
 80049ec:	e030      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d025      	beq.n	8004a46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049fe:	e022      	b.n	8004a46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a08:	d11f      	bne.n	8004a4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a0e:	e01c      	b.n	8004a4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d903      	bls.n	8004a1e <DMA_CheckFifoParam+0xb6>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d003      	beq.n	8004a24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a1c:	e018      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
      break;
 8004a22:	e015      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00e      	beq.n	8004a4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
      break;
 8004a34:	e00b      	b.n	8004a4e <DMA_CheckFifoParam+0xe6>
      break;
 8004a36:	bf00      	nop
 8004a38:	e00a      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e008      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      break;
 8004a3e:	bf00      	nop
 8004a40:	e006      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      break;
 8004a42:	bf00      	nop
 8004a44:	e004      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      break;
 8004a46:	bf00      	nop
 8004a48:	e002      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a4a:	bf00      	nop
 8004a4c:	e000      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      break;
 8004a4e:	bf00      	nop
    }
  } 
  
  return status; 
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop

08004a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b089      	sub	sp, #36	; 0x24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	e175      	b.n	8004d6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a80:	2201      	movs	r2, #1
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4013      	ands	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	f040 8164 	bne.w	8004d66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d005      	beq.n	8004ab6 <HAL_GPIO_Init+0x56>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d130      	bne.n	8004b18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aec:	2201      	movs	r2, #1
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4013      	ands	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 0201 	and.w	r2, r3, #1
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d017      	beq.n	8004b54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	2203      	movs	r2, #3
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d123      	bne.n	8004ba8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	08da      	lsrs	r2, r3, #3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3208      	adds	r2, #8
 8004b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	220f      	movs	r2, #15
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	08da      	lsrs	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3208      	adds	r2, #8
 8004ba2:	69b9      	ldr	r1, [r7, #24]
 8004ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0203 	and.w	r2, r3, #3
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80be 	beq.w	8004d66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bea:	4b66      	ldr	r3, [pc, #408]	; (8004d84 <HAL_GPIO_Init+0x324>)
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	4a65      	ldr	r2, [pc, #404]	; (8004d84 <HAL_GPIO_Init+0x324>)
 8004bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf6:	4b63      	ldr	r3, [pc, #396]	; (8004d84 <HAL_GPIO_Init+0x324>)
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c02:	4a61      	ldr	r2, [pc, #388]	; (8004d88 <HAL_GPIO_Init+0x328>)
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	089b      	lsrs	r3, r3, #2
 8004c08:	3302      	adds	r3, #2
 8004c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	220f      	movs	r2, #15
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4013      	ands	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a58      	ldr	r2, [pc, #352]	; (8004d8c <HAL_GPIO_Init+0x32c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d037      	beq.n	8004c9e <HAL_GPIO_Init+0x23e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a57      	ldr	r2, [pc, #348]	; (8004d90 <HAL_GPIO_Init+0x330>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d031      	beq.n	8004c9a <HAL_GPIO_Init+0x23a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a56      	ldr	r2, [pc, #344]	; (8004d94 <HAL_GPIO_Init+0x334>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d02b      	beq.n	8004c96 <HAL_GPIO_Init+0x236>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a55      	ldr	r2, [pc, #340]	; (8004d98 <HAL_GPIO_Init+0x338>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d025      	beq.n	8004c92 <HAL_GPIO_Init+0x232>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a54      	ldr	r2, [pc, #336]	; (8004d9c <HAL_GPIO_Init+0x33c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01f      	beq.n	8004c8e <HAL_GPIO_Init+0x22e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a53      	ldr	r2, [pc, #332]	; (8004da0 <HAL_GPIO_Init+0x340>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d019      	beq.n	8004c8a <HAL_GPIO_Init+0x22a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a52      	ldr	r2, [pc, #328]	; (8004da4 <HAL_GPIO_Init+0x344>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <HAL_GPIO_Init+0x226>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a51      	ldr	r2, [pc, #324]	; (8004da8 <HAL_GPIO_Init+0x348>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00d      	beq.n	8004c82 <HAL_GPIO_Init+0x222>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a50      	ldr	r2, [pc, #320]	; (8004dac <HAL_GPIO_Init+0x34c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <HAL_GPIO_Init+0x21e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a4f      	ldr	r2, [pc, #316]	; (8004db0 <HAL_GPIO_Init+0x350>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d101      	bne.n	8004c7a <HAL_GPIO_Init+0x21a>
 8004c76:	2309      	movs	r3, #9
 8004c78:	e012      	b.n	8004ca0 <HAL_GPIO_Init+0x240>
 8004c7a:	230a      	movs	r3, #10
 8004c7c:	e010      	b.n	8004ca0 <HAL_GPIO_Init+0x240>
 8004c7e:	2308      	movs	r3, #8
 8004c80:	e00e      	b.n	8004ca0 <HAL_GPIO_Init+0x240>
 8004c82:	2307      	movs	r3, #7
 8004c84:	e00c      	b.n	8004ca0 <HAL_GPIO_Init+0x240>
 8004c86:	2306      	movs	r3, #6
 8004c88:	e00a      	b.n	8004ca0 <HAL_GPIO_Init+0x240>
 8004c8a:	2305      	movs	r3, #5
 8004c8c:	e008      	b.n	8004ca0 <HAL_GPIO_Init+0x240>
 8004c8e:	2304      	movs	r3, #4
 8004c90:	e006      	b.n	8004ca0 <HAL_GPIO_Init+0x240>
 8004c92:	2303      	movs	r3, #3
 8004c94:	e004      	b.n	8004ca0 <HAL_GPIO_Init+0x240>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e002      	b.n	8004ca0 <HAL_GPIO_Init+0x240>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <HAL_GPIO_Init+0x240>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	f002 0203 	and.w	r2, r2, #3
 8004ca6:	0092      	lsls	r2, r2, #2
 8004ca8:	4093      	lsls	r3, r2
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004cb0:	4935      	ldr	r1, [pc, #212]	; (8004d88 <HAL_GPIO_Init+0x328>)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	089b      	lsrs	r3, r3, #2
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cbe:	4b3d      	ldr	r3, [pc, #244]	; (8004db4 <HAL_GPIO_Init+0x354>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ce2:	4a34      	ldr	r2, [pc, #208]	; (8004db4 <HAL_GPIO_Init+0x354>)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ce8:	4b32      	ldr	r3, [pc, #200]	; (8004db4 <HAL_GPIO_Init+0x354>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d0c:	4a29      	ldr	r2, [pc, #164]	; (8004db4 <HAL_GPIO_Init+0x354>)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d12:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <HAL_GPIO_Init+0x354>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d36:	4a1f      	ldr	r2, [pc, #124]	; (8004db4 <HAL_GPIO_Init+0x354>)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d3c:	4b1d      	ldr	r3, [pc, #116]	; (8004db4 <HAL_GPIO_Init+0x354>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d60:	4a14      	ldr	r2, [pc, #80]	; (8004db4 <HAL_GPIO_Init+0x354>)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b0f      	cmp	r3, #15
 8004d70:	f67f ae86 	bls.w	8004a80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	3724      	adds	r7, #36	; 0x24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	40020000 	.word	0x40020000
 8004d90:	40020400 	.word	0x40020400
 8004d94:	40020800 	.word	0x40020800
 8004d98:	40020c00 	.word	0x40020c00
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40021400 	.word	0x40021400
 8004da4:	40021800 	.word	0x40021800
 8004da8:	40021c00 	.word	0x40021c00
 8004dac:	40022000 	.word	0x40022000
 8004db0:	40022400 	.word	0x40022400
 8004db4:	40013c00 	.word	0x40013c00

08004db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	807b      	strh	r3, [r7, #2]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dc8:	787b      	ldrb	r3, [r7, #1]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dce:	887a      	ldrh	r2, [r7, #2]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004dd4:	e003      	b.n	8004dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004dd6:	887b      	ldrh	r3, [r7, #2]
 8004dd8:	041a      	lsls	r2, r3, #16
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	619a      	str	r2, [r3, #24]
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004df6:	4b23      	ldr	r3, [pc, #140]	; (8004e84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e00:	6413      	str	r3, [r2, #64]	; 0x40
 8004e02:	4b20      	ldr	r3, [pc, #128]	; (8004e84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e0e:	4b1e      	ldr	r3, [pc, #120]	; (8004e88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e1a:	f7ff f8d5 	bl	8003fc8 <HAL_GetTick>
 8004e1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e20:	e009      	b.n	8004e36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e22:	f7ff f8d1 	bl	8003fc8 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e30:	d901      	bls.n	8004e36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e022      	b.n	8004e7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e42:	d1ee      	bne.n	8004e22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e44:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a0f      	ldr	r2, [pc, #60]	; (8004e88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e50:	f7ff f8ba 	bl	8003fc8 <HAL_GetTick>
 8004e54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e56:	e009      	b.n	8004e6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e58:	f7ff f8b6 	bl	8003fc8 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e66:	d901      	bls.n	8004e6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e007      	b.n	8004e7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e78:	d1ee      	bne.n	8004e58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40007000 	.word	0x40007000

08004e8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004e94:	2300      	movs	r3, #0
 8004e96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e29b      	b.n	80053da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8087 	beq.w	8004fbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004eb0:	4b96      	ldr	r3, [pc, #600]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d00c      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ebc:	4b93      	ldr	r3, [pc, #588]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 030c 	and.w	r3, r3, #12
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d112      	bne.n	8004eee <HAL_RCC_OscConfig+0x62>
 8004ec8:	4b90      	ldr	r3, [pc, #576]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed4:	d10b      	bne.n	8004eee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed6:	4b8d      	ldr	r3, [pc, #564]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d06c      	beq.n	8004fbc <HAL_RCC_OscConfig+0x130>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d168      	bne.n	8004fbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e275      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x7a>
 8004ef8:	4b84      	ldr	r3, [pc, #528]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a83      	ldr	r2, [pc, #524]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	e02e      	b.n	8004f64 <HAL_RCC_OscConfig+0xd8>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x9c>
 8004f0e:	4b7f      	ldr	r3, [pc, #508]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a7e      	ldr	r2, [pc, #504]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b7c      	ldr	r3, [pc, #496]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a7b      	ldr	r2, [pc, #492]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e01d      	b.n	8004f64 <HAL_RCC_OscConfig+0xd8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCC_OscConfig+0xc0>
 8004f32:	4b76      	ldr	r3, [pc, #472]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a75      	ldr	r2, [pc, #468]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	4b73      	ldr	r3, [pc, #460]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a72      	ldr	r2, [pc, #456]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e00b      	b.n	8004f64 <HAL_RCC_OscConfig+0xd8>
 8004f4c:	4b6f      	ldr	r3, [pc, #444]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a6e      	ldr	r2, [pc, #440]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	4b6c      	ldr	r3, [pc, #432]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a6b      	ldr	r2, [pc, #428]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d013      	beq.n	8004f94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7ff f82c 	bl	8003fc8 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f74:	f7ff f828 	bl	8003fc8 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	; 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e229      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f86:	4b61      	ldr	r3, [pc, #388]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0xe8>
 8004f92:	e014      	b.n	8004fbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7ff f818 	bl	8003fc8 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7ff f814 	bl	8003fc8 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	; 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e215      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fae:	4b57      	ldr	r3, [pc, #348]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x110>
 8004fba:	e000      	b.n	8004fbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d069      	beq.n	800509e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fca:	4b50      	ldr	r3, [pc, #320]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00b      	beq.n	8004fee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fd6:	4b4d      	ldr	r3, [pc, #308]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d11c      	bne.n	800501c <HAL_RCC_OscConfig+0x190>
 8004fe2:	4b4a      	ldr	r3, [pc, #296]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d116      	bne.n	800501c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fee:	4b47      	ldr	r3, [pc, #284]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_RCC_OscConfig+0x17a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d001      	beq.n	8005006 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e1e9      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005006:	4b41      	ldr	r3, [pc, #260]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	493d      	ldr	r1, [pc, #244]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8005016:	4313      	orrs	r3, r2
 8005018:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800501a:	e040      	b.n	800509e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d023      	beq.n	800506c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005024:	4b39      	ldr	r3, [pc, #228]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a38      	ldr	r2, [pc, #224]	; (800510c <HAL_RCC_OscConfig+0x280>)
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fe ffca 	bl	8003fc8 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005038:	f7fe ffc6 	bl	8003fc8 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e1c7      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504a:	4b30      	ldr	r3, [pc, #192]	; (800510c <HAL_RCC_OscConfig+0x280>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005056:	4b2d      	ldr	r3, [pc, #180]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4929      	ldr	r1, [pc, #164]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8005066:	4313      	orrs	r3, r2
 8005068:	600b      	str	r3, [r1, #0]
 800506a:	e018      	b.n	800509e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800506c:	4b27      	ldr	r3, [pc, #156]	; (800510c <HAL_RCC_OscConfig+0x280>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a26      	ldr	r2, [pc, #152]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005078:	f7fe ffa6 	bl	8003fc8 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005080:	f7fe ffa2 	bl	8003fc8 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e1a3      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005092:	4b1e      	ldr	r3, [pc, #120]	; (800510c <HAL_RCC_OscConfig+0x280>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d038      	beq.n	800511c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d019      	beq.n	80050e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050b2:	4b16      	ldr	r3, [pc, #88]	; (800510c <HAL_RCC_OscConfig+0x280>)
 80050b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b6:	4a15      	ldr	r2, [pc, #84]	; (800510c <HAL_RCC_OscConfig+0x280>)
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050be:	f7fe ff83 	bl	8003fc8 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c6:	f7fe ff7f 	bl	8003fc8 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e180      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <HAL_RCC_OscConfig+0x280>)
 80050da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f0      	beq.n	80050c6 <HAL_RCC_OscConfig+0x23a>
 80050e4:	e01a      	b.n	800511c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <HAL_RCC_OscConfig+0x280>)
 80050e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ea:	4a08      	ldr	r2, [pc, #32]	; (800510c <HAL_RCC_OscConfig+0x280>)
 80050ec:	f023 0301 	bic.w	r3, r3, #1
 80050f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f2:	f7fe ff69 	bl	8003fc8 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f8:	e00a      	b.n	8005110 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050fa:	f7fe ff65 	bl	8003fc8 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d903      	bls.n	8005110 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e166      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
 800510c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005110:	4b92      	ldr	r3, [pc, #584]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 8005112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1ee      	bne.n	80050fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 80a4 	beq.w	8005272 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800512a:	4b8c      	ldr	r3, [pc, #560]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10d      	bne.n	8005152 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005136:	4b89      	ldr	r3, [pc, #548]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	4a88      	ldr	r2, [pc, #544]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 800513c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005140:	6413      	str	r3, [r2, #64]	; 0x40
 8005142:	4b86      	ldr	r3, [pc, #536]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800514e:	2301      	movs	r3, #1
 8005150:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005152:	4b83      	ldr	r3, [pc, #524]	; (8005360 <HAL_RCC_OscConfig+0x4d4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515a:	2b00      	cmp	r3, #0
 800515c:	d118      	bne.n	8005190 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800515e:	4b80      	ldr	r3, [pc, #512]	; (8005360 <HAL_RCC_OscConfig+0x4d4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a7f      	ldr	r2, [pc, #508]	; (8005360 <HAL_RCC_OscConfig+0x4d4>)
 8005164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800516a:	f7fe ff2d 	bl	8003fc8 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005172:	f7fe ff29 	bl	8003fc8 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b64      	cmp	r3, #100	; 0x64
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e12a      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005184:	4b76      	ldr	r3, [pc, #472]	; (8005360 <HAL_RCC_OscConfig+0x4d4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d106      	bne.n	80051a6 <HAL_RCC_OscConfig+0x31a>
 8005198:	4b70      	ldr	r3, [pc, #448]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519c:	4a6f      	ldr	r2, [pc, #444]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 800519e:	f043 0301 	orr.w	r3, r3, #1
 80051a2:	6713      	str	r3, [r2, #112]	; 0x70
 80051a4:	e02d      	b.n	8005202 <HAL_RCC_OscConfig+0x376>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCC_OscConfig+0x33c>
 80051ae:	4b6b      	ldr	r3, [pc, #428]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b2:	4a6a      	ldr	r2, [pc, #424]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80051b4:	f023 0301 	bic.w	r3, r3, #1
 80051b8:	6713      	str	r3, [r2, #112]	; 0x70
 80051ba:	4b68      	ldr	r3, [pc, #416]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	4a67      	ldr	r2, [pc, #412]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80051c0:	f023 0304 	bic.w	r3, r3, #4
 80051c4:	6713      	str	r3, [r2, #112]	; 0x70
 80051c6:	e01c      	b.n	8005202 <HAL_RCC_OscConfig+0x376>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b05      	cmp	r3, #5
 80051ce:	d10c      	bne.n	80051ea <HAL_RCC_OscConfig+0x35e>
 80051d0:	4b62      	ldr	r3, [pc, #392]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80051d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d4:	4a61      	ldr	r2, [pc, #388]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80051d6:	f043 0304 	orr.w	r3, r3, #4
 80051da:	6713      	str	r3, [r2, #112]	; 0x70
 80051dc:	4b5f      	ldr	r3, [pc, #380]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e0:	4a5e      	ldr	r2, [pc, #376]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	6713      	str	r3, [r2, #112]	; 0x70
 80051e8:	e00b      	b.n	8005202 <HAL_RCC_OscConfig+0x376>
 80051ea:	4b5c      	ldr	r3, [pc, #368]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	4a5b      	ldr	r2, [pc, #364]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	6713      	str	r3, [r2, #112]	; 0x70
 80051f6:	4b59      	ldr	r3, [pc, #356]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fa:	4a58      	ldr	r2, [pc, #352]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80051fc:	f023 0304 	bic.w	r3, r3, #4
 8005200:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d015      	beq.n	8005236 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520a:	f7fe fedd 	bl	8003fc8 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005210:	e00a      	b.n	8005228 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005212:	f7fe fed9 	bl	8003fc8 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005220:	4293      	cmp	r3, r2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e0d8      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005228:	4b4c      	ldr	r3, [pc, #304]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0ee      	beq.n	8005212 <HAL_RCC_OscConfig+0x386>
 8005234:	e014      	b.n	8005260 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005236:	f7fe fec7 	bl	8003fc8 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523c:	e00a      	b.n	8005254 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523e:	f7fe fec3 	bl	8003fc8 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	f241 3288 	movw	r2, #5000	; 0x1388
 800524c:	4293      	cmp	r3, r2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e0c2      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005254:	4b41      	ldr	r3, [pc, #260]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 8005256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1ee      	bne.n	800523e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005260:	7dfb      	ldrb	r3, [r7, #23]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d105      	bne.n	8005272 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005266:	4b3d      	ldr	r3, [pc, #244]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	4a3c      	ldr	r2, [pc, #240]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 800526c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005270:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 80ae 	beq.w	80053d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800527c:	4b37      	ldr	r3, [pc, #220]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 030c 	and.w	r3, r3, #12
 8005284:	2b08      	cmp	r3, #8
 8005286:	d06d      	beq.n	8005364 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d14b      	bne.n	8005328 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005290:	4b32      	ldr	r3, [pc, #200]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a31      	ldr	r2, [pc, #196]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 8005296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800529a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fe fe94 	bl	8003fc8 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a4:	f7fe fe90 	bl	8003fc8 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e091      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b6:	4b29      	ldr	r3, [pc, #164]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	019b      	lsls	r3, r3, #6
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	085b      	lsrs	r3, r3, #1
 80052da:	3b01      	subs	r3, #1
 80052dc:	041b      	lsls	r3, r3, #16
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	061b      	lsls	r3, r3, #24
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	071b      	lsls	r3, r3, #28
 80052ee:	491b      	ldr	r1, [pc, #108]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052f4:	4b19      	ldr	r3, [pc, #100]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a18      	ldr	r2, [pc, #96]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 80052fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fe fe62 	bl	8003fc8 <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005308:	f7fe fe5e 	bl	8003fc8 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e05f      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800531a:	4b10      	ldr	r3, [pc, #64]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCC_OscConfig+0x47c>
 8005326:	e057      	b.n	80053d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a0b      	ldr	r2, [pc, #44]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 800532e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fe fe48 	bl	8003fc8 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800533c:	f7fe fe44 	bl	8003fc8 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e045      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534e:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_OscConfig+0x4d0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f0      	bne.n	800533c <HAL_RCC_OscConfig+0x4b0>
 800535a:	e03d      	b.n	80053d8 <HAL_RCC_OscConfig+0x54c>
 800535c:	40023800 	.word	0x40023800
 8005360:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005364:	4b1f      	ldr	r3, [pc, #124]	; (80053e4 <HAL_RCC_OscConfig+0x558>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d030      	beq.n	80053d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d129      	bne.n	80053d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800538a:	429a      	cmp	r2, r3
 800538c:	d122      	bne.n	80053d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005394:	4013      	ands	r3, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800539a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800539c:	4293      	cmp	r3, r2
 800539e:	d119      	bne.n	80053d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	3b01      	subs	r3, #1
 80053ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d10f      	bne.n	80053d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d107      	bne.n	80053d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40023800 	.word	0x40023800

080053e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0d0      	b.n	80055a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005400:	4b6a      	ldr	r3, [pc, #424]	; (80055ac <HAL_RCC_ClockConfig+0x1c4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d910      	bls.n	8005430 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540e:	4b67      	ldr	r3, [pc, #412]	; (80055ac <HAL_RCC_ClockConfig+0x1c4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 020f 	bic.w	r2, r3, #15
 8005416:	4965      	ldr	r1, [pc, #404]	; (80055ac <HAL_RCC_ClockConfig+0x1c4>)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	4313      	orrs	r3, r2
 800541c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800541e:	4b63      	ldr	r3, [pc, #396]	; (80055ac <HAL_RCC_ClockConfig+0x1c4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d001      	beq.n	8005430 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0b8      	b.n	80055a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d020      	beq.n	800547e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005448:	4b59      	ldr	r3, [pc, #356]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	4a58      	ldr	r2, [pc, #352]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 800544e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005452:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005460:	4b53      	ldr	r3, [pc, #332]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	4a52      	ldr	r2, [pc, #328]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800546a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800546c:	4b50      	ldr	r3, [pc, #320]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	494d      	ldr	r1, [pc, #308]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d040      	beq.n	800550c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d107      	bne.n	80054a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005492:	4b47      	ldr	r3, [pc, #284]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d115      	bne.n	80054ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e07f      	b.n	80055a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d107      	bne.n	80054ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054aa:	4b41      	ldr	r3, [pc, #260]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e073      	b.n	80055a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ba:	4b3d      	ldr	r3, [pc, #244]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e06b      	b.n	80055a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ca:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f023 0203 	bic.w	r2, r3, #3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4936      	ldr	r1, [pc, #216]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054dc:	f7fe fd74 	bl	8003fc8 <HAL_GetTick>
 80054e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e2:	e00a      	b.n	80054fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e4:	f7fe fd70 	bl	8003fc8 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e053      	b.n	80055a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fa:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 020c 	and.w	r2, r3, #12
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	429a      	cmp	r2, r3
 800550a:	d1eb      	bne.n	80054e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800550c:	4b27      	ldr	r3, [pc, #156]	; (80055ac <HAL_RCC_ClockConfig+0x1c4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d210      	bcs.n	800553c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551a:	4b24      	ldr	r3, [pc, #144]	; (80055ac <HAL_RCC_ClockConfig+0x1c4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f023 020f 	bic.w	r2, r3, #15
 8005522:	4922      	ldr	r1, [pc, #136]	; (80055ac <HAL_RCC_ClockConfig+0x1c4>)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	4313      	orrs	r3, r2
 8005528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800552a:	4b20      	ldr	r3, [pc, #128]	; (80055ac <HAL_RCC_ClockConfig+0x1c4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d001      	beq.n	800553c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e032      	b.n	80055a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005548:	4b19      	ldr	r3, [pc, #100]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	4916      	ldr	r1, [pc, #88]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005556:	4313      	orrs	r3, r2
 8005558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005566:	4b12      	ldr	r3, [pc, #72]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	490e      	ldr	r1, [pc, #56]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005576:	4313      	orrs	r3, r2
 8005578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800557a:	f000 f821 	bl	80055c0 <HAL_RCC_GetSysClockFreq>
 800557e:	4602      	mov	r2, r0
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	490a      	ldr	r1, [pc, #40]	; (80055b4 <HAL_RCC_ClockConfig+0x1cc>)
 800558c:	5ccb      	ldrb	r3, [r1, r3]
 800558e:	fa22 f303 	lsr.w	r3, r2, r3
 8005592:	4a09      	ldr	r2, [pc, #36]	; (80055b8 <HAL_RCC_ClockConfig+0x1d0>)
 8005594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <HAL_RCC_ClockConfig+0x1d4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe fcd0 	bl	8003f40 <HAL_InitTick>

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40023c00 	.word	0x40023c00
 80055b0:	40023800 	.word	0x40023800
 80055b4:	08009060 	.word	0x08009060
 80055b8:	20000000 	.word	0x20000000
 80055bc:	20000004 	.word	0x20000004

080055c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c4:	b094      	sub	sp, #80	; 0x50
 80055c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	647b      	str	r3, [r7, #68]	; 0x44
 80055cc:	2300      	movs	r3, #0
 80055ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d0:	2300      	movs	r3, #0
 80055d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055d8:	4b79      	ldr	r3, [pc, #484]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 030c 	and.w	r3, r3, #12
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d00d      	beq.n	8005600 <HAL_RCC_GetSysClockFreq+0x40>
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	f200 80e1 	bhi.w	80057ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <HAL_RCC_GetSysClockFreq+0x34>
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d003      	beq.n	80055fa <HAL_RCC_GetSysClockFreq+0x3a>
 80055f2:	e0db      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055f4:	4b73      	ldr	r3, [pc, #460]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80055f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055f8:	e0db      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055fa:	4b73      	ldr	r3, [pc, #460]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80055fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055fe:	e0d8      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005600:	4b6f      	ldr	r3, [pc, #444]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005608:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800560a:	4b6d      	ldr	r3, [pc, #436]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d063      	beq.n	80056de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005616:	4b6a      	ldr	r3, [pc, #424]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	099b      	lsrs	r3, r3, #6
 800561c:	2200      	movs	r2, #0
 800561e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005620:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005628:	633b      	str	r3, [r7, #48]	; 0x30
 800562a:	2300      	movs	r3, #0
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
 800562e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005632:	4622      	mov	r2, r4
 8005634:	462b      	mov	r3, r5
 8005636:	f04f 0000 	mov.w	r0, #0
 800563a:	f04f 0100 	mov.w	r1, #0
 800563e:	0159      	lsls	r1, r3, #5
 8005640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005644:	0150      	lsls	r0, r2, #5
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4621      	mov	r1, r4
 800564c:	1a51      	subs	r1, r2, r1
 800564e:	6139      	str	r1, [r7, #16]
 8005650:	4629      	mov	r1, r5
 8005652:	eb63 0301 	sbc.w	r3, r3, r1
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005664:	4659      	mov	r1, fp
 8005666:	018b      	lsls	r3, r1, #6
 8005668:	4651      	mov	r1, sl
 800566a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800566e:	4651      	mov	r1, sl
 8005670:	018a      	lsls	r2, r1, #6
 8005672:	4651      	mov	r1, sl
 8005674:	ebb2 0801 	subs.w	r8, r2, r1
 8005678:	4659      	mov	r1, fp
 800567a:	eb63 0901 	sbc.w	r9, r3, r1
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800568a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800568e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005692:	4690      	mov	r8, r2
 8005694:	4699      	mov	r9, r3
 8005696:	4623      	mov	r3, r4
 8005698:	eb18 0303 	adds.w	r3, r8, r3
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	462b      	mov	r3, r5
 80056a0:	eb49 0303 	adc.w	r3, r9, r3
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056b2:	4629      	mov	r1, r5
 80056b4:	024b      	lsls	r3, r1, #9
 80056b6:	4621      	mov	r1, r4
 80056b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056bc:	4621      	mov	r1, r4
 80056be:	024a      	lsls	r2, r1, #9
 80056c0:	4610      	mov	r0, r2
 80056c2:	4619      	mov	r1, r3
 80056c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c6:	2200      	movs	r2, #0
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056d0:	f7fa fdba 	bl	8000248 <__aeabi_uldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4613      	mov	r3, r2
 80056da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056dc:	e058      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056de:	4b38      	ldr	r3, [pc, #224]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	099b      	lsrs	r3, r3, #6
 80056e4:	2200      	movs	r2, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	4611      	mov	r1, r2
 80056ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056ee:	623b      	str	r3, [r7, #32]
 80056f0:	2300      	movs	r3, #0
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
 80056f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	f04f 0000 	mov.w	r0, #0
 8005700:	f04f 0100 	mov.w	r1, #0
 8005704:	0159      	lsls	r1, r3, #5
 8005706:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800570a:	0150      	lsls	r0, r2, #5
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4641      	mov	r1, r8
 8005712:	ebb2 0a01 	subs.w	sl, r2, r1
 8005716:	4649      	mov	r1, r9
 8005718:	eb63 0b01 	sbc.w	fp, r3, r1
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005728:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800572c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005730:	ebb2 040a 	subs.w	r4, r2, sl
 8005734:	eb63 050b 	sbc.w	r5, r3, fp
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	00eb      	lsls	r3, r5, #3
 8005742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005746:	00e2      	lsls	r2, r4, #3
 8005748:	4614      	mov	r4, r2
 800574a:	461d      	mov	r5, r3
 800574c:	4643      	mov	r3, r8
 800574e:	18e3      	adds	r3, r4, r3
 8005750:	603b      	str	r3, [r7, #0]
 8005752:	464b      	mov	r3, r9
 8005754:	eb45 0303 	adc.w	r3, r5, r3
 8005758:	607b      	str	r3, [r7, #4]
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005766:	4629      	mov	r1, r5
 8005768:	028b      	lsls	r3, r1, #10
 800576a:	4621      	mov	r1, r4
 800576c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005770:	4621      	mov	r1, r4
 8005772:	028a      	lsls	r2, r1, #10
 8005774:	4610      	mov	r0, r2
 8005776:	4619      	mov	r1, r3
 8005778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800577a:	2200      	movs	r2, #0
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	61fa      	str	r2, [r7, #28]
 8005780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005784:	f7fa fd60 	bl	8000248 <__aeabi_uldivmod>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4613      	mov	r3, r2
 800578e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005790:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	3301      	adds	r3, #1
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80057a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057aa:	e002      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80057ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3750      	adds	r7, #80	; 0x50
 80057b8:	46bd      	mov	sp, r7
 80057ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057be:	bf00      	nop
 80057c0:	40023800 	.word	0x40023800
 80057c4:	00f42400 	.word	0x00f42400
 80057c8:	007a1200 	.word	0x007a1200

080057cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d0:	4b03      	ldr	r3, [pc, #12]	; (80057e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057d2:	681b      	ldr	r3, [r3, #0]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000000 	.word	0x20000000

080057e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057e8:	f7ff fff0 	bl	80057cc <HAL_RCC_GetHCLKFreq>
 80057ec:	4602      	mov	r2, r0
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	0a9b      	lsrs	r3, r3, #10
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	4903      	ldr	r1, [pc, #12]	; (8005808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057fa:	5ccb      	ldrb	r3, [r1, r3]
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005800:	4618      	mov	r0, r3
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40023800 	.word	0x40023800
 8005808:	08009070 	.word	0x08009070

0800580c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005810:	f7ff ffdc 	bl	80057cc <HAL_RCC_GetHCLKFreq>
 8005814:	4602      	mov	r2, r0
 8005816:	4b05      	ldr	r3, [pc, #20]	; (800582c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	0b5b      	lsrs	r3, r3, #13
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	4903      	ldr	r1, [pc, #12]	; (8005830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005822:	5ccb      	ldrb	r3, [r1, r3]
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005828:	4618      	mov	r0, r3
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40023800 	.word	0x40023800
 8005830:	08009070 	.word	0x08009070

08005834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d012      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800585c:	4b69      	ldr	r3, [pc, #420]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	4a68      	ldr	r2, [pc, #416]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005862:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005866:	6093      	str	r3, [r2, #8]
 8005868:	4b66      	ldr	r3, [pc, #408]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	4964      	ldr	r1, [pc, #400]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005872:	4313      	orrs	r3, r2
 8005874:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800587e:	2301      	movs	r3, #1
 8005880:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d017      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800588e:	4b5d      	ldr	r3, [pc, #372]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589c:	4959      	ldr	r1, [pc, #356]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ac:	d101      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80058ae:	2301      	movs	r3, #1
 80058b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80058ba:	2301      	movs	r3, #1
 80058bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d017      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058ca:	4b4e      	ldr	r3, [pc, #312]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	494a      	ldr	r1, [pc, #296]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058e8:	d101      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80058ea:	2301      	movs	r3, #1
 80058ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80058f6:	2301      	movs	r3, #1
 80058f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005906:	2301      	movs	r3, #1
 8005908:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 808b 	beq.w	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005918:	4b3a      	ldr	r3, [pc, #232]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	4a39      	ldr	r2, [pc, #228]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005922:	6413      	str	r3, [r2, #64]	; 0x40
 8005924:	4b37      	ldr	r3, [pc, #220]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005930:	4b35      	ldr	r3, [pc, #212]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a34      	ldr	r2, [pc, #208]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800593a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800593c:	f7fe fb44 	bl	8003fc8 <HAL_GetTick>
 8005940:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005944:	f7fe fb40 	bl	8003fc8 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b64      	cmp	r3, #100	; 0x64
 8005950:	d901      	bls.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e38f      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005956:	4b2c      	ldr	r3, [pc, #176]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005962:	4b28      	ldr	r3, [pc, #160]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d035      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	429a      	cmp	r2, r3
 800597e:	d02e      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005980:	4b20      	ldr	r3, [pc, #128]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005988:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800598a:	4b1e      	ldr	r3, [pc, #120]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005994:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005996:	4b1b      	ldr	r3, [pc, #108]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	4a1a      	ldr	r2, [pc, #104]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800599c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80059a2:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059a8:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d114      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b4:	f7fe fb08 	bl	8003fc8 <HAL_GetTick>
 80059b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ba:	e00a      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059bc:	f7fe fb04 	bl	8003fc8 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e351      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d2:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0ee      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ea:	d111      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059f8:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059fa:	400b      	ands	r3, r1
 80059fc:	4901      	ldr	r1, [pc, #4]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
 8005a02:	e00b      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005a04:	40023800 	.word	0x40023800
 8005a08:	40007000 	.word	0x40007000
 8005a0c:	0ffffcff 	.word	0x0ffffcff
 8005a10:	4bac      	ldr	r3, [pc, #688]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	4aab      	ldr	r2, [pc, #684]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a1a:	6093      	str	r3, [r2, #8]
 8005a1c:	4ba9      	ldr	r3, [pc, #676]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a28:	49a6      	ldr	r1, [pc, #664]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0310 	and.w	r3, r3, #16
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d010      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a3a:	4ba2      	ldr	r3, [pc, #648]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a40:	4aa0      	ldr	r2, [pc, #640]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a4a:	4b9e      	ldr	r3, [pc, #632]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	499b      	ldr	r1, [pc, #620]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a68:	4b96      	ldr	r3, [pc, #600]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a76:	4993      	ldr	r1, [pc, #588]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a8a:	4b8e      	ldr	r3, [pc, #568]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a98:	498a      	ldr	r1, [pc, #552]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005aac:	4b85      	ldr	r3, [pc, #532]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aba:	4982      	ldr	r1, [pc, #520]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ace:	4b7d      	ldr	r3, [pc, #500]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005adc:	4979      	ldr	r1, [pc, #484]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005af0:	4b74      	ldr	r3, [pc, #464]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af6:	f023 0203 	bic.w	r2, r3, #3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	4971      	ldr	r1, [pc, #452]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b12:	4b6c      	ldr	r3, [pc, #432]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b18:	f023 020c 	bic.w	r2, r3, #12
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b20:	4968      	ldr	r1, [pc, #416]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b34:	4b63      	ldr	r3, [pc, #396]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b42:	4960      	ldr	r1, [pc, #384]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b56:	4b5b      	ldr	r3, [pc, #364]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b64:	4957      	ldr	r1, [pc, #348]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b78:	4b52      	ldr	r3, [pc, #328]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	494f      	ldr	r1, [pc, #316]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b9a:	4b4a      	ldr	r3, [pc, #296]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba8:	4946      	ldr	r1, [pc, #280]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005bbc:	4b41      	ldr	r3, [pc, #260]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bca:	493e      	ldr	r1, [pc, #248]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005bde:	4b39      	ldr	r3, [pc, #228]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bec:	4935      	ldr	r1, [pc, #212]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c00:	4b30      	ldr	r3, [pc, #192]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c0e:	492d      	ldr	r1, [pc, #180]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d011      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c22:	4b28      	ldr	r3, [pc, #160]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c30:	4924      	ldr	r1, [pc, #144]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c40:	d101      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c42:	2301      	movs	r3, #1
 8005c44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c52:	2301      	movs	r3, #1
 8005c54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c62:	4b18      	ldr	r3, [pc, #96]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c70:	4914      	ldr	r1, [pc, #80]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c84:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c94:	490b      	ldr	r1, [pc, #44]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00f      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005ca8:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb8:	4902      	ldr	r1, [pc, #8]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cc0:	e002      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005cc2:	bf00      	nop
 8005cc4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00b      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cd4:	4b8a      	ldr	r3, [pc, #552]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce4:	4986      	ldr	r1, [pc, #536]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005cf8:	4b81      	ldr	r3, [pc, #516]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cfe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d08:	497d      	ldr	r1, [pc, #500]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d006      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80d6 	beq.w	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d24:	4b76      	ldr	r3, [pc, #472]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a75      	ldr	r2, [pc, #468]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d30:	f7fe f94a 	bl	8003fc8 <HAL_GetTick>
 8005d34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d38:	f7fe f946 	bl	8003fc8 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	; 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e195      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d4a:	4b6d      	ldr	r3, [pc, #436]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d021      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d11d      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d6a:	4b65      	ldr	r3, [pc, #404]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d70:	0c1b      	lsrs	r3, r3, #16
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d78:	4b61      	ldr	r3, [pc, #388]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d7e:	0e1b      	lsrs	r3, r3, #24
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	019a      	lsls	r2, r3, #6
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	041b      	lsls	r3, r3, #16
 8005d90:	431a      	orrs	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	061b      	lsls	r3, r3, #24
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	071b      	lsls	r3, r3, #28
 8005d9e:	4958      	ldr	r1, [pc, #352]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d02e      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dd0:	d129      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005dd2:	4b4b      	ldr	r3, [pc, #300]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd8:	0c1b      	lsrs	r3, r3, #16
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005de0:	4b47      	ldr	r3, [pc, #284]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de6:	0f1b      	lsrs	r3, r3, #28
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	019a      	lsls	r2, r3, #6
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	061b      	lsls	r3, r3, #24
 8005e00:	431a      	orrs	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	071b      	lsls	r3, r3, #28
 8005e06:	493e      	ldr	r1, [pc, #248]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e0e:	4b3c      	ldr	r3, [pc, #240]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e14:	f023 021f 	bic.w	r2, r3, #31
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	4938      	ldr	r1, [pc, #224]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01d      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e32:	4b33      	ldr	r3, [pc, #204]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e38:	0e1b      	lsrs	r3, r3, #24
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e40:	4b2f      	ldr	r3, [pc, #188]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e46:	0f1b      	lsrs	r3, r3, #28
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	019a      	lsls	r2, r3, #6
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	041b      	lsls	r3, r3, #16
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	061b      	lsls	r3, r3, #24
 8005e60:	431a      	orrs	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	071b      	lsls	r3, r3, #28
 8005e66:	4926      	ldr	r1, [pc, #152]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d011      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	019a      	lsls	r2, r3, #6
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	061b      	lsls	r3, r3, #24
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	071b      	lsls	r3, r3, #28
 8005e96:	491a      	ldr	r1, [pc, #104]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e9e:	4b18      	ldr	r3, [pc, #96]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ea4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eaa:	f7fe f88d 	bl	8003fc8 <HAL_GetTick>
 8005eae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005eb2:	f7fe f889 	bl	8003fc8 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b64      	cmp	r3, #100	; 0x64
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e0d8      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ec4:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0f0      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	f040 80ce 	bne.w	8006074 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ed8:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a08      	ldr	r2, [pc, #32]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee4:	f7fe f870 	bl	8003fc8 <HAL_GetTick>
 8005ee8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005eea:	e00b      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005eec:	f7fe f86c 	bl	8003fc8 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	; 0x64
 8005ef8:	d904      	bls.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e0bb      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005efe:	bf00      	nop
 8005f00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f04:	4b5e      	ldr	r3, [pc, #376]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f10:	d0ec      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d009      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d02e      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d12a      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f3a:	4b51      	ldr	r3, [pc, #324]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f48:	4b4d      	ldr	r3, [pc, #308]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4e:	0f1b      	lsrs	r3, r3, #28
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	019a      	lsls	r2, r3, #6
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	061b      	lsls	r3, r3, #24
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	071b      	lsls	r3, r3, #28
 8005f6e:	4944      	ldr	r1, [pc, #272]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f76:	4b42      	ldr	r3, [pc, #264]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	3b01      	subs	r3, #1
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	493d      	ldr	r1, [pc, #244]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d022      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fa4:	d11d      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fa6:	4b36      	ldr	r3, [pc, #216]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fac:	0e1b      	lsrs	r3, r3, #24
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005fb4:	4b32      	ldr	r3, [pc, #200]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fba:	0f1b      	lsrs	r3, r3, #28
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	019a      	lsls	r2, r3, #6
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	041b      	lsls	r3, r3, #16
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	061b      	lsls	r3, r3, #24
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	071b      	lsls	r3, r3, #28
 8005fda:	4929      	ldr	r1, [pc, #164]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d028      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fee:	4b24      	ldr	r3, [pc, #144]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff4:	0e1b      	lsrs	r3, r3, #24
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ffc:	4b20      	ldr	r3, [pc, #128]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006002:	0c1b      	lsrs	r3, r3, #16
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	019a      	lsls	r2, r3, #6
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	041b      	lsls	r3, r3, #16
 8006014:	431a      	orrs	r2, r3
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	061b      	lsls	r3, r3, #24
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	071b      	lsls	r3, r3, #28
 8006022:	4917      	ldr	r1, [pc, #92]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800602a:	4b15      	ldr	r3, [pc, #84]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800602c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	4911      	ldr	r1, [pc, #68]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800603a:	4313      	orrs	r3, r2
 800603c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006040:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a0e      	ldr	r2, [pc, #56]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800604a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800604c:	f7fd ffbc 	bl	8003fc8 <HAL_GetTick>
 8006050:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006052:	e008      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006054:	f7fd ffb8 	bl	8003fc8 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b64      	cmp	r3, #100	; 0x64
 8006060:	d901      	bls.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e007      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800606e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006072:	d1ef      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40023800 	.word	0x40023800

08006084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e049      	b.n	800612a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fd fbe2 	bl	8003874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f000 fcc0 	bl	8006a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e049      	b.n	80061d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d106      	bne.n	800615e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f841 	bl	80061e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3304      	adds	r3, #4
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f000 fc69 	bl	8006a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d109      	bne.n	8006218 <HAL_TIM_PWM_Start+0x24>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	bf14      	ite	ne
 8006210:	2301      	movne	r3, #1
 8006212:	2300      	moveq	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	e03c      	b.n	8006292 <HAL_TIM_PWM_Start+0x9e>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b04      	cmp	r3, #4
 800621c:	d109      	bne.n	8006232 <HAL_TIM_PWM_Start+0x3e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b01      	cmp	r3, #1
 8006228:	bf14      	ite	ne
 800622a:	2301      	movne	r3, #1
 800622c:	2300      	moveq	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	e02f      	b.n	8006292 <HAL_TIM_PWM_Start+0x9e>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d109      	bne.n	800624c <HAL_TIM_PWM_Start+0x58>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	e022      	b.n	8006292 <HAL_TIM_PWM_Start+0x9e>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b0c      	cmp	r3, #12
 8006250:	d109      	bne.n	8006266 <HAL_TIM_PWM_Start+0x72>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	bf14      	ite	ne
 800625e:	2301      	movne	r3, #1
 8006260:	2300      	moveq	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	e015      	b.n	8006292 <HAL_TIM_PWM_Start+0x9e>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b10      	cmp	r3, #16
 800626a:	d109      	bne.n	8006280 <HAL_TIM_PWM_Start+0x8c>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	bf14      	ite	ne
 8006278:	2301      	movne	r3, #1
 800627a:	2300      	moveq	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	e008      	b.n	8006292 <HAL_TIM_PWM_Start+0x9e>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	bf14      	ite	ne
 800628c:	2301      	movne	r3, #1
 800628e:	2300      	moveq	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e092      	b.n	80063c0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <HAL_TIM_PWM_Start+0xb6>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a8:	e023      	b.n	80062f2 <HAL_TIM_PWM_Start+0xfe>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d104      	bne.n	80062ba <HAL_TIM_PWM_Start+0xc6>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b8:	e01b      	b.n	80062f2 <HAL_TIM_PWM_Start+0xfe>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d104      	bne.n	80062ca <HAL_TIM_PWM_Start+0xd6>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c8:	e013      	b.n	80062f2 <HAL_TIM_PWM_Start+0xfe>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b0c      	cmp	r3, #12
 80062ce:	d104      	bne.n	80062da <HAL_TIM_PWM_Start+0xe6>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062d8:	e00b      	b.n	80062f2 <HAL_TIM_PWM_Start+0xfe>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d104      	bne.n	80062ea <HAL_TIM_PWM_Start+0xf6>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062e8:	e003      	b.n	80062f2 <HAL_TIM_PWM_Start+0xfe>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2201      	movs	r2, #1
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 ff3c 	bl	8007178 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a30      	ldr	r2, [pc, #192]	; (80063c8 <HAL_TIM_PWM_Start+0x1d4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_TIM_PWM_Start+0x120>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a2f      	ldr	r2, [pc, #188]	; (80063cc <HAL_TIM_PWM_Start+0x1d8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d101      	bne.n	8006318 <HAL_TIM_PWM_Start+0x124>
 8006314:	2301      	movs	r3, #1
 8006316:	e000      	b.n	800631a <HAL_TIM_PWM_Start+0x126>
 8006318:	2300      	movs	r3, #0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800632c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a25      	ldr	r2, [pc, #148]	; (80063c8 <HAL_TIM_PWM_Start+0x1d4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d022      	beq.n	800637e <HAL_TIM_PWM_Start+0x18a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006340:	d01d      	beq.n	800637e <HAL_TIM_PWM_Start+0x18a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a22      	ldr	r2, [pc, #136]	; (80063d0 <HAL_TIM_PWM_Start+0x1dc>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d018      	beq.n	800637e <HAL_TIM_PWM_Start+0x18a>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a20      	ldr	r2, [pc, #128]	; (80063d4 <HAL_TIM_PWM_Start+0x1e0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <HAL_TIM_PWM_Start+0x18a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1f      	ldr	r2, [pc, #124]	; (80063d8 <HAL_TIM_PWM_Start+0x1e4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00e      	beq.n	800637e <HAL_TIM_PWM_Start+0x18a>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a19      	ldr	r2, [pc, #100]	; (80063cc <HAL_TIM_PWM_Start+0x1d8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d009      	beq.n	800637e <HAL_TIM_PWM_Start+0x18a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1b      	ldr	r2, [pc, #108]	; (80063dc <HAL_TIM_PWM_Start+0x1e8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_TIM_PWM_Start+0x18a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a19      	ldr	r2, [pc, #100]	; (80063e0 <HAL_TIM_PWM_Start+0x1ec>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d115      	bne.n	80063aa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	4b17      	ldr	r3, [pc, #92]	; (80063e4 <HAL_TIM_PWM_Start+0x1f0>)
 8006386:	4013      	ands	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b06      	cmp	r3, #6
 800638e:	d015      	beq.n	80063bc <HAL_TIM_PWM_Start+0x1c8>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006396:	d011      	beq.n	80063bc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a8:	e008      	b.n	80063bc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 0201 	orr.w	r2, r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	e000      	b.n	80063be <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40010000 	.word	0x40010000
 80063cc:	40010400 	.word	0x40010400
 80063d0:	40000400 	.word	0x40000400
 80063d4:	40000800 	.word	0x40000800
 80063d8:	40000c00 	.word	0x40000c00
 80063dc:	40014000 	.word	0x40014000
 80063e0:	40001800 	.word	0x40001800
 80063e4:	00010007 	.word	0x00010007

080063e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d122      	bne.n	8006444 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b02      	cmp	r3, #2
 800640a:	d11b      	bne.n	8006444 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f06f 0202 	mvn.w	r2, #2
 8006414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 faee 	bl	8006a0c <HAL_TIM_IC_CaptureCallback>
 8006430:	e005      	b.n	800643e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fae0 	bl	80069f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 faf1 	bl	8006a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	2b04      	cmp	r3, #4
 8006450:	d122      	bne.n	8006498 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b04      	cmp	r3, #4
 800645e:	d11b      	bne.n	8006498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f06f 0204 	mvn.w	r2, #4
 8006468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fac4 	bl	8006a0c <HAL_TIM_IC_CaptureCallback>
 8006484:	e005      	b.n	8006492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fab6 	bl	80069f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fac7 	bl	8006a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d122      	bne.n	80064ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d11b      	bne.n	80064ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f06f 0208 	mvn.w	r2, #8
 80064bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2204      	movs	r2, #4
 80064c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fa9a 	bl	8006a0c <HAL_TIM_IC_CaptureCallback>
 80064d8:	e005      	b.n	80064e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fa8c 	bl	80069f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fa9d 	bl	8006a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0310 	and.w	r3, r3, #16
 80064f6:	2b10      	cmp	r3, #16
 80064f8:	d122      	bne.n	8006540 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0310 	and.w	r3, r3, #16
 8006504:	2b10      	cmp	r3, #16
 8006506:	d11b      	bne.n	8006540 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0210 	mvn.w	r2, #16
 8006510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2208      	movs	r2, #8
 8006516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa70 	bl	8006a0c <HAL_TIM_IC_CaptureCallback>
 800652c:	e005      	b.n	800653a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa62 	bl	80069f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fa73 	bl	8006a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b01      	cmp	r3, #1
 800654c:	d10e      	bne.n	800656c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b01      	cmp	r3, #1
 800655a:	d107      	bne.n	800656c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f06f 0201 	mvn.w	r2, #1
 8006564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa3c 	bl	80069e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006576:	2b80      	cmp	r3, #128	; 0x80
 8006578:	d10e      	bne.n	8006598 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006584:	2b80      	cmp	r3, #128	; 0x80
 8006586:	d107      	bne.n	8006598 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 feae 	bl	80072f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a6:	d10e      	bne.n	80065c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b2:	2b80      	cmp	r3, #128	; 0x80
 80065b4:	d107      	bne.n	80065c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fea1 	bl	8007308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d0:	2b40      	cmp	r3, #64	; 0x40
 80065d2:	d10e      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	2b40      	cmp	r3, #64	; 0x40
 80065e0:	d107      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fa21 	bl	8006a34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d10e      	bne.n	800661e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b20      	cmp	r3, #32
 800660c:	d107      	bne.n	800661e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f06f 0220 	mvn.w	r2, #32
 8006616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fe61 	bl	80072e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006642:	2302      	movs	r3, #2
 8006644:	e0ff      	b.n	8006846 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b14      	cmp	r3, #20
 8006652:	f200 80f0 	bhi.w	8006836 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	080066b1 	.word	0x080066b1
 8006660:	08006837 	.word	0x08006837
 8006664:	08006837 	.word	0x08006837
 8006668:	08006837 	.word	0x08006837
 800666c:	080066f1 	.word	0x080066f1
 8006670:	08006837 	.word	0x08006837
 8006674:	08006837 	.word	0x08006837
 8006678:	08006837 	.word	0x08006837
 800667c:	08006733 	.word	0x08006733
 8006680:	08006837 	.word	0x08006837
 8006684:	08006837 	.word	0x08006837
 8006688:	08006837 	.word	0x08006837
 800668c:	08006773 	.word	0x08006773
 8006690:	08006837 	.word	0x08006837
 8006694:	08006837 	.word	0x08006837
 8006698:	08006837 	.word	0x08006837
 800669c:	080067b5 	.word	0x080067b5
 80066a0:	08006837 	.word	0x08006837
 80066a4:	08006837 	.word	0x08006837
 80066a8:	08006837 	.word	0x08006837
 80066ac:	080067f5 	.word	0x080067f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fa66 	bl	8006b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0208 	orr.w	r2, r2, #8
 80066ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0204 	bic.w	r2, r2, #4
 80066da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6999      	ldr	r1, [r3, #24]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	691a      	ldr	r2, [r3, #16]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	619a      	str	r2, [r3, #24]
      break;
 80066ee:	e0a5      	b.n	800683c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fab8 	bl	8006c6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800670a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6999      	ldr	r1, [r3, #24]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	021a      	lsls	r2, r3, #8
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	619a      	str	r2, [r3, #24]
      break;
 8006730:	e084      	b.n	800683c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fb0f 	bl	8006d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69da      	ldr	r2, [r3, #28]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0208 	orr.w	r2, r2, #8
 800674c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0204 	bic.w	r2, r2, #4
 800675c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69d9      	ldr	r1, [r3, #28]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	691a      	ldr	r2, [r3, #16]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	61da      	str	r2, [r3, #28]
      break;
 8006770:	e064      	b.n	800683c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68b9      	ldr	r1, [r7, #8]
 8006778:	4618      	mov	r0, r3
 800677a:	f000 fb65 	bl	8006e48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800678c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69da      	ldr	r2, [r3, #28]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800679c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69d9      	ldr	r1, [r3, #28]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	021a      	lsls	r2, r3, #8
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	61da      	str	r2, [r3, #28]
      break;
 80067b2:	e043      	b.n	800683c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fb9c 	bl	8006ef8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0208 	orr.w	r2, r2, #8
 80067ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0204 	bic.w	r2, r2, #4
 80067de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067f2:	e023      	b.n	800683c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fbce 	bl	8006f9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800680e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800681e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	021a      	lsls	r2, r3, #8
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006834:	e002      	b.n	800683c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	75fb      	strb	r3, [r7, #23]
      break;
 800683a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006844:	7dfb      	ldrb	r3, [r7, #23]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop

08006850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_TIM_ConfigClockSource+0x1c>
 8006868:	2302      	movs	r3, #2
 800686a:	e0b4      	b.n	80069d6 <HAL_TIM_ConfigClockSource+0x186>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	4b56      	ldr	r3, [pc, #344]	; (80069e0 <HAL_TIM_ConfigClockSource+0x190>)
 8006888:	4013      	ands	r3, r2
 800688a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a4:	d03e      	beq.n	8006924 <HAL_TIM_ConfigClockSource+0xd4>
 80068a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068aa:	f200 8087 	bhi.w	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b2:	f000 8086 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x172>
 80068b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ba:	d87f      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068bc:	2b70      	cmp	r3, #112	; 0x70
 80068be:	d01a      	beq.n	80068f6 <HAL_TIM_ConfigClockSource+0xa6>
 80068c0:	2b70      	cmp	r3, #112	; 0x70
 80068c2:	d87b      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068c4:	2b60      	cmp	r3, #96	; 0x60
 80068c6:	d050      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x11a>
 80068c8:	2b60      	cmp	r3, #96	; 0x60
 80068ca:	d877      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068cc:	2b50      	cmp	r3, #80	; 0x50
 80068ce:	d03c      	beq.n	800694a <HAL_TIM_ConfigClockSource+0xfa>
 80068d0:	2b50      	cmp	r3, #80	; 0x50
 80068d2:	d873      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d058      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x13a>
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	d86f      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068dc:	2b30      	cmp	r3, #48	; 0x30
 80068de:	d064      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x15a>
 80068e0:	2b30      	cmp	r3, #48	; 0x30
 80068e2:	d86b      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	d060      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x15a>
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d867      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d05c      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x15a>
 80068f0:	2b10      	cmp	r3, #16
 80068f2:	d05a      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x15a>
 80068f4:	e062      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6899      	ldr	r1, [r3, #8]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f000 fc17 	bl	8007138 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	609a      	str	r2, [r3, #8]
      break;
 8006922:	e04f      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	6899      	ldr	r1, [r3, #8]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f000 fc00 	bl	8007138 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006946:	609a      	str	r2, [r3, #8]
      break;
 8006948:	e03c      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6859      	ldr	r1, [r3, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	461a      	mov	r2, r3
 8006958:	f000 fb74 	bl	8007044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2150      	movs	r1, #80	; 0x50
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fbcd 	bl	8007102 <TIM_ITRx_SetConfig>
      break;
 8006968:	e02c      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6818      	ldr	r0, [r3, #0]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	6859      	ldr	r1, [r3, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	461a      	mov	r2, r3
 8006978:	f000 fb93 	bl	80070a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2160      	movs	r1, #96	; 0x60
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fbbd 	bl	8007102 <TIM_ITRx_SetConfig>
      break;
 8006988:	e01c      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	6859      	ldr	r1, [r3, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	461a      	mov	r2, r3
 8006998:	f000 fb54 	bl	8007044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2140      	movs	r1, #64	; 0x40
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fbad 	bl	8007102 <TIM_ITRx_SetConfig>
      break;
 80069a8:	e00c      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4619      	mov	r1, r3
 80069b4:	4610      	mov	r0, r2
 80069b6:	f000 fba4 	bl	8007102 <TIM_ITRx_SetConfig>
      break;
 80069ba:	e003      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	73fb      	strb	r3, [r7, #15]
      break;
 80069c0:	e000      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	fffeff88 	.word	0xfffeff88

080069e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a40      	ldr	r2, [pc, #256]	; (8006b5c <TIM_Base_SetConfig+0x114>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d013      	beq.n	8006a88 <TIM_Base_SetConfig+0x40>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a66:	d00f      	beq.n	8006a88 <TIM_Base_SetConfig+0x40>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a3d      	ldr	r2, [pc, #244]	; (8006b60 <TIM_Base_SetConfig+0x118>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00b      	beq.n	8006a88 <TIM_Base_SetConfig+0x40>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a3c      	ldr	r2, [pc, #240]	; (8006b64 <TIM_Base_SetConfig+0x11c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d007      	beq.n	8006a88 <TIM_Base_SetConfig+0x40>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a3b      	ldr	r2, [pc, #236]	; (8006b68 <TIM_Base_SetConfig+0x120>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d003      	beq.n	8006a88 <TIM_Base_SetConfig+0x40>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a3a      	ldr	r2, [pc, #232]	; (8006b6c <TIM_Base_SetConfig+0x124>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d108      	bne.n	8006a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a2f      	ldr	r2, [pc, #188]	; (8006b5c <TIM_Base_SetConfig+0x114>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d02b      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa8:	d027      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a2c      	ldr	r2, [pc, #176]	; (8006b60 <TIM_Base_SetConfig+0x118>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d023      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a2b      	ldr	r2, [pc, #172]	; (8006b64 <TIM_Base_SetConfig+0x11c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d01f      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a2a      	ldr	r2, [pc, #168]	; (8006b68 <TIM_Base_SetConfig+0x120>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01b      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a29      	ldr	r2, [pc, #164]	; (8006b6c <TIM_Base_SetConfig+0x124>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d017      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a28      	ldr	r2, [pc, #160]	; (8006b70 <TIM_Base_SetConfig+0x128>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a27      	ldr	r2, [pc, #156]	; (8006b74 <TIM_Base_SetConfig+0x12c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00f      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a26      	ldr	r2, [pc, #152]	; (8006b78 <TIM_Base_SetConfig+0x130>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00b      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a25      	ldr	r2, [pc, #148]	; (8006b7c <TIM_Base_SetConfig+0x134>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d007      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a24      	ldr	r2, [pc, #144]	; (8006b80 <TIM_Base_SetConfig+0x138>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d003      	beq.n	8006afa <TIM_Base_SetConfig+0xb2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a23      	ldr	r2, [pc, #140]	; (8006b84 <TIM_Base_SetConfig+0x13c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d108      	bne.n	8006b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a0a      	ldr	r2, [pc, #40]	; (8006b5c <TIM_Base_SetConfig+0x114>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_Base_SetConfig+0xf8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a0c      	ldr	r2, [pc, #48]	; (8006b6c <TIM_Base_SetConfig+0x124>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d103      	bne.n	8006b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	615a      	str	r2, [r3, #20]
}
 8006b4e:	bf00      	nop
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800
 8006b68:	40000c00 	.word	0x40000c00
 8006b6c:	40010400 	.word	0x40010400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400
 8006b78:	40014800 	.word	0x40014800
 8006b7c:	40001800 	.word	0x40001800
 8006b80:	40001c00 	.word	0x40001c00
 8006b84:	40002000 	.word	0x40002000

08006b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	f023 0201 	bic.w	r2, r3, #1
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4b2b      	ldr	r3, [pc, #172]	; (8006c60 <TIM_OC1_SetConfig+0xd8>)
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0303 	bic.w	r3, r3, #3
 8006bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f023 0302 	bic.w	r3, r3, #2
 8006bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a21      	ldr	r2, [pc, #132]	; (8006c64 <TIM_OC1_SetConfig+0xdc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d003      	beq.n	8006bec <TIM_OC1_SetConfig+0x64>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a20      	ldr	r2, [pc, #128]	; (8006c68 <TIM_OC1_SetConfig+0xe0>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d10c      	bne.n	8006c06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f023 0308 	bic.w	r3, r3, #8
 8006bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 0304 	bic.w	r3, r3, #4
 8006c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a16      	ldr	r2, [pc, #88]	; (8006c64 <TIM_OC1_SetConfig+0xdc>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <TIM_OC1_SetConfig+0x8e>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <TIM_OC1_SetConfig+0xe0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d111      	bne.n	8006c3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	621a      	str	r2, [r3, #32]
}
 8006c54:	bf00      	nop
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	fffeff8f 	.word	0xfffeff8f
 8006c64:	40010000 	.word	0x40010000
 8006c68:	40010400 	.word	0x40010400

08006c6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	f023 0210 	bic.w	r2, r3, #16
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4b2e      	ldr	r3, [pc, #184]	; (8006d50 <TIM_OC2_SetConfig+0xe4>)
 8006c98:	4013      	ands	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	021b      	lsls	r3, r3, #8
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f023 0320 	bic.w	r3, r3, #32
 8006cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a23      	ldr	r2, [pc, #140]	; (8006d54 <TIM_OC2_SetConfig+0xe8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <TIM_OC2_SetConfig+0x68>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a22      	ldr	r2, [pc, #136]	; (8006d58 <TIM_OC2_SetConfig+0xec>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d10d      	bne.n	8006cf0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a18      	ldr	r2, [pc, #96]	; (8006d54 <TIM_OC2_SetConfig+0xe8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <TIM_OC2_SetConfig+0x94>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a17      	ldr	r2, [pc, #92]	; (8006d58 <TIM_OC2_SetConfig+0xec>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d113      	bne.n	8006d28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	621a      	str	r2, [r3, #32]
}
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	feff8fff 	.word	0xfeff8fff
 8006d54:	40010000 	.word	0x40010000
 8006d58:	40010400 	.word	0x40010400

08006d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4b2d      	ldr	r3, [pc, #180]	; (8006e3c <TIM_OC3_SetConfig+0xe0>)
 8006d88:	4013      	ands	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0303 	bic.w	r3, r3, #3
 8006d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	021b      	lsls	r3, r3, #8
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a22      	ldr	r2, [pc, #136]	; (8006e40 <TIM_OC3_SetConfig+0xe4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d003      	beq.n	8006dc2 <TIM_OC3_SetConfig+0x66>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a21      	ldr	r2, [pc, #132]	; (8006e44 <TIM_OC3_SetConfig+0xe8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d10d      	bne.n	8006dde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a17      	ldr	r2, [pc, #92]	; (8006e40 <TIM_OC3_SetConfig+0xe4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d003      	beq.n	8006dee <TIM_OC3_SetConfig+0x92>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a16      	ldr	r2, [pc, #88]	; (8006e44 <TIM_OC3_SetConfig+0xe8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d113      	bne.n	8006e16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	621a      	str	r2, [r3, #32]
}
 8006e30:	bf00      	nop
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	fffeff8f 	.word	0xfffeff8f
 8006e40:	40010000 	.word	0x40010000
 8006e44:	40010400 	.word	0x40010400

08006e48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4b1e      	ldr	r3, [pc, #120]	; (8006eec <TIM_OC4_SetConfig+0xa4>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	031b      	lsls	r3, r3, #12
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <TIM_OC4_SetConfig+0xa8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_OC4_SetConfig+0x68>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a12      	ldr	r2, [pc, #72]	; (8006ef4 <TIM_OC4_SetConfig+0xac>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d109      	bne.n	8006ec4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	019b      	lsls	r3, r3, #6
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	621a      	str	r2, [r3, #32]
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	feff8fff 	.word	0xfeff8fff
 8006ef0:	40010000 	.word	0x40010000
 8006ef4:	40010400 	.word	0x40010400

08006ef8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4b1b      	ldr	r3, [pc, #108]	; (8006f90 <TIM_OC5_SetConfig+0x98>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a12      	ldr	r2, [pc, #72]	; (8006f94 <TIM_OC5_SetConfig+0x9c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d003      	beq.n	8006f56 <TIM_OC5_SetConfig+0x5e>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a11      	ldr	r2, [pc, #68]	; (8006f98 <TIM_OC5_SetConfig+0xa0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d109      	bne.n	8006f6a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	621a      	str	r2, [r3, #32]
}
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	fffeff8f 	.word	0xfffeff8f
 8006f94:	40010000 	.word	0x40010000
 8006f98:	40010400 	.word	0x40010400

08006f9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4b1c      	ldr	r3, [pc, #112]	; (8007038 <TIM_OC6_SetConfig+0x9c>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	021b      	lsls	r3, r3, #8
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	051b      	lsls	r3, r3, #20
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a13      	ldr	r2, [pc, #76]	; (800703c <TIM_OC6_SetConfig+0xa0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d003      	beq.n	8006ffc <TIM_OC6_SetConfig+0x60>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a12      	ldr	r2, [pc, #72]	; (8007040 <TIM_OC6_SetConfig+0xa4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d109      	bne.n	8007010 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007002:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	029b      	lsls	r3, r3, #10
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	4313      	orrs	r3, r2
 800700e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	621a      	str	r2, [r3, #32]
}
 800702a:	bf00      	nop
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	feff8fff 	.word	0xfeff8fff
 800703c:	40010000 	.word	0x40010000
 8007040:	40010400 	.word	0x40010400

08007044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f023 0201 	bic.w	r2, r3, #1
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800706e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f023 030a 	bic.w	r3, r3, #10
 8007080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	621a      	str	r2, [r3, #32]
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b087      	sub	sp, #28
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f023 0210 	bic.w	r2, r3, #16
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	031b      	lsls	r3, r3, #12
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	621a      	str	r2, [r3, #32]
}
 80070f6:	bf00      	nop
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007102:	b480      	push	{r7}
 8007104:	b085      	sub	sp, #20
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	f043 0307 	orr.w	r3, r3, #7
 8007124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	609a      	str	r2, [r3, #8]
}
 800712c:	bf00      	nop
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	021a      	lsls	r2, r3, #8
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	431a      	orrs	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4313      	orrs	r3, r2
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	609a      	str	r2, [r3, #8]
}
 800716c:	bf00      	nop
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f003 031f 	and.w	r3, r3, #31
 800718a:	2201      	movs	r2, #1
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1a      	ldr	r2, [r3, #32]
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	43db      	mvns	r3, r3
 800719a:	401a      	ands	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6a1a      	ldr	r2, [r3, #32]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f003 031f 	and.w	r3, r3, #31
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	fa01 f303 	lsl.w	r3, r1, r3
 80071b0:	431a      	orrs	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	621a      	str	r2, [r3, #32]
}
 80071b6:	bf00      	nop
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
	...

080071c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d101      	bne.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071d8:	2302      	movs	r3, #2
 80071da:	e06d      	b.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a30      	ldr	r2, [pc, #192]	; (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d004      	beq.n	8007210 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a2f      	ldr	r2, [pc, #188]	; (80072c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d108      	bne.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007216:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007228:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4313      	orrs	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a20      	ldr	r2, [pc, #128]	; (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d022      	beq.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800724e:	d01d      	beq.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1d      	ldr	r2, [pc, #116]	; (80072cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d018      	beq.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1c      	ldr	r2, [pc, #112]	; (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d013      	beq.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1a      	ldr	r2, [pc, #104]	; (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00e      	beq.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a15      	ldr	r2, [pc, #84]	; (80072c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d009      	beq.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a16      	ldr	r2, [pc, #88]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d004      	beq.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a15      	ldr	r2, [pc, #84]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d10c      	bne.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007292:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	4313      	orrs	r3, r2
 800729c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	40010000 	.word	0x40010000
 80072c8:	40010400 	.word	0x40010400
 80072cc:	40000400 	.word	0x40000400
 80072d0:	40000800 	.word	0x40000800
 80072d4:	40000c00 	.word	0x40000c00
 80072d8:	40014000 	.word	0x40014000
 80072dc:	40001800 	.word	0x40001800

080072e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e040      	b.n	80073b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007332:	2b00      	cmp	r3, #0
 8007334:	d106      	bne.n	8007344 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fc fb9a 	bl	8003a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2224      	movs	r2, #36	; 0x24
 8007348:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0201 	bic.w	r2, r2, #1
 8007358:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fc08 	bl	8007b70 <UART_SetConfig>
 8007360:	4603      	mov	r3, r0
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e022      	b.n	80073b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fe60 	bl	8008038 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0201 	orr.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fee7 	bl	800817c <UART_CheckIdleState>
 80073ae:	4603      	mov	r3, r0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	; 0x28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	4613      	mov	r3, r2
 80073c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ca:	2b20      	cmp	r3, #32
 80073cc:	d165      	bne.n	800749a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <HAL_UART_Transmit_DMA+0x22>
 80073d4:	88fb      	ldrh	r3, [r7, #6]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e05e      	b.n	800749c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	88fa      	ldrh	r2, [r7, #6]
 80073e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	88fa      	ldrh	r2, [r7, #6]
 80073f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2221      	movs	r2, #33	; 0x21
 8007400:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007406:	2b00      	cmp	r3, #0
 8007408:	d027      	beq.n	800745a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740e:	4a25      	ldr	r2, [pc, #148]	; (80074a4 <HAL_UART_Transmit_DMA+0xec>)
 8007410:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007416:	4a24      	ldr	r2, [pc, #144]	; (80074a8 <HAL_UART_Transmit_DMA+0xf0>)
 8007418:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741e:	4a23      	ldr	r2, [pc, #140]	; (80074ac <HAL_UART_Transmit_DMA+0xf4>)
 8007420:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007426:	2200      	movs	r2, #0
 8007428:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007432:	4619      	mov	r1, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3328      	adds	r3, #40	; 0x28
 800743a:	461a      	mov	r2, r3
 800743c:	88fb      	ldrh	r3, [r7, #6]
 800743e:	f7fc ffb3 	bl	80043a8 <HAL_DMA_Start_IT>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d008      	beq.n	800745a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2210      	movs	r2, #16
 800744c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e020      	b.n	800749c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2240      	movs	r2, #64	; 0x40
 8007460:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3308      	adds	r3, #8
 8007468:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	613b      	str	r3, [r7, #16]
   return(result);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3308      	adds	r3, #8
 8007480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007482:	623a      	str	r2, [r7, #32]
 8007484:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	69f9      	ldr	r1, [r7, #28]
 8007488:	6a3a      	ldr	r2, [r7, #32]
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e5      	bne.n	8007462 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	e000      	b.n	800749c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800749a:	2302      	movs	r3, #2
  }
}
 800749c:	4618      	mov	r0, r3
 800749e:	3728      	adds	r7, #40	; 0x28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	080085f9 	.word	0x080085f9
 80074a8:	0800868f 	.word	0x0800868f
 80074ac:	08008811 	.word	0x08008811

080074b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08a      	sub	sp, #40	; 0x28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d132      	bne.n	800752e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <HAL_UART_Receive_DMA+0x24>
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e02b      	b.n	8007530 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d018      	beq.n	800751e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	613b      	str	r3, [r7, #16]
   return(result);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	623b      	str	r3, [r7, #32]
 800750c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	69f9      	ldr	r1, [r7, #28]
 8007510:	6a3a      	ldr	r2, [r7, #32]
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	61bb      	str	r3, [r7, #24]
   return(result);
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e6      	bne.n	80074ec <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	461a      	mov	r2, r3
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 ff3d 	bl	80083a4 <UART_Start_Receive_DMA>
 800752a:	4603      	mov	r3, r0
 800752c:	e000      	b.n	8007530 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800752e:	2302      	movs	r3, #2
  }
}
 8007530:	4618      	mov	r0, r3
 8007532:	3728      	adds	r7, #40	; 0x28
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b0ba      	sub	sp, #232	; 0xe8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800755e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007562:	f640 030f 	movw	r3, #2063	; 0x80f
 8007566:	4013      	ands	r3, r2
 8007568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800756c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007570:	2b00      	cmp	r3, #0
 8007572:	d115      	bne.n	80075a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00f      	beq.n	80075a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007584:	f003 0320 	and.w	r3, r3, #32
 8007588:	2b00      	cmp	r3, #0
 800758a:	d009      	beq.n	80075a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 82ac 	beq.w	8007aee <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	4798      	blx	r3
      }
      return;
 800759e:	e2a6      	b.n	8007aee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 8117 	beq.w	80077d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d106      	bne.n	80075c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80075ba:	4b85      	ldr	r3, [pc, #532]	; (80077d0 <HAL_UART_IRQHandler+0x298>)
 80075bc:	4013      	ands	r3, r2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 810a 	beq.w	80077d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d011      	beq.n	80075f4 <HAL_UART_IRQHandler+0xbc>
 80075d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2201      	movs	r2, #1
 80075e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ea:	f043 0201 	orr.w	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d011      	beq.n	8007624 <HAL_UART_IRQHandler+0xec>
 8007600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2202      	movs	r2, #2
 8007612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800761a:	f043 0204 	orr.w	r2, r3, #4
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d011      	beq.n	8007654 <HAL_UART_IRQHandler+0x11c>
 8007630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00b      	beq.n	8007654 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2204      	movs	r2, #4
 8007642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800764a:	f043 0202 	orr.w	r2, r3, #2
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007658:	f003 0308 	and.w	r3, r3, #8
 800765c:	2b00      	cmp	r3, #0
 800765e:	d017      	beq.n	8007690 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b00      	cmp	r3, #0
 800766a:	d105      	bne.n	8007678 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800766c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007670:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2208      	movs	r2, #8
 800767e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007686:	f043 0208 	orr.w	r2, r3, #8
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007698:	2b00      	cmp	r3, #0
 800769a:	d012      	beq.n	80076c2 <HAL_UART_IRQHandler+0x18a>
 800769c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00c      	beq.n	80076c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b8:	f043 0220 	orr.w	r2, r3, #32
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8212 	beq.w	8007af2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00d      	beq.n	80076f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d007      	beq.n	80076f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d005      	beq.n	800771a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800770e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007712:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007716:	2b00      	cmp	r3, #0
 8007718:	d04f      	beq.n	80077ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 ff08 	bl	8008530 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772a:	2b40      	cmp	r3, #64	; 0x40
 800772c:	d141      	bne.n	80077b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3308      	adds	r3, #8
 8007734:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007744:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800774c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3308      	adds	r3, #8
 8007756:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800775a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800775e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007766:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1d9      	bne.n	800772e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777e:	2b00      	cmp	r3, #0
 8007780:	d013      	beq.n	80077aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007786:	4a13      	ldr	r2, [pc, #76]	; (80077d4 <HAL_UART_IRQHandler+0x29c>)
 8007788:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800778e:	4618      	mov	r0, r3
 8007790:	f7fc feda 	bl	8004548 <HAL_DMA_Abort_IT>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d017      	beq.n	80077ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a8:	e00f      	b.n	80077ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f9c0 	bl	8007b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b0:	e00b      	b.n	80077ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f9bc 	bl	8007b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b8:	e007      	b.n	80077ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f9b8 	bl	8007b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80077c8:	e193      	b.n	8007af2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ca:	bf00      	nop
    return;
 80077cc:	e191      	b.n	8007af2 <HAL_UART_IRQHandler+0x5ba>
 80077ce:	bf00      	nop
 80077d0:	04000120 	.word	0x04000120
 80077d4:	0800888f 	.word	0x0800888f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077dc:	2b01      	cmp	r3, #1
 80077de:	f040 814c 	bne.w	8007a7a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e6:	f003 0310 	and.w	r3, r3, #16
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 8145 	beq.w	8007a7a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f4:	f003 0310 	and.w	r3, r3, #16
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 813e 	beq.w	8007a7a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2210      	movs	r2, #16
 8007804:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	f040 80b6 	bne.w	8007982 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007822:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 8165 	beq.w	8007af6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007836:	429a      	cmp	r2, r3
 8007838:	f080 815d 	bcs.w	8007af6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007842:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007850:	f000 8086 	beq.w	8007960 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800786c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800787e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007882:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800788a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1da      	bne.n	8007854 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3308      	adds	r3, #8
 80078a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078b0:	f023 0301 	bic.w	r3, r3, #1
 80078b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3308      	adds	r3, #8
 80078be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e1      	bne.n	800789e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3308      	adds	r3, #8
 80078e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3308      	adds	r3, #8
 80078fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007900:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007904:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800790c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e3      	bne.n	80078da <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2220      	movs	r2, #32
 8007916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800792e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007930:	f023 0310 	bic.w	r3, r3, #16
 8007934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007942:	65bb      	str	r3, [r7, #88]	; 0x58
 8007944:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e4      	bne.n	8007920 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795a:	4618      	mov	r0, r3
 800795c:	f7fc fd84 	bl	8004468 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007972:	b29b      	uxth	r3, r3
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	b29b      	uxth	r3, r3
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f8e2 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007980:	e0b9      	b.n	8007af6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800798e:	b29b      	uxth	r3, r3
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 80ab 	beq.w	8007afa <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80079a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 80a6 	beq.w	8007afa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079d0:	647b      	str	r3, [r7, #68]	; 0x44
 80079d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e4      	bne.n	80079ae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3308      	adds	r3, #8
 80079ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	623b      	str	r3, [r7, #32]
   return(result);
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	f023 0301 	bic.w	r3, r3, #1
 80079fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3308      	adds	r3, #8
 8007a04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a08:	633a      	str	r2, [r7, #48]	; 0x30
 8007a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e3      	bne.n	80079e4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f023 0310 	bic.w	r3, r3, #16
 8007a44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a52:	61fb      	str	r3, [r7, #28]
 8007a54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	69b9      	ldr	r1, [r7, #24]
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e4      	bne.n	8007a30 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f866 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a78:	e03f      	b.n	8007afa <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00e      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x56c>
 8007a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d008      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f85d 	bl	8007b5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aa2:	e02d      	b.n	8007b00 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00e      	beq.n	8007ace <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d008      	beq.n	8007ace <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01c      	beq.n	8007afe <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
    }
    return;
 8007acc:	e017      	b.n	8007afe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d012      	beq.n	8007b00 <HAL_UART_IRQHandler+0x5c8>
 8007ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00c      	beq.n	8007b00 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fee7 	bl	80088ba <UART_EndTransmit_IT>
    return;
 8007aec:	e008      	b.n	8007b00 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007aee:	bf00      	nop
 8007af0:	e006      	b.n	8007b00 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007af2:	bf00      	nop
 8007af4:	e004      	b.n	8007b00 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007af6:	bf00      	nop
 8007af8:	e002      	b.n	8007b00 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007afa:	bf00      	nop
 8007afc:	e000      	b.n	8007b00 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007afe:	bf00      	nop
  }

}
 8007b00:	37e8      	adds	r7, #232	; 0xe8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop

08007b08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	431a      	orrs	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4ba6      	ldr	r3, [pc, #664]	; (8007e34 <UART_SetConfig+0x2c4>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6812      	ldr	r2, [r2, #0]
 8007ba2:	6979      	ldr	r1, [r7, #20]
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a94      	ldr	r2, [pc, #592]	; (8007e38 <UART_SetConfig+0x2c8>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d120      	bne.n	8007c2e <UART_SetConfig+0xbe>
 8007bec:	4b93      	ldr	r3, [pc, #588]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d816      	bhi.n	8007c28 <UART_SetConfig+0xb8>
 8007bfa:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <UART_SetConfig+0x90>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c11 	.word	0x08007c11
 8007c04:	08007c1d 	.word	0x08007c1d
 8007c08:	08007c17 	.word	0x08007c17
 8007c0c:	08007c23 	.word	0x08007c23
 8007c10:	2301      	movs	r3, #1
 8007c12:	77fb      	strb	r3, [r7, #31]
 8007c14:	e150      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c16:	2302      	movs	r3, #2
 8007c18:	77fb      	strb	r3, [r7, #31]
 8007c1a:	e14d      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c1c:	2304      	movs	r3, #4
 8007c1e:	77fb      	strb	r3, [r7, #31]
 8007c20:	e14a      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c22:	2308      	movs	r3, #8
 8007c24:	77fb      	strb	r3, [r7, #31]
 8007c26:	e147      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c28:	2310      	movs	r3, #16
 8007c2a:	77fb      	strb	r3, [r7, #31]
 8007c2c:	e144      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a83      	ldr	r2, [pc, #524]	; (8007e40 <UART_SetConfig+0x2d0>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d132      	bne.n	8007c9e <UART_SetConfig+0x12e>
 8007c38:	4b80      	ldr	r3, [pc, #512]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3e:	f003 030c 	and.w	r3, r3, #12
 8007c42:	2b0c      	cmp	r3, #12
 8007c44:	d828      	bhi.n	8007c98 <UART_SetConfig+0x128>
 8007c46:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <UART_SetConfig+0xdc>)
 8007c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4c:	08007c81 	.word	0x08007c81
 8007c50:	08007c99 	.word	0x08007c99
 8007c54:	08007c99 	.word	0x08007c99
 8007c58:	08007c99 	.word	0x08007c99
 8007c5c:	08007c8d 	.word	0x08007c8d
 8007c60:	08007c99 	.word	0x08007c99
 8007c64:	08007c99 	.word	0x08007c99
 8007c68:	08007c99 	.word	0x08007c99
 8007c6c:	08007c87 	.word	0x08007c87
 8007c70:	08007c99 	.word	0x08007c99
 8007c74:	08007c99 	.word	0x08007c99
 8007c78:	08007c99 	.word	0x08007c99
 8007c7c:	08007c93 	.word	0x08007c93
 8007c80:	2300      	movs	r3, #0
 8007c82:	77fb      	strb	r3, [r7, #31]
 8007c84:	e118      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c86:	2302      	movs	r3, #2
 8007c88:	77fb      	strb	r3, [r7, #31]
 8007c8a:	e115      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c8c:	2304      	movs	r3, #4
 8007c8e:	77fb      	strb	r3, [r7, #31]
 8007c90:	e112      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c92:	2308      	movs	r3, #8
 8007c94:	77fb      	strb	r3, [r7, #31]
 8007c96:	e10f      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c98:	2310      	movs	r3, #16
 8007c9a:	77fb      	strb	r3, [r7, #31]
 8007c9c:	e10c      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a68      	ldr	r2, [pc, #416]	; (8007e44 <UART_SetConfig+0x2d4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d120      	bne.n	8007cea <UART_SetConfig+0x17a>
 8007ca8:	4b64      	ldr	r3, [pc, #400]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cb2:	2b30      	cmp	r3, #48	; 0x30
 8007cb4:	d013      	beq.n	8007cde <UART_SetConfig+0x16e>
 8007cb6:	2b30      	cmp	r3, #48	; 0x30
 8007cb8:	d814      	bhi.n	8007ce4 <UART_SetConfig+0x174>
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	d009      	beq.n	8007cd2 <UART_SetConfig+0x162>
 8007cbe:	2b20      	cmp	r3, #32
 8007cc0:	d810      	bhi.n	8007ce4 <UART_SetConfig+0x174>
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <UART_SetConfig+0x15c>
 8007cc6:	2b10      	cmp	r3, #16
 8007cc8:	d006      	beq.n	8007cd8 <UART_SetConfig+0x168>
 8007cca:	e00b      	b.n	8007ce4 <UART_SetConfig+0x174>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	77fb      	strb	r3, [r7, #31]
 8007cd0:	e0f2      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	77fb      	strb	r3, [r7, #31]
 8007cd6:	e0ef      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007cd8:	2304      	movs	r3, #4
 8007cda:	77fb      	strb	r3, [r7, #31]
 8007cdc:	e0ec      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007cde:	2308      	movs	r3, #8
 8007ce0:	77fb      	strb	r3, [r7, #31]
 8007ce2:	e0e9      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	77fb      	strb	r3, [r7, #31]
 8007ce8:	e0e6      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a56      	ldr	r2, [pc, #344]	; (8007e48 <UART_SetConfig+0x2d8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d120      	bne.n	8007d36 <UART_SetConfig+0x1c6>
 8007cf4:	4b51      	ldr	r3, [pc, #324]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8007d00:	d013      	beq.n	8007d2a <UART_SetConfig+0x1ba>
 8007d02:	2bc0      	cmp	r3, #192	; 0xc0
 8007d04:	d814      	bhi.n	8007d30 <UART_SetConfig+0x1c0>
 8007d06:	2b80      	cmp	r3, #128	; 0x80
 8007d08:	d009      	beq.n	8007d1e <UART_SetConfig+0x1ae>
 8007d0a:	2b80      	cmp	r3, #128	; 0x80
 8007d0c:	d810      	bhi.n	8007d30 <UART_SetConfig+0x1c0>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <UART_SetConfig+0x1a8>
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	d006      	beq.n	8007d24 <UART_SetConfig+0x1b4>
 8007d16:	e00b      	b.n	8007d30 <UART_SetConfig+0x1c0>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	77fb      	strb	r3, [r7, #31]
 8007d1c:	e0cc      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	77fb      	strb	r3, [r7, #31]
 8007d22:	e0c9      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d24:	2304      	movs	r3, #4
 8007d26:	77fb      	strb	r3, [r7, #31]
 8007d28:	e0c6      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d2a:	2308      	movs	r3, #8
 8007d2c:	77fb      	strb	r3, [r7, #31]
 8007d2e:	e0c3      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d30:	2310      	movs	r3, #16
 8007d32:	77fb      	strb	r3, [r7, #31]
 8007d34:	e0c0      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a44      	ldr	r2, [pc, #272]	; (8007e4c <UART_SetConfig+0x2dc>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d125      	bne.n	8007d8c <UART_SetConfig+0x21c>
 8007d40:	4b3e      	ldr	r3, [pc, #248]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d4e:	d017      	beq.n	8007d80 <UART_SetConfig+0x210>
 8007d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d54:	d817      	bhi.n	8007d86 <UART_SetConfig+0x216>
 8007d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d5a:	d00b      	beq.n	8007d74 <UART_SetConfig+0x204>
 8007d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d60:	d811      	bhi.n	8007d86 <UART_SetConfig+0x216>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <UART_SetConfig+0x1fe>
 8007d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6a:	d006      	beq.n	8007d7a <UART_SetConfig+0x20a>
 8007d6c:	e00b      	b.n	8007d86 <UART_SetConfig+0x216>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	77fb      	strb	r3, [r7, #31]
 8007d72:	e0a1      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d74:	2302      	movs	r3, #2
 8007d76:	77fb      	strb	r3, [r7, #31]
 8007d78:	e09e      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d7a:	2304      	movs	r3, #4
 8007d7c:	77fb      	strb	r3, [r7, #31]
 8007d7e:	e09b      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d80:	2308      	movs	r3, #8
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e098      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d86:	2310      	movs	r3, #16
 8007d88:	77fb      	strb	r3, [r7, #31]
 8007d8a:	e095      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a2f      	ldr	r2, [pc, #188]	; (8007e50 <UART_SetConfig+0x2e0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d125      	bne.n	8007de2 <UART_SetConfig+0x272>
 8007d96:	4b29      	ldr	r3, [pc, #164]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007da0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007da4:	d017      	beq.n	8007dd6 <UART_SetConfig+0x266>
 8007da6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007daa:	d817      	bhi.n	8007ddc <UART_SetConfig+0x26c>
 8007dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007db0:	d00b      	beq.n	8007dca <UART_SetConfig+0x25a>
 8007db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007db6:	d811      	bhi.n	8007ddc <UART_SetConfig+0x26c>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <UART_SetConfig+0x254>
 8007dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc0:	d006      	beq.n	8007dd0 <UART_SetConfig+0x260>
 8007dc2:	e00b      	b.n	8007ddc <UART_SetConfig+0x26c>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	77fb      	strb	r3, [r7, #31]
 8007dc8:	e076      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007dca:	2302      	movs	r3, #2
 8007dcc:	77fb      	strb	r3, [r7, #31]
 8007dce:	e073      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007dd0:	2304      	movs	r3, #4
 8007dd2:	77fb      	strb	r3, [r7, #31]
 8007dd4:	e070      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007dd6:	2308      	movs	r3, #8
 8007dd8:	77fb      	strb	r3, [r7, #31]
 8007dda:	e06d      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007ddc:	2310      	movs	r3, #16
 8007dde:	77fb      	strb	r3, [r7, #31]
 8007de0:	e06a      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a1b      	ldr	r2, [pc, #108]	; (8007e54 <UART_SetConfig+0x2e4>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d138      	bne.n	8007e5e <UART_SetConfig+0x2ee>
 8007dec:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007df6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dfa:	d017      	beq.n	8007e2c <UART_SetConfig+0x2bc>
 8007dfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e00:	d82a      	bhi.n	8007e58 <UART_SetConfig+0x2e8>
 8007e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e06:	d00b      	beq.n	8007e20 <UART_SetConfig+0x2b0>
 8007e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e0c:	d824      	bhi.n	8007e58 <UART_SetConfig+0x2e8>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <UART_SetConfig+0x2aa>
 8007e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e16:	d006      	beq.n	8007e26 <UART_SetConfig+0x2b6>
 8007e18:	e01e      	b.n	8007e58 <UART_SetConfig+0x2e8>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	77fb      	strb	r3, [r7, #31]
 8007e1e:	e04b      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007e20:	2302      	movs	r3, #2
 8007e22:	77fb      	strb	r3, [r7, #31]
 8007e24:	e048      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007e26:	2304      	movs	r3, #4
 8007e28:	77fb      	strb	r3, [r7, #31]
 8007e2a:	e045      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007e2c:	2308      	movs	r3, #8
 8007e2e:	77fb      	strb	r3, [r7, #31]
 8007e30:	e042      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007e32:	bf00      	nop
 8007e34:	efff69f3 	.word	0xefff69f3
 8007e38:	40011000 	.word	0x40011000
 8007e3c:	40023800 	.word	0x40023800
 8007e40:	40004400 	.word	0x40004400
 8007e44:	40004800 	.word	0x40004800
 8007e48:	40004c00 	.word	0x40004c00
 8007e4c:	40005000 	.word	0x40005000
 8007e50:	40011400 	.word	0x40011400
 8007e54:	40007800 	.word	0x40007800
 8007e58:	2310      	movs	r3, #16
 8007e5a:	77fb      	strb	r3, [r7, #31]
 8007e5c:	e02c      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a72      	ldr	r2, [pc, #456]	; (800802c <UART_SetConfig+0x4bc>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d125      	bne.n	8007eb4 <UART_SetConfig+0x344>
 8007e68:	4b71      	ldr	r3, [pc, #452]	; (8008030 <UART_SetConfig+0x4c0>)
 8007e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e76:	d017      	beq.n	8007ea8 <UART_SetConfig+0x338>
 8007e78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e7c:	d817      	bhi.n	8007eae <UART_SetConfig+0x33e>
 8007e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e82:	d00b      	beq.n	8007e9c <UART_SetConfig+0x32c>
 8007e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e88:	d811      	bhi.n	8007eae <UART_SetConfig+0x33e>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <UART_SetConfig+0x326>
 8007e8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e92:	d006      	beq.n	8007ea2 <UART_SetConfig+0x332>
 8007e94:	e00b      	b.n	8007eae <UART_SetConfig+0x33e>
 8007e96:	2300      	movs	r3, #0
 8007e98:	77fb      	strb	r3, [r7, #31]
 8007e9a:	e00d      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	77fb      	strb	r3, [r7, #31]
 8007ea0:	e00a      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007ea2:	2304      	movs	r3, #4
 8007ea4:	77fb      	strb	r3, [r7, #31]
 8007ea6:	e007      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007ea8:	2308      	movs	r3, #8
 8007eaa:	77fb      	strb	r3, [r7, #31]
 8007eac:	e004      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007eae:	2310      	movs	r3, #16
 8007eb0:	77fb      	strb	r3, [r7, #31]
 8007eb2:	e001      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007eb4:	2310      	movs	r3, #16
 8007eb6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec0:	d15b      	bne.n	8007f7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007ec2:	7ffb      	ldrb	r3, [r7, #31]
 8007ec4:	2b08      	cmp	r3, #8
 8007ec6:	d828      	bhi.n	8007f1a <UART_SetConfig+0x3aa>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <UART_SetConfig+0x360>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007ef5 	.word	0x08007ef5
 8007ed4:	08007efd 	.word	0x08007efd
 8007ed8:	08007f05 	.word	0x08007f05
 8007edc:	08007f1b 	.word	0x08007f1b
 8007ee0:	08007f0b 	.word	0x08007f0b
 8007ee4:	08007f1b 	.word	0x08007f1b
 8007ee8:	08007f1b 	.word	0x08007f1b
 8007eec:	08007f1b 	.word	0x08007f1b
 8007ef0:	08007f13 	.word	0x08007f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ef4:	f7fd fc76 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8007ef8:	61b8      	str	r0, [r7, #24]
        break;
 8007efa:	e013      	b.n	8007f24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007efc:	f7fd fc86 	bl	800580c <HAL_RCC_GetPCLK2Freq>
 8007f00:	61b8      	str	r0, [r7, #24]
        break;
 8007f02:	e00f      	b.n	8007f24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f04:	4b4b      	ldr	r3, [pc, #300]	; (8008034 <UART_SetConfig+0x4c4>)
 8007f06:	61bb      	str	r3, [r7, #24]
        break;
 8007f08:	e00c      	b.n	8007f24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f0a:	f7fd fb59 	bl	80055c0 <HAL_RCC_GetSysClockFreq>
 8007f0e:	61b8      	str	r0, [r7, #24]
        break;
 8007f10:	e008      	b.n	8007f24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f16:	61bb      	str	r3, [r7, #24]
        break;
 8007f18:	e004      	b.n	8007f24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	77bb      	strb	r3, [r7, #30]
        break;
 8007f22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d074      	beq.n	8008014 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	005a      	lsls	r2, r3, #1
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	085b      	lsrs	r3, r3, #1
 8007f34:	441a      	add	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	2b0f      	cmp	r3, #15
 8007f44:	d916      	bls.n	8007f74 <UART_SetConfig+0x404>
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f4c:	d212      	bcs.n	8007f74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f023 030f 	bic.w	r3, r3, #15
 8007f56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	085b      	lsrs	r3, r3, #1
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	89fb      	ldrh	r3, [r7, #14]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	89fa      	ldrh	r2, [r7, #14]
 8007f70:	60da      	str	r2, [r3, #12]
 8007f72:	e04f      	b.n	8008014 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	77bb      	strb	r3, [r7, #30]
 8007f78:	e04c      	b.n	8008014 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f7a:	7ffb      	ldrb	r3, [r7, #31]
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d828      	bhi.n	8007fd2 <UART_SetConfig+0x462>
 8007f80:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0x418>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fb5 	.word	0x08007fb5
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	08007fd3 	.word	0x08007fd3
 8007f98:	08007fc3 	.word	0x08007fc3
 8007f9c:	08007fd3 	.word	0x08007fd3
 8007fa0:	08007fd3 	.word	0x08007fd3
 8007fa4:	08007fd3 	.word	0x08007fd3
 8007fa8:	08007fcb 	.word	0x08007fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fac:	f7fd fc1a 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8007fb0:	61b8      	str	r0, [r7, #24]
        break;
 8007fb2:	e013      	b.n	8007fdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fb4:	f7fd fc2a 	bl	800580c <HAL_RCC_GetPCLK2Freq>
 8007fb8:	61b8      	str	r0, [r7, #24]
        break;
 8007fba:	e00f      	b.n	8007fdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fbc:	4b1d      	ldr	r3, [pc, #116]	; (8008034 <UART_SetConfig+0x4c4>)
 8007fbe:	61bb      	str	r3, [r7, #24]
        break;
 8007fc0:	e00c      	b.n	8007fdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fc2:	f7fd fafd 	bl	80055c0 <HAL_RCC_GetSysClockFreq>
 8007fc6:	61b8      	str	r0, [r7, #24]
        break;
 8007fc8:	e008      	b.n	8007fdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fce:	61bb      	str	r3, [r7, #24]
        break;
 8007fd0:	e004      	b.n	8007fdc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	77bb      	strb	r3, [r7, #30]
        break;
 8007fda:	bf00      	nop
    }

    if (pclk != 0U)
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d018      	beq.n	8008014 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	085a      	lsrs	r2, r3, #1
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	441a      	add	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	2b0f      	cmp	r3, #15
 8007ffa:	d909      	bls.n	8008010 <UART_SetConfig+0x4a0>
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008002:	d205      	bcs.n	8008010 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	b29a      	uxth	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60da      	str	r2, [r3, #12]
 800800e:	e001      	b.n	8008014 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008020:	7fbb      	ldrb	r3, [r7, #30]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3720      	adds	r7, #32
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	40007c00 	.word	0x40007c00
 8008030:	40023800 	.word	0x40023800
 8008034:	00f42400 	.word	0x00f42400

08008038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00a      	beq.n	8008062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	f003 0308 	and.w	r3, r3, #8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	f003 0310 	and.w	r3, r3, #16
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00a      	beq.n	80080ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01a      	beq.n	800814e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008136:	d10a      	bne.n	800814e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00a      	beq.n	8008170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	605a      	str	r2, [r3, #4]
  }
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af02      	add	r7, sp, #8
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800818c:	f7fb ff1c 	bl	8003fc8 <HAL_GetTick>
 8008190:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b08      	cmp	r3, #8
 800819e:	d10e      	bne.n	80081be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f831 	bl	8008216 <UART_WaitOnFlagUntilTimeout>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e027      	b.n	800820e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d10e      	bne.n	80081ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f81b 	bl	8008216 <UART_WaitOnFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e011      	b.n	800820e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b09c      	sub	sp, #112	; 0x70
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	603b      	str	r3, [r7, #0]
 8008222:	4613      	mov	r3, r2
 8008224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008226:	e0a7      	b.n	8008378 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800822a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822e:	f000 80a3 	beq.w	8008378 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008232:	f7fb fec9 	bl	8003fc8 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800823e:	429a      	cmp	r2, r3
 8008240:	d302      	bcc.n	8008248 <UART_WaitOnFlagUntilTimeout+0x32>
 8008242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008244:	2b00      	cmp	r3, #0
 8008246:	d13f      	bne.n	80082c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008258:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800825c:	667b      	str	r3, [r7, #100]	; 0x64
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008268:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800826c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e6      	bne.n	8008248 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3308      	adds	r3, #8
 8008280:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008284:	e853 3f00 	ldrex	r3, [r3]
 8008288:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828c:	f023 0301 	bic.w	r3, r3, #1
 8008290:	663b      	str	r3, [r7, #96]	; 0x60
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3308      	adds	r3, #8
 8008298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800829a:	64ba      	str	r2, [r7, #72]	; 0x48
 800829c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e5      	bne.n	800827a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e068      	b.n	800839a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d050      	beq.n	8008378 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e4:	d148      	bne.n	8008378 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008304:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
 8008310:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800831c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e6      	bne.n	80082f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	613b      	str	r3, [r7, #16]
   return(result);
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f023 0301 	bic.w	r3, r3, #1
 8008338:	66bb      	str	r3, [r7, #104]	; 0x68
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008342:	623a      	str	r2, [r7, #32]
 8008344:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	69f9      	ldr	r1, [r7, #28]
 8008348:	6a3a      	ldr	r2, [r7, #32]
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e5      	bne.n	8008322 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2220      	movs	r2, #32
 800835a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2220      	movs	r2, #32
 8008360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2220      	movs	r2, #32
 8008368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e010      	b.n	800839a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	69da      	ldr	r2, [r3, #28]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	4013      	ands	r3, r2
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	429a      	cmp	r2, r3
 8008386:	bf0c      	ite	eq
 8008388:	2301      	moveq	r3, #1
 800838a:	2300      	movne	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	429a      	cmp	r2, r3
 8008394:	f43f af48 	beq.w	8008228 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3770      	adds	r7, #112	; 0x70
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b096      	sub	sp, #88	; 0x58
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	4613      	mov	r3, r2
 80083b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	88fa      	ldrh	r2, [r7, #6]
 80083bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2222      	movs	r2, #34	; 0x22
 80083cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d028      	beq.n	800842a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083dc:	4a3e      	ldr	r2, [pc, #248]	; (80084d8 <UART_Start_Receive_DMA+0x134>)
 80083de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083e4:	4a3d      	ldr	r2, [pc, #244]	; (80084dc <UART_Start_Receive_DMA+0x138>)
 80083e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ec:	4a3c      	ldr	r2, [pc, #240]	; (80084e0 <UART_Start_Receive_DMA+0x13c>)
 80083ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083f4:	2200      	movs	r2, #0
 80083f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3324      	adds	r3, #36	; 0x24
 8008402:	4619      	mov	r1, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008408:	461a      	mov	r2, r3
 800840a:	88fb      	ldrh	r3, [r7, #6]
 800840c:	f7fb ffcc 	bl	80043a8 <HAL_DMA_Start_IT>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d009      	beq.n	800842a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2210      	movs	r2, #16
 800841a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2220      	movs	r2, #32
 8008422:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e051      	b.n	80084ce <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d018      	beq.n	8008464 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008446:	657b      	str	r3, [r7, #84]	; 0x54
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
 800844e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008450:	64bb      	str	r3, [r7, #72]	; 0x48
 8008452:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800845e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e6      	bne.n	8008432 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3308      	adds	r3, #8
 800846a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	f043 0301 	orr.w	r3, r3, #1
 800847a:	653b      	str	r3, [r7, #80]	; 0x50
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3308      	adds	r3, #8
 8008482:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008484:	637a      	str	r2, [r7, #52]	; 0x34
 8008486:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800848a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e5      	bne.n	8008464 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	613b      	str	r3, [r7, #16]
   return(result);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3308      	adds	r3, #8
 80084b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084b8:	623a      	str	r2, [r7, #32]
 80084ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	69f9      	ldr	r1, [r7, #28]
 80084be:	6a3a      	ldr	r2, [r7, #32]
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e5      	bne.n	8008498 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3758      	adds	r7, #88	; 0x58
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	080086ab 	.word	0x080086ab
 80084dc:	080087d3 	.word	0x080087d3
 80084e0:	08008811 	.word	0x08008811

080084e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b089      	sub	sp, #36	; 0x24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008500:	61fb      	str	r3, [r7, #28]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	61bb      	str	r3, [r7, #24]
 800850c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6979      	ldr	r1, [r7, #20]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	613b      	str	r3, [r7, #16]
   return(result);
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e6      	bne.n	80084ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008524:	bf00      	nop
 8008526:	3724      	adds	r7, #36	; 0x24
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b095      	sub	sp, #84	; 0x54
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800854c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008556:	643b      	str	r3, [r7, #64]	; 0x40
 8008558:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800855c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e6      	bne.n	8008538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	61fb      	str	r3, [r7, #28]
   return(result);
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	f023 0301 	bic.w	r3, r3, #1
 8008580:	64bb      	str	r3, [r7, #72]	; 0x48
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800858a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800858c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e5      	bne.n	800856a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d118      	bne.n	80085d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	e853 3f00 	ldrex	r3, [r3]
 80085b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f023 0310 	bic.w	r3, r3, #16
 80085ba:	647b      	str	r3, [r7, #68]	; 0x44
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	461a      	mov	r2, r3
 80085c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c4:	61bb      	str	r3, [r7, #24]
 80085c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c8:	6979      	ldr	r1, [r7, #20]
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	e841 2300 	strex	r3, r2, [r1]
 80085d0:	613b      	str	r3, [r7, #16]
   return(result);
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e6      	bne.n	80085a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2220      	movs	r2, #32
 80085dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 80085ec:	bf00      	nop
 80085ee:	3754      	adds	r7, #84	; 0x54
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b090      	sub	sp, #64	; 0x40
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008604:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800860e:	d037      	beq.n	8008680 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008612:	2200      	movs	r2, #0
 8008614:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3308      	adds	r3, #8
 800861e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	e853 3f00 	ldrex	r3, [r3]
 8008626:	623b      	str	r3, [r7, #32]
   return(result);
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800862e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3308      	adds	r3, #8
 8008636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008638:	633a      	str	r2, [r7, #48]	; 0x30
 800863a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800863e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008640:	e841 2300 	strex	r3, r2, [r1]
 8008644:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e5      	bne.n	8008618 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800864c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	60fb      	str	r3, [r7, #12]
   return(result);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008660:	637b      	str	r3, [r7, #52]	; 0x34
 8008662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866a:	61fb      	str	r3, [r7, #28]
 800866c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	69b9      	ldr	r1, [r7, #24]
 8008670:	69fa      	ldr	r2, [r7, #28]
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	617b      	str	r3, [r7, #20]
   return(result);
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e6      	bne.n	800864c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800867e:	e002      	b.n	8008686 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008680:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008682:	f7fa f9b5 	bl	80029f0 <HAL_UART_TxCpltCallback>
}
 8008686:	bf00      	nop
 8008688:	3740      	adds	r7, #64	; 0x40
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff fa33 	bl	8007b08 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b09c      	sub	sp, #112	; 0x70
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c0:	d071      	beq.n	80087a6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80086c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086de:	66bb      	str	r3, [r7, #104]	; 0x68
 80086e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80086ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e6      	bne.n	80086ca <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3308      	adds	r3, #8
 8008702:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800870c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	667b      	str	r3, [r7, #100]	; 0x64
 8008714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3308      	adds	r3, #8
 800871a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800871c:	647a      	str	r2, [r7, #68]	; 0x44
 800871e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800872a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e5      	bne.n	80086fc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3308      	adds	r3, #8
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	623b      	str	r3, [r7, #32]
   return(result);
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008746:	663b      	str	r3, [r7, #96]	; 0x60
 8008748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3308      	adds	r3, #8
 800874e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008750:	633a      	str	r2, [r7, #48]	; 0x30
 8008752:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e5      	bne.n	8008730 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008766:	2220      	movs	r2, #32
 8008768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800876c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800876e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008770:	2b01      	cmp	r3, #1
 8008772:	d118      	bne.n	80087a6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	60fb      	str	r3, [r7, #12]
   return(result);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f023 0310 	bic.w	r3, r3, #16
 8008788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800878a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008792:	61fb      	str	r3, [r7, #28]
 8008794:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	69b9      	ldr	r1, [r7, #24]
 8008798:	69fa      	ldr	r2, [r7, #28]
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	617b      	str	r3, [r7, #20]
   return(result);
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e6      	bne.n	8008774 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a8:	2200      	movs	r2, #0
 80087aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d107      	bne.n	80087c4 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80087ba:	4619      	mov	r1, r3
 80087bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087be:	f7ff f9c1 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087c2:	e002      	b.n	80087ca <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80087c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087c6:	f7fa f925 	bl	8002a14 <HAL_UART_RxCpltCallback>
}
 80087ca:	bf00      	nop
 80087cc:	3770      	adds	r7, #112	; 0x70
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2201      	movs	r2, #1
 80087e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d109      	bne.n	8008802 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80087f4:	085b      	lsrs	r3, r3, #1
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	4619      	mov	r1, r3
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7ff f9a2 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008800:	e002      	b.n	8008808 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff f98a 	bl	8007b1c <HAL_UART_RxHalfCpltCallback>
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008822:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800882a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008836:	2b80      	cmp	r3, #128	; 0x80
 8008838:	d109      	bne.n	800884e <UART_DMAError+0x3e>
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	2b21      	cmp	r3, #33	; 0x21
 800883e:	d106      	bne.n	800884e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2200      	movs	r2, #0
 8008844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008848:	6978      	ldr	r0, [r7, #20]
 800884a:	f7ff fe4b 	bl	80084e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008858:	2b40      	cmp	r3, #64	; 0x40
 800885a:	d109      	bne.n	8008870 <UART_DMAError+0x60>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b22      	cmp	r3, #34	; 0x22
 8008860:	d106      	bne.n	8008870 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2200      	movs	r2, #0
 8008866:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800886a:	6978      	ldr	r0, [r7, #20]
 800886c:	f7ff fe60 	bl	8008530 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008876:	f043 0210 	orr.w	r2, r3, #16
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008880:	6978      	ldr	r0, [r7, #20]
 8008882:	f7ff f955 	bl	8007b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008886:	bf00      	nop
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f7ff f93f 	bl	8007b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b2:	bf00      	nop
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b088      	sub	sp, #32
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088d6:	61fb      	str	r3, [r7, #28]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	61bb      	str	r3, [r7, #24]
 80088e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6979      	ldr	r1, [r7, #20]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	613b      	str	r3, [r7, #16]
   return(result);
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e6      	bne.n	80088c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2220      	movs	r2, #32
 80088f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7fa f875 	bl	80029f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008906:	bf00      	nop
 8008908:	3720      	adds	r7, #32
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e054      	b.n	80089d2 <HAL_RS485Ex_Init+0xc2>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800892c:	2b00      	cmp	r3, #0
 800892e:	d106      	bne.n	800893e <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f7fb f89d 	bl	8003a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2224      	movs	r2, #36	; 0x24
 8008942:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0201 	bic.w	r2, r2, #1
 8008952:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f7ff f90b 	bl	8007b70 <UART_SetConfig>
 800895a:	4603      	mov	r3, r0
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e036      	b.n	80089d2 <HAL_RS485Ex_Init+0xc2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f7ff fb63 	bl	8008038 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008980:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	430a      	orrs	r2, r1
 8008994:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	055b      	lsls	r3, r3, #21
 800899a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	041b      	lsls	r3, r3, #16
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	4b0b      	ldr	r3, [pc, #44]	; (80089dc <HAL_RS485Ex_Init+0xcc>)
 80089ae:	4013      	ands	r3, r2
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	6812      	ldr	r2, [r2, #0]
 80089b4:	6979      	ldr	r1, [r7, #20]
 80089b6:	430b      	orrs	r3, r1
 80089b8:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f042 0201 	orr.w	r2, r2, #1
 80089c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f7ff fbd6 	bl	800817c <UART_CheckIdleState>
 80089d0:	4603      	mov	r3, r0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3718      	adds	r7, #24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	fc00ffff 	.word	0xfc00ffff

080089e0 <__cxa_pure_virtual>:
 80089e0:	b508      	push	{r3, lr}
 80089e2:	f000 f80d 	bl	8008a00 <_ZSt9terminatev>

080089e6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80089e6:	b508      	push	{r3, lr}
 80089e8:	4780      	blx	r0
 80089ea:	f000 f80e 	bl	8008a0a <abort>
	...

080089f0 <_ZSt13get_terminatev>:
 80089f0:	4b02      	ldr	r3, [pc, #8]	; (80089fc <_ZSt13get_terminatev+0xc>)
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	f3bf 8f5b 	dmb	ish
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	2000000c 	.word	0x2000000c

08008a00 <_ZSt9terminatev>:
 8008a00:	b508      	push	{r3, lr}
 8008a02:	f7ff fff5 	bl	80089f0 <_ZSt13get_terminatev>
 8008a06:	f7ff ffee 	bl	80089e6 <_ZN10__cxxabiv111__terminateEPFvvE>

08008a0a <abort>:
 8008a0a:	b508      	push	{r3, lr}
 8008a0c:	2006      	movs	r0, #6
 8008a0e:	f000 f873 	bl	8008af8 <raise>
 8008a12:	2001      	movs	r0, #1
 8008a14:	f7fb fa0c 	bl	8003e30 <_exit>

08008a18 <__errno>:
 8008a18:	4b01      	ldr	r3, [pc, #4]	; (8008a20 <__errno+0x8>)
 8008a1a:	6818      	ldr	r0, [r3, #0]
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	20000010 	.word	0x20000010

08008a24 <__libc_init_array>:
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	4d0d      	ldr	r5, [pc, #52]	; (8008a5c <__libc_init_array+0x38>)
 8008a28:	4c0d      	ldr	r4, [pc, #52]	; (8008a60 <__libc_init_array+0x3c>)
 8008a2a:	1b64      	subs	r4, r4, r5
 8008a2c:	10a4      	asrs	r4, r4, #2
 8008a2e:	2600      	movs	r6, #0
 8008a30:	42a6      	cmp	r6, r4
 8008a32:	d109      	bne.n	8008a48 <__libc_init_array+0x24>
 8008a34:	4d0b      	ldr	r5, [pc, #44]	; (8008a64 <__libc_init_array+0x40>)
 8008a36:	4c0c      	ldr	r4, [pc, #48]	; (8008a68 <__libc_init_array+0x44>)
 8008a38:	f000 f9b0 	bl	8008d9c <_init>
 8008a3c:	1b64      	subs	r4, r4, r5
 8008a3e:	10a4      	asrs	r4, r4, #2
 8008a40:	2600      	movs	r6, #0
 8008a42:	42a6      	cmp	r6, r4
 8008a44:	d105      	bne.n	8008a52 <__libc_init_array+0x2e>
 8008a46:	bd70      	pop	{r4, r5, r6, pc}
 8008a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a4c:	4798      	blx	r3
 8008a4e:	3601      	adds	r6, #1
 8008a50:	e7ee      	b.n	8008a30 <__libc_init_array+0xc>
 8008a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a56:	4798      	blx	r3
 8008a58:	3601      	adds	r6, #1
 8008a5a:	e7f2      	b.n	8008a42 <__libc_init_array+0x1e>
 8008a5c:	08009088 	.word	0x08009088
 8008a60:	08009088 	.word	0x08009088
 8008a64:	08009088 	.word	0x08009088
 8008a68:	08009090 	.word	0x08009090

08008a6c <memcpy>:
 8008a6c:	440a      	add	r2, r1
 8008a6e:	4291      	cmp	r1, r2
 8008a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a74:	d100      	bne.n	8008a78 <memcpy+0xc>
 8008a76:	4770      	bx	lr
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a82:	4291      	cmp	r1, r2
 8008a84:	d1f9      	bne.n	8008a7a <memcpy+0xe>
 8008a86:	bd10      	pop	{r4, pc}

08008a88 <memset>:
 8008a88:	4402      	add	r2, r0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d100      	bne.n	8008a92 <memset+0xa>
 8008a90:	4770      	bx	lr
 8008a92:	f803 1b01 	strb.w	r1, [r3], #1
 8008a96:	e7f9      	b.n	8008a8c <memset+0x4>

08008a98 <realloc>:
 8008a98:	4b02      	ldr	r3, [pc, #8]	; (8008aa4 <realloc+0xc>)
 8008a9a:	460a      	mov	r2, r1
 8008a9c:	4601      	mov	r1, r0
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	f000 b8da 	b.w	8008c58 <_realloc_r>
 8008aa4:	20000010 	.word	0x20000010

08008aa8 <_raise_r>:
 8008aa8:	291f      	cmp	r1, #31
 8008aaa:	b538      	push	{r3, r4, r5, lr}
 8008aac:	4604      	mov	r4, r0
 8008aae:	460d      	mov	r5, r1
 8008ab0:	d904      	bls.n	8008abc <_raise_r+0x14>
 8008ab2:	2316      	movs	r3, #22
 8008ab4:	6003      	str	r3, [r0, #0]
 8008ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008abe:	b112      	cbz	r2, 8008ac6 <_raise_r+0x1e>
 8008ac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ac4:	b94b      	cbnz	r3, 8008ada <_raise_r+0x32>
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 f830 	bl	8008b2c <_getpid_r>
 8008acc:	462a      	mov	r2, r5
 8008ace:	4601      	mov	r1, r0
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ad6:	f000 b817 	b.w	8008b08 <_kill_r>
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d00a      	beq.n	8008af4 <_raise_r+0x4c>
 8008ade:	1c59      	adds	r1, r3, #1
 8008ae0:	d103      	bne.n	8008aea <_raise_r+0x42>
 8008ae2:	2316      	movs	r3, #22
 8008ae4:	6003      	str	r3, [r0, #0]
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	e7e7      	b.n	8008aba <_raise_r+0x12>
 8008aea:	2400      	movs	r4, #0
 8008aec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008af0:	4628      	mov	r0, r5
 8008af2:	4798      	blx	r3
 8008af4:	2000      	movs	r0, #0
 8008af6:	e7e0      	b.n	8008aba <_raise_r+0x12>

08008af8 <raise>:
 8008af8:	4b02      	ldr	r3, [pc, #8]	; (8008b04 <raise+0xc>)
 8008afa:	4601      	mov	r1, r0
 8008afc:	6818      	ldr	r0, [r3, #0]
 8008afe:	f7ff bfd3 	b.w	8008aa8 <_raise_r>
 8008b02:	bf00      	nop
 8008b04:	20000010 	.word	0x20000010

08008b08 <_kill_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d07      	ldr	r5, [pc, #28]	; (8008b28 <_kill_r+0x20>)
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4608      	mov	r0, r1
 8008b12:	4611      	mov	r1, r2
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	f7fb f97b 	bl	8003e10 <_kill>
 8008b1a:	1c43      	adds	r3, r0, #1
 8008b1c:	d102      	bne.n	8008b24 <_kill_r+0x1c>
 8008b1e:	682b      	ldr	r3, [r5, #0]
 8008b20:	b103      	cbz	r3, 8008b24 <_kill_r+0x1c>
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	bd38      	pop	{r3, r4, r5, pc}
 8008b26:	bf00      	nop
 8008b28:	200048f8 	.word	0x200048f8

08008b2c <_getpid_r>:
 8008b2c:	f7fb b968 	b.w	8003e00 <_getpid>

08008b30 <sbrk_aligned>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	4e0e      	ldr	r6, [pc, #56]	; (8008b6c <sbrk_aligned+0x3c>)
 8008b34:	460c      	mov	r4, r1
 8008b36:	6831      	ldr	r1, [r6, #0]
 8008b38:	4605      	mov	r5, r0
 8008b3a:	b911      	cbnz	r1, 8008b42 <sbrk_aligned+0x12>
 8008b3c:	f000 f8bc 	bl	8008cb8 <_sbrk_r>
 8008b40:	6030      	str	r0, [r6, #0]
 8008b42:	4621      	mov	r1, r4
 8008b44:	4628      	mov	r0, r5
 8008b46:	f000 f8b7 	bl	8008cb8 <_sbrk_r>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	d00a      	beq.n	8008b64 <sbrk_aligned+0x34>
 8008b4e:	1cc4      	adds	r4, r0, #3
 8008b50:	f024 0403 	bic.w	r4, r4, #3
 8008b54:	42a0      	cmp	r0, r4
 8008b56:	d007      	beq.n	8008b68 <sbrk_aligned+0x38>
 8008b58:	1a21      	subs	r1, r4, r0
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f000 f8ac 	bl	8008cb8 <_sbrk_r>
 8008b60:	3001      	adds	r0, #1
 8008b62:	d101      	bne.n	8008b68 <sbrk_aligned+0x38>
 8008b64:	f04f 34ff 	mov.w	r4, #4294967295
 8008b68:	4620      	mov	r0, r4
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	200048f4 	.word	0x200048f4

08008b70 <_malloc_r>:
 8008b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b74:	1ccd      	adds	r5, r1, #3
 8008b76:	f025 0503 	bic.w	r5, r5, #3
 8008b7a:	3508      	adds	r5, #8
 8008b7c:	2d0c      	cmp	r5, #12
 8008b7e:	bf38      	it	cc
 8008b80:	250c      	movcc	r5, #12
 8008b82:	2d00      	cmp	r5, #0
 8008b84:	4607      	mov	r7, r0
 8008b86:	db01      	blt.n	8008b8c <_malloc_r+0x1c>
 8008b88:	42a9      	cmp	r1, r5
 8008b8a:	d905      	bls.n	8008b98 <_malloc_r+0x28>
 8008b8c:	230c      	movs	r3, #12
 8008b8e:	603b      	str	r3, [r7, #0]
 8008b90:	2600      	movs	r6, #0
 8008b92:	4630      	mov	r0, r6
 8008b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b98:	4e2e      	ldr	r6, [pc, #184]	; (8008c54 <_malloc_r+0xe4>)
 8008b9a:	f000 f89d 	bl	8008cd8 <__malloc_lock>
 8008b9e:	6833      	ldr	r3, [r6, #0]
 8008ba0:	461c      	mov	r4, r3
 8008ba2:	bb34      	cbnz	r4, 8008bf2 <_malloc_r+0x82>
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	f7ff ffc2 	bl	8008b30 <sbrk_aligned>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	4604      	mov	r4, r0
 8008bb0:	d14d      	bne.n	8008c4e <_malloc_r+0xde>
 8008bb2:	6834      	ldr	r4, [r6, #0]
 8008bb4:	4626      	mov	r6, r4
 8008bb6:	2e00      	cmp	r6, #0
 8008bb8:	d140      	bne.n	8008c3c <_malloc_r+0xcc>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	eb04 0803 	add.w	r8, r4, r3
 8008bc4:	f000 f878 	bl	8008cb8 <_sbrk_r>
 8008bc8:	4580      	cmp	r8, r0
 8008bca:	d13a      	bne.n	8008c42 <_malloc_r+0xd2>
 8008bcc:	6821      	ldr	r1, [r4, #0]
 8008bce:	3503      	adds	r5, #3
 8008bd0:	1a6d      	subs	r5, r5, r1
 8008bd2:	f025 0503 	bic.w	r5, r5, #3
 8008bd6:	3508      	adds	r5, #8
 8008bd8:	2d0c      	cmp	r5, #12
 8008bda:	bf38      	it	cc
 8008bdc:	250c      	movcc	r5, #12
 8008bde:	4629      	mov	r1, r5
 8008be0:	4638      	mov	r0, r7
 8008be2:	f7ff ffa5 	bl	8008b30 <sbrk_aligned>
 8008be6:	3001      	adds	r0, #1
 8008be8:	d02b      	beq.n	8008c42 <_malloc_r+0xd2>
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	442b      	add	r3, r5
 8008bee:	6023      	str	r3, [r4, #0]
 8008bf0:	e00e      	b.n	8008c10 <_malloc_r+0xa0>
 8008bf2:	6822      	ldr	r2, [r4, #0]
 8008bf4:	1b52      	subs	r2, r2, r5
 8008bf6:	d41e      	bmi.n	8008c36 <_malloc_r+0xc6>
 8008bf8:	2a0b      	cmp	r2, #11
 8008bfa:	d916      	bls.n	8008c2a <_malloc_r+0xba>
 8008bfc:	1961      	adds	r1, r4, r5
 8008bfe:	42a3      	cmp	r3, r4
 8008c00:	6025      	str	r5, [r4, #0]
 8008c02:	bf18      	it	ne
 8008c04:	6059      	strne	r1, [r3, #4]
 8008c06:	6863      	ldr	r3, [r4, #4]
 8008c08:	bf08      	it	eq
 8008c0a:	6031      	streq	r1, [r6, #0]
 8008c0c:	5162      	str	r2, [r4, r5]
 8008c0e:	604b      	str	r3, [r1, #4]
 8008c10:	4638      	mov	r0, r7
 8008c12:	f104 060b 	add.w	r6, r4, #11
 8008c16:	f000 f865 	bl	8008ce4 <__malloc_unlock>
 8008c1a:	f026 0607 	bic.w	r6, r6, #7
 8008c1e:	1d23      	adds	r3, r4, #4
 8008c20:	1af2      	subs	r2, r6, r3
 8008c22:	d0b6      	beq.n	8008b92 <_malloc_r+0x22>
 8008c24:	1b9b      	subs	r3, r3, r6
 8008c26:	50a3      	str	r3, [r4, r2]
 8008c28:	e7b3      	b.n	8008b92 <_malloc_r+0x22>
 8008c2a:	6862      	ldr	r2, [r4, #4]
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	bf0c      	ite	eq
 8008c30:	6032      	streq	r2, [r6, #0]
 8008c32:	605a      	strne	r2, [r3, #4]
 8008c34:	e7ec      	b.n	8008c10 <_malloc_r+0xa0>
 8008c36:	4623      	mov	r3, r4
 8008c38:	6864      	ldr	r4, [r4, #4]
 8008c3a:	e7b2      	b.n	8008ba2 <_malloc_r+0x32>
 8008c3c:	4634      	mov	r4, r6
 8008c3e:	6876      	ldr	r6, [r6, #4]
 8008c40:	e7b9      	b.n	8008bb6 <_malloc_r+0x46>
 8008c42:	230c      	movs	r3, #12
 8008c44:	603b      	str	r3, [r7, #0]
 8008c46:	4638      	mov	r0, r7
 8008c48:	f000 f84c 	bl	8008ce4 <__malloc_unlock>
 8008c4c:	e7a1      	b.n	8008b92 <_malloc_r+0x22>
 8008c4e:	6025      	str	r5, [r4, #0]
 8008c50:	e7de      	b.n	8008c10 <_malloc_r+0xa0>
 8008c52:	bf00      	nop
 8008c54:	200048f0 	.word	0x200048f0

08008c58 <_realloc_r>:
 8008c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5c:	4680      	mov	r8, r0
 8008c5e:	4614      	mov	r4, r2
 8008c60:	460e      	mov	r6, r1
 8008c62:	b921      	cbnz	r1, 8008c6e <_realloc_r+0x16>
 8008c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c68:	4611      	mov	r1, r2
 8008c6a:	f7ff bf81 	b.w	8008b70 <_malloc_r>
 8008c6e:	b92a      	cbnz	r2, 8008c7c <_realloc_r+0x24>
 8008c70:	f000 f83e 	bl	8008cf0 <_free_r>
 8008c74:	4625      	mov	r5, r4
 8008c76:	4628      	mov	r0, r5
 8008c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c7c:	f000 f884 	bl	8008d88 <_malloc_usable_size_r>
 8008c80:	4284      	cmp	r4, r0
 8008c82:	4607      	mov	r7, r0
 8008c84:	d802      	bhi.n	8008c8c <_realloc_r+0x34>
 8008c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c8a:	d812      	bhi.n	8008cb2 <_realloc_r+0x5a>
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	4640      	mov	r0, r8
 8008c90:	f7ff ff6e 	bl	8008b70 <_malloc_r>
 8008c94:	4605      	mov	r5, r0
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d0ed      	beq.n	8008c76 <_realloc_r+0x1e>
 8008c9a:	42bc      	cmp	r4, r7
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	bf28      	it	cs
 8008ca2:	463a      	movcs	r2, r7
 8008ca4:	f7ff fee2 	bl	8008a6c <memcpy>
 8008ca8:	4631      	mov	r1, r6
 8008caa:	4640      	mov	r0, r8
 8008cac:	f000 f820 	bl	8008cf0 <_free_r>
 8008cb0:	e7e1      	b.n	8008c76 <_realloc_r+0x1e>
 8008cb2:	4635      	mov	r5, r6
 8008cb4:	e7df      	b.n	8008c76 <_realloc_r+0x1e>
	...

08008cb8 <_sbrk_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d06      	ldr	r5, [pc, #24]	; (8008cd4 <_sbrk_r+0x1c>)
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	f7fb f8be 	bl	8003e44 <_sbrk>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_sbrk_r+0x1a>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_sbrk_r+0x1a>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	200048f8 	.word	0x200048f8

08008cd8 <__malloc_lock>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	; (8008ce0 <__malloc_lock+0x8>)
 8008cda:	f000 b85d 	b.w	8008d98 <__retarget_lock_acquire_recursive>
 8008cde:	bf00      	nop
 8008ce0:	200048fc 	.word	0x200048fc

08008ce4 <__malloc_unlock>:
 8008ce4:	4801      	ldr	r0, [pc, #4]	; (8008cec <__malloc_unlock+0x8>)
 8008ce6:	f000 b858 	b.w	8008d9a <__retarget_lock_release_recursive>
 8008cea:	bf00      	nop
 8008cec:	200048fc 	.word	0x200048fc

08008cf0 <_free_r>:
 8008cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cf2:	2900      	cmp	r1, #0
 8008cf4:	d044      	beq.n	8008d80 <_free_r+0x90>
 8008cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cfa:	9001      	str	r0, [sp, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8008d02:	bfb8      	it	lt
 8008d04:	18e4      	addlt	r4, r4, r3
 8008d06:	f7ff ffe7 	bl	8008cd8 <__malloc_lock>
 8008d0a:	4a1e      	ldr	r2, [pc, #120]	; (8008d84 <_free_r+0x94>)
 8008d0c:	9801      	ldr	r0, [sp, #4]
 8008d0e:	6813      	ldr	r3, [r2, #0]
 8008d10:	b933      	cbnz	r3, 8008d20 <_free_r+0x30>
 8008d12:	6063      	str	r3, [r4, #4]
 8008d14:	6014      	str	r4, [r2, #0]
 8008d16:	b003      	add	sp, #12
 8008d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d1c:	f7ff bfe2 	b.w	8008ce4 <__malloc_unlock>
 8008d20:	42a3      	cmp	r3, r4
 8008d22:	d908      	bls.n	8008d36 <_free_r+0x46>
 8008d24:	6825      	ldr	r5, [r4, #0]
 8008d26:	1961      	adds	r1, r4, r5
 8008d28:	428b      	cmp	r3, r1
 8008d2a:	bf01      	itttt	eq
 8008d2c:	6819      	ldreq	r1, [r3, #0]
 8008d2e:	685b      	ldreq	r3, [r3, #4]
 8008d30:	1949      	addeq	r1, r1, r5
 8008d32:	6021      	streq	r1, [r4, #0]
 8008d34:	e7ed      	b.n	8008d12 <_free_r+0x22>
 8008d36:	461a      	mov	r2, r3
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	b10b      	cbz	r3, 8008d40 <_free_r+0x50>
 8008d3c:	42a3      	cmp	r3, r4
 8008d3e:	d9fa      	bls.n	8008d36 <_free_r+0x46>
 8008d40:	6811      	ldr	r1, [r2, #0]
 8008d42:	1855      	adds	r5, r2, r1
 8008d44:	42a5      	cmp	r5, r4
 8008d46:	d10b      	bne.n	8008d60 <_free_r+0x70>
 8008d48:	6824      	ldr	r4, [r4, #0]
 8008d4a:	4421      	add	r1, r4
 8008d4c:	1854      	adds	r4, r2, r1
 8008d4e:	42a3      	cmp	r3, r4
 8008d50:	6011      	str	r1, [r2, #0]
 8008d52:	d1e0      	bne.n	8008d16 <_free_r+0x26>
 8008d54:	681c      	ldr	r4, [r3, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	6053      	str	r3, [r2, #4]
 8008d5a:	4421      	add	r1, r4
 8008d5c:	6011      	str	r1, [r2, #0]
 8008d5e:	e7da      	b.n	8008d16 <_free_r+0x26>
 8008d60:	d902      	bls.n	8008d68 <_free_r+0x78>
 8008d62:	230c      	movs	r3, #12
 8008d64:	6003      	str	r3, [r0, #0]
 8008d66:	e7d6      	b.n	8008d16 <_free_r+0x26>
 8008d68:	6825      	ldr	r5, [r4, #0]
 8008d6a:	1961      	adds	r1, r4, r5
 8008d6c:	428b      	cmp	r3, r1
 8008d6e:	bf04      	itt	eq
 8008d70:	6819      	ldreq	r1, [r3, #0]
 8008d72:	685b      	ldreq	r3, [r3, #4]
 8008d74:	6063      	str	r3, [r4, #4]
 8008d76:	bf04      	itt	eq
 8008d78:	1949      	addeq	r1, r1, r5
 8008d7a:	6021      	streq	r1, [r4, #0]
 8008d7c:	6054      	str	r4, [r2, #4]
 8008d7e:	e7ca      	b.n	8008d16 <_free_r+0x26>
 8008d80:	b003      	add	sp, #12
 8008d82:	bd30      	pop	{r4, r5, pc}
 8008d84:	200048f0 	.word	0x200048f0

08008d88 <_malloc_usable_size_r>:
 8008d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d8c:	1f18      	subs	r0, r3, #4
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bfbc      	itt	lt
 8008d92:	580b      	ldrlt	r3, [r1, r0]
 8008d94:	18c0      	addlt	r0, r0, r3
 8008d96:	4770      	bx	lr

08008d98 <__retarget_lock_acquire_recursive>:
 8008d98:	4770      	bx	lr

08008d9a <__retarget_lock_release_recursive>:
 8008d9a:	4770      	bx	lr

08008d9c <_init>:
 8008d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9e:	bf00      	nop
 8008da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008da2:	bc08      	pop	{r3}
 8008da4:	469e      	mov	lr, r3
 8008da6:	4770      	bx	lr

08008da8 <_fini>:
 8008da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008daa:	bf00      	nop
 8008dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dae:	bc08      	pop	{r3}
 8008db0:	469e      	mov	lr, r3
 8008db2:	4770      	bx	lr
