
AV_ROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c88  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08008e80  08008e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800914c  0800914c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800914c  0800914c  0001914c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009154  08009154  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009154  08009154  00019154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004888  20000078  080091d4  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004900  080091d4  00024900  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a031  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa0  00000000  00000000  0003a0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0003d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  0003e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000059e0  00000000  00000000  0003f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d95  00000000  00000000  00044c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001038d9  00000000  00000000  000599bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d296  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ddc  00000000  00000000  0015d2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000078 	.word	0x20000078
 8000214:	00000000 	.word	0x00000000
 8000218:	08008e68 	.word	0x08008e68

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000007c 	.word	0x2000007c
 8000234:	08008e68 	.word	0x08008e68

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	0a5a      	lsrs	r2, r3, #9
 800055c:	490f      	ldr	r1, [pc, #60]	; (800059c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800055e:	fba1 1202 	umull	r1, r2, r1, r2
 8000562:	09d2      	lsrs	r2, r2, #7
 8000564:	490e      	ldr	r1, [pc, #56]	; (80005a0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000566:	fb01 f202 	mul.w	r2, r1, r2
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	0a5b      	lsrs	r3, r3, #9
 8000574:	4a09      	ldr	r2, [pc, #36]	; (800059c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000576:	fba2 2303 	umull	r2, r3, r2, r3
 800057a:	09db      	lsrs	r3, r3, #7
 800057c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	441a      	add	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	00044b83 	.word	0x00044b83
 80005a0:	3b9aca00 	.word	0x3b9aca00

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f003 fd23 	bl	8003ff2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f814 	bl	80005d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fb00 	bl	8000bb4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80005b4:	f000 fad8 	bl	8000b68 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 80005b8:	f000 fa6a 	bl	8000a90 <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 80005bc:	f000 fa9c 	bl	8000af8 <_ZL19MX_USART3_UART_Initv>
  MX_TIM11_Init();
 80005c0:	f000 fa0a 	bl	80009d8 <_ZL13MX_TIM11_Initv>
  MX_TIM3_Init();
 80005c4:	f000 f888 	bl	80006d8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80005c8:	f000 f946 	bl	8000858 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 80005cc:	f002 fa34 	bl	8002a38 <setup>
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 80005d0:	f002 fa66 	bl	8002aa0 <loop>
 80005d4:	e7fc      	b.n	80005d0 <main+0x2c>
	...

080005d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 fab4 	bl	8008b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <_Z18SystemClock_Configv+0xf8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a33      	ldr	r2, [pc, #204]	; (80006d0 <_Z18SystemClock_Configv+0xf8>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <_Z18SystemClock_Configv+0xf8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000614:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <_Z18SystemClock_Configv+0xfc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061c:	4a2d      	ldr	r2, [pc, #180]	; (80006d4 <_Z18SystemClock_Configv+0xfc>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <_Z18SystemClock_Configv+0xfc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4618      	mov	r0, r3
 800065e:	f004 fc7b 	bl	8004f58 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	bf14      	ite	ne
 8000668:	2301      	movne	r3, #1
 800066a:	2300      	moveq	r3, #0
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000672:	f000 fbb1 	bl	8000dd8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000676:	f004 fc1f 	bl	8004eb8 <HAL_PWREx_EnableOverDrive>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	bf14      	ite	ne
 8000680:	2301      	movne	r3, #1
 8000682:	2300      	moveq	r3, #0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800068a:	f000 fba5 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	2103      	movs	r1, #3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f004 ff01 	bl	80054b4 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	bf14      	ite	ne
 80006b8:	2301      	movne	r3, #1
 80006ba:	2300      	moveq	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 80006c2:	f000 fb89 	bl	8000dd8 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f8:	463b      	mov	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
 8000706:	615a      	str	r2, [r3, #20]
 8000708:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800070a:	4b51      	ldr	r3, [pc, #324]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 800070c:	4a51      	ldr	r2, [pc, #324]	; (8000854 <_ZL12MX_TIM3_Initv+0x17c>)
 800070e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000710:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000716:	4b4e      	ldr	r3, [pc, #312]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800071c:	4b4c      	ldr	r3, [pc, #304]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 800071e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000722:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000724:	4b4a      	ldr	r3, [pc, #296]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072a:	4b49      	ldr	r3, [pc, #292]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000730:	4847      	ldr	r0, [pc, #284]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000732:	f005 fd0d 	bl	8006150 <HAL_TIM_Base_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8000746:	f000 fb47 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000754:	4619      	mov	r1, r3
 8000756:	483e      	ldr	r0, [pc, #248]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000758:	f006 f8e0 	bl	800691c <HAL_TIM_ConfigClockSource>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 800076c:	f000 fb34 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000770:	4837      	ldr	r0, [pc, #220]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000772:	f005 fd44 	bl	80061fe <HAL_TIM_PWM_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8000786:	f000 fb27 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	482d      	ldr	r0, [pc, #180]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 800079a:	f006 fd79 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf14      	ite	ne
 80007a4:	2301      	movne	r3, #1
 80007a6:	2300      	moveq	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80007ae:	f000 fb13 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b2:	2360      	movs	r3, #96	; 0x60
 80007b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c2:	463b      	mov	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	4619      	mov	r1, r3
 80007c8:	4821      	ldr	r0, [pc, #132]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 80007ca:	f005 ff93 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf14      	ite	ne
 80007d4:	2301      	movne	r3, #1
 80007d6:	2300      	moveq	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 80007de:	f000 fafb 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007e2:	463b      	mov	r3, r7
 80007e4:	2204      	movs	r2, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4819      	ldr	r0, [pc, #100]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 80007ea:	f005 ff83 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <_ZL12MX_TIM3_Initv+0x12a>
  {
    Error_Handler();
 80007fe:	f000 faeb 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	2208      	movs	r2, #8
 8000806:	4619      	mov	r1, r3
 8000808:	4811      	ldr	r0, [pc, #68]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 800080a:	f005 ff73 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	bf14      	ite	ne
 8000814:	2301      	movne	r3, #1
 8000816:	2300      	moveq	r3, #0
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <_ZL12MX_TIM3_Initv+0x14a>
  {
    Error_Handler();
 800081e:	f000 fadb 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	220c      	movs	r2, #12
 8000826:	4619      	mov	r1, r3
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 800082a:	f005 ff63 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	bf14      	ite	ne
 8000834:	2301      	movne	r3, #1
 8000836:	2300      	moveq	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <_ZL12MX_TIM3_Initv+0x16a>
  {
    Error_Handler();
 800083e:	f000 facb 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <_ZL12MX_TIM3_Initv+0x178>)
 8000844:	f003 f8da 	bl	80039fc <HAL_TIM_MspPostInit>

}
 8000848:	bf00      	nop
 800084a:	3738      	adds	r7, #56	; 0x38
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000094 	.word	0x20000094
 8000854:	40000400 	.word	0x40000400

08000858 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	; 0x38
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800088a:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 800088c:	4a51      	ldr	r2, [pc, #324]	; (80009d4 <_ZL12MX_TIM4_Initv+0x17c>)
 800088e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000890:	4b4f      	ldr	r3, [pc, #316]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800089c:	4b4c      	ldr	r3, [pc, #304]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 800089e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a4:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b49      	ldr	r3, [pc, #292]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008b0:	4847      	ldr	r0, [pc, #284]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80008b2:	f005 fc4d 	bl	8006150 <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bf14      	ite	ne
 80008bc:	2301      	movne	r3, #1
 80008be:	2300      	moveq	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 80008c6:	f000 fa87 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d4:	4619      	mov	r1, r3
 80008d6:	483e      	ldr	r0, [pc, #248]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80008d8:	f006 f820 	bl	800691c <HAL_TIM_ConfigClockSource>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	bf14      	ite	ne
 80008e2:	2301      	movne	r3, #1
 80008e4:	2300      	moveq	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 80008ec:	f000 fa74 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008f0:	4837      	ldr	r0, [pc, #220]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80008f2:	f005 fc84 	bl	80061fe <HAL_TIM_PWM_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bf14      	ite	ne
 80008fc:	2301      	movne	r3, #1
 80008fe:	2300      	moveq	r3, #0
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8000906:	f000 fa67 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	482d      	ldr	r0, [pc, #180]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 800091a:	f006 fcb9 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	bf14      	ite	ne
 8000924:	2301      	movne	r3, #1
 8000926:	2300      	moveq	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 800092e:	f000 fa53 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000932:	2360      	movs	r3, #96	; 0x60
 8000934:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	4619      	mov	r1, r3
 8000948:	4821      	ldr	r0, [pc, #132]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 800094a:	f005 fed3 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf14      	ite	ne
 8000954:	2301      	movne	r3, #1
 8000956:	2300      	moveq	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 800095e:	f000 fa3b 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	2204      	movs	r2, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4819      	ldr	r0, [pc, #100]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 800096a:	f005 fec3 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <_ZL12MX_TIM4_Initv+0x12a>
  {
    Error_Handler();
 800097e:	f000 fa2b 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000982:	463b      	mov	r3, r7
 8000984:	2208      	movs	r2, #8
 8000986:	4619      	mov	r1, r3
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 800098a:	f005 feb3 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	bf14      	ite	ne
 8000994:	2301      	movne	r3, #1
 8000996:	2300      	moveq	r3, #0
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <_ZL12MX_TIM4_Initv+0x14a>
  {
    Error_Handler();
 800099e:	f000 fa1b 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	220c      	movs	r2, #12
 80009a6:	4619      	mov	r1, r3
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80009aa:	f005 fea3 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <_ZL12MX_TIM4_Initv+0x16a>
  {
    Error_Handler();
 80009be:	f000 fa0b 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <_ZL12MX_TIM4_Initv+0x178>)
 80009c4:	f003 f81a 	bl	80039fc <HAL_TIM_MspPostInit>

}
 80009c8:	bf00      	nop
 80009ca:	3738      	adds	r7, #56	; 0x38
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000e0 	.word	0x200000e0
 80009d4:	40000800 	.word	0x40000800

080009d8 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]
 80009ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80009f0:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 80009f2:	4a26      	ldr	r2, [pc, #152]	; (8000a8c <_ZL13MX_TIM11_Initv+0xb4>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80009f6:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 80009f8:	2263      	movs	r2, #99	; 0x63
 80009fa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 19999;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a04:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a08:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000a16:	481c      	ldr	r0, [pc, #112]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a18:	f005 fb9a 	bl	8006150 <HAL_TIM_Base_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <_ZL13MX_TIM11_Initv+0x58>
  {
    Error_Handler();
 8000a2c:	f000 f9d4 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000a30:	4815      	ldr	r0, [pc, #84]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a32:	f005 fbe4 	bl	80061fe <HAL_TIM_PWM_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	2300      	moveq	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <_ZL13MX_TIM11_Initv+0x72>
  {
    Error_Handler();
 8000a46:	f000 f9c7 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4a:	2360      	movs	r3, #96	; 0x60
 8000a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a62:	f005 fe47 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	bf14      	ite	ne
 8000a6c:	2301      	movne	r3, #1
 8000a6e:	2300      	moveq	r3, #0
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <_ZL13MX_TIM11_Initv+0xa2>
  {
    Error_Handler();
 8000a76:	f000 f9af 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <_ZL13MX_TIM11_Initv+0xb0>)
 8000a7c:	f002 ffbe 	bl	80039fc <HAL_TIM_MspPostInit>

}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000012c 	.word	0x2000012c
 8000a8c:	40014800 	.word	0x40014800

08000a90 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ad4:	f006 fc88 	bl	80073e8 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bf14      	ite	ne
 8000ade:	2301      	movne	r3, #1
 8000ae0:	2300      	moveq	r3, #0
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000ae8:	f000 f976 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000178 	.word	0x20000178
 8000af4:	40011000 	.word	0x40011000

08000af8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000afe:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <_ZL19MX_USART3_UART_Initv+0x6c>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b04:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000b08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000b42:	f007 ff4b 	bl	80089dc <HAL_RS485Ex_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf14      	ite	ne
 8000b4c:	2301      	movne	r3, #1
 8000b4e:	2300      	moveq	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000b56:	f000 f93f 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000200 	.word	0x20000200
 8000b64:	40004800 	.word	0x40004800

08000b68 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_ZL11MX_DMA_Initv+0x48>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <_ZL11MX_DMA_Initv+0x48>)
 8000b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <_ZL11MX_DMA_Initv+0x48>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	200c      	movs	r0, #12
 8000b8c:	f003 fb8d 	bl	80042aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b90:	200c      	movs	r0, #12
 8000b92:	f003 fba6 	bl	80042e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200e      	movs	r0, #14
 8000b9c:	f003 fb85 	bl	80042aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ba0:	200e      	movs	r0, #14
 8000ba2:	f003 fb9e 	bl	80042e2 <HAL_NVIC_EnableIRQ>

}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b7d      	ldr	r3, [pc, #500]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a7c      	ldr	r2, [pc, #496]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b7a      	ldr	r3, [pc, #488]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	61bb      	str	r3, [r7, #24]
 8000be0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be2:	4b77      	ldr	r3, [pc, #476]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a76      	ldr	r2, [pc, #472]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000be8:	f043 0320 	orr.w	r3, r3, #32
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b74      	ldr	r3, [pc, #464]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0320 	and.w	r3, r3, #32
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	4b71      	ldr	r3, [pc, #452]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a70      	ldr	r2, [pc, #448]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b6e      	ldr	r3, [pc, #440]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b6b      	ldr	r3, [pc, #428]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a6a      	ldr	r2, [pc, #424]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b68      	ldr	r3, [pc, #416]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b65      	ldr	r3, [pc, #404]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a64      	ldr	r2, [pc, #400]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b62      	ldr	r3, [pc, #392]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c42:	4b5f      	ldr	r3, [pc, #380]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a5e      	ldr	r2, [pc, #376]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b5c      	ldr	r3, [pc, #368]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c5a:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a58      	ldr	r2, [pc, #352]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b56      	ldr	r3, [pc, #344]	; (8000dc0 <_ZL12MX_GPIO_Initv+0x20c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2101      	movs	r1, #1
 8000c76:	4853      	ldr	r0, [pc, #332]	; (8000dc4 <_ZL12MX_GPIO_Initv+0x210>)
 8000c78:	f004 f904 	bl	8004e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2140      	movs	r1, #64	; 0x40
 8000c80:	4851      	ldr	r0, [pc, #324]	; (8000dc8 <_ZL12MX_GPIO_Initv+0x214>)
 8000c82:	f004 f8ff 	bl	8004e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	484b      	ldr	r0, [pc, #300]	; (8000dcc <_ZL12MX_GPIO_Initv+0x218>)
 8000c9e:	f003 ff45 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ca2:	2332      	movs	r3, #50	; 0x32
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb2:	230b      	movs	r3, #11
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4843      	ldr	r0, [pc, #268]	; (8000dcc <_ZL12MX_GPIO_Initv+0x218>)
 8000cbe:	f003 ff35 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000cc2:	2306      	movs	r3, #6
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd2:	230b      	movs	r3, #11
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	483c      	ldr	r0, [pc, #240]	; (8000dd0 <_ZL12MX_GPIO_Initv+0x21c>)
 8000cde:	f003 ff25 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4832      	ldr	r0, [pc, #200]	; (8000dc4 <_ZL12MX_GPIO_Initv+0x210>)
 8000cfa:	f003 ff17 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d10:	230b      	movs	r3, #11
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	482a      	ldr	r0, [pc, #168]	; (8000dc4 <_ZL12MX_GPIO_Initv+0x210>)
 8000d1c:	f003 ff06 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d20:	2340      	movs	r3, #64	; 0x40
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4824      	ldr	r0, [pc, #144]	; (8000dc8 <_ZL12MX_GPIO_Initv+0x214>)
 8000d38:	f003 fef8 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <_ZL12MX_GPIO_Initv+0x214>)
 8000d50:	f003 feec 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d54:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d66:	230a      	movs	r3, #10
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <_ZL12MX_GPIO_Initv+0x21c>)
 8000d72:	f003 fedb 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d76:	2340      	movs	r3, #64	; 0x40
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d86:	2307      	movs	r3, #7
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <_ZL12MX_GPIO_Initv+0x220>)
 8000d92:	f003 fecb 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d96:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da8:	230b      	movs	r3, #11
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <_ZL12MX_GPIO_Initv+0x214>)
 8000db4:	f003 feba 	bl	8004b2c <HAL_GPIO_Init>

}
 8000db8:	bf00      	nop
 8000dba:	3730      	adds	r7, #48	; 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40021800 	.word	0x40021800
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>

08000de2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <_ZN3ros3MsgC1Ev+0x1c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	0800911c 	.word	0x0800911c

08000e24 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
      data()
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ffe8 	bl	8000e04 <_ZN3ros3MsgC1Ev>
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ffcf 	bl	8000de2 <_ZN3ros4TimeC1Ev>
    {
    }
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08009104 	.word	0x08009104

08000e54 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6859      	ldr	r1, [r3, #4]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b2ca      	uxtb	r2, r1
 8000e6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	0a19      	lsrs	r1, r3, #8
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b2ca      	uxtb	r2, r1
 8000e80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	0c19      	lsrs	r1, r3, #16
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	b2ca      	uxtb	r2, r1
 8000e92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	0e19      	lsrs	r1, r3, #24
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3303      	adds	r3, #3
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b2ca      	uxtb	r2, r1
 8000ea4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6899      	ldr	r1, [r3, #8]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b2ca      	uxtb	r2, r1
 8000eb8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	0a19      	lsrs	r1, r3, #8
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b2ca      	uxtb	r2, r1
 8000eca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	0c19      	lsrs	r1, r3, #16
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	0e19      	lsrs	r1, r3, #24
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	3303      	adds	r3, #3
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	b2ca      	uxtb	r2, r1
 8000eee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	60fb      	str	r3, [r7, #12]
      return offset;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    }
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3301      	adds	r3, #1
 8000f28:	6839      	ldr	r1, [r7, #0]
 8000f2a:	440b      	add	r3, r1
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	6839      	ldr	r1, [r7, #0]
 8000f40:	440b      	add	r3, r1
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3303      	adds	r3, #3
 8000f54:	6839      	ldr	r1, [r7, #0]
 8000f56:	440b      	add	r3, r1
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	061b      	lsls	r3, r3, #24
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3304      	adds	r3, #4
 8000f66:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	6839      	ldr	r1, [r7, #0]
 8000f80:	440b      	add	r3, r1
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3302      	adds	r3, #2
 8000f94:	6839      	ldr	r1, [r7, #0]
 8000f96:	440b      	add	r3, r1
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3303      	adds	r3, #3
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	440b      	add	r3, r1
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	061b      	lsls	r3, r3, #24
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	60fb      	str	r3, [r7, #12]
     return offset;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    }
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	08008e80 	.word	0x08008e80

08000fe8 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	08008e90 	.word	0x08008e90

08001004 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fef8 	bl	8000e04 <_ZN3ros3MsgC1Ev>
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	809a      	strh	r2, [r3, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a09      	ldr	r2, [pc, #36]	; (8001048 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a06      	ldr	r2, [pc, #24]	; (8001048 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
    {
    }
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	080090ec 	.word	0x080090ec
 8001048:	08008eb4 	.word	0x08008eb4

0800104c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	8899      	ldrh	r1, [r3, #4]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	4413      	add	r3, r2
 8001064:	b2ca      	uxtb	r2, r1
 8001066:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	889b      	ldrh	r3, [r3, #4]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	b299      	uxth	r1, r3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	3301      	adds	r3, #1
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	4413      	add	r3, r2
 8001078:	b2ca      	uxtb	r2, r1
 800107a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	3302      	adds	r3, #2
 8001080:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f8d6 	bl	8000238 <strlen>
 800108c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	4413      	add	r3, r2
 8001094:	69b9      	ldr	r1, [r7, #24]
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fdee 	bl	8002c78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	3304      	adds	r3, #4
 80010a0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	18d0      	adds	r0, r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4619      	mov	r1, r3
 80010b0:	f007 fd42 	bl	8008b38 <memcpy>
      offset += length_topic_name;
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4413      	add	r3, r2
 80010ba:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f8b9 	bl	8000238 <strlen>
 80010c6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	6979      	ldr	r1, [r7, #20]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fdd1 	bl	8002c78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	18d0      	adds	r0, r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f007 fd25 	bl	8008b38 <memcpy>
      offset += length_message_type;
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	4413      	add	r3, r2
 80010f4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f89c 	bl	8000238 <strlen>
 8001100:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fdb4 	bl	8002c78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	3304      	adds	r3, #4
 8001114:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	18d0      	adds	r0, r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4619      	mov	r1, r3
 8001124:	f007 fd08 	bl	8008b38 <memcpy>
      offset += length_md5sum;
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4413      	add	r3, r2
 800112e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001136:	68f9      	ldr	r1, [r7, #12]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	b2ca      	uxtb	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	0a19      	lsrs	r1, r3, #8
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	4413      	add	r3, r2
 800114e:	b2ca      	uxtb	r2, r1
 8001150:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	0c19      	lsrs	r1, r3, #16
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3302      	adds	r3, #2
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	4413      	add	r3, r2
 800115e:	b2ca      	uxtb	r2, r1
 8001160:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	0e19      	lsrs	r1, r3, #24
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3303      	adds	r3, #3
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	4413      	add	r3, r2
 800116e:	b2ca      	uxtb	r2, r1
 8001170:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	61fb      	str	r3, [r7, #28]
      return offset;
 8001178:	69fb      	ldr	r3, [r7, #28]
    }
 800117a:	4618      	mov	r0, r3
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001182:	b580      	push	{r7, lr}
 8001184:	b08a      	sub	sp, #40	; 0x28
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b29a      	uxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	889b      	ldrh	r3, [r3, #4]
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	3301      	adds	r3, #1
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	440b      	add	r3, r1
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	3302      	adds	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	441a      	add	r2, r3
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fd70 	bl	8002cb4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	3304      	adds	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	4413      	add	r3, r2
 80011e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d20c      	bcs.n	8001204 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	441a      	add	r2, r3
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6839      	ldr	r1, [r7, #0]
 80011f6:	440b      	add	r3, r1
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	3301      	adds	r3, #1
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
 8001202:	e7ec      	b.n	80011de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	4413      	add	r3, r2
 800120a:	3b01      	subs	r3, #1
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	3b01      	subs	r3, #1
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	441a      	add	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	4413      	add	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	441a      	add	r2, r3
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fd3d 	bl	8002cb4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	3304      	adds	r3, #4
 800123e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4413      	add	r3, r2
 800124a:	6a3a      	ldr	r2, [r7, #32]
 800124c:	429a      	cmp	r2, r3
 800124e:	d20c      	bcs.n	800126a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	441a      	add	r2, r3
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	3b01      	subs	r3, #1
 800125a:	6839      	ldr	r1, [r7, #0]
 800125c:	440b      	add	r3, r1
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	3301      	adds	r3, #1
 8001266:	623b      	str	r3, [r7, #32]
 8001268:	e7ec      	b.n	8001244 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4413      	add	r3, r2
 8001270:	3b01      	subs	r3, #1
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	4413      	add	r3, r2
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	3b01      	subs	r3, #1
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	441a      	add	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4413      	add	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	441a      	add	r2, r3
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fd0a 	bl	8002cb4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	3304      	adds	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d20c      	bcs.n	80012d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	441a      	add	r2, r3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6839      	ldr	r1, [r7, #0]
 80012c2:	440b      	add	r3, r1
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	3301      	adds	r3, #1
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	e7ec      	b.n	80012aa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	3b01      	subs	r3, #1
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	441a      	add	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	440a      	add	r2, r1
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	4313      	orrs	r3, r2
 8001304:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	3301      	adds	r3, #1
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	440b      	add	r3, r1
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	4313      	orrs	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	3302      	adds	r3, #2
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	440b      	add	r3, r1
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	041b      	lsls	r3, r3, #16
 8001326:	4313      	orrs	r3, r2
 8001328:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	3303      	adds	r3, #3
 8001330:	6839      	ldr	r1, [r7, #0]
 8001332:	440b      	add	r3, r1
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	061b      	lsls	r3, r3, #24
 8001338:	4313      	orrs	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	3304      	adds	r3, #4
 8001346:	61bb      	str	r3, [r7, #24]
     return offset;
 8001348:	69bb      	ldr	r3, [r7, #24]
    }
 800134a:	4618      	mov	r0, r3
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	08008eb8 	.word	0x08008eb8

08001370 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	08008ed4 	.word	0x08008ed4

0800138c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fd34 	bl	8000e04 <_ZN3ros3MsgC1Ev>
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	711a      	strb	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a04      	ldr	r2, [pc, #16]	; (80013bc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80013ac:	609a      	str	r2, [r3, #8]
    {
    }
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	080090d4 	.word	0x080090d4
 80013bc:	08008eb4 	.word	0x08008eb4

080013c0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	7912      	ldrb	r2, [r2, #4]
 80013d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3301      	adds	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe ff27 	bl	8000238 <strlen>
 80013ea:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 fc3f 	bl	8002c78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3304      	adds	r3, #4
 80013fe:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	18d0      	adds	r0, r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	4619      	mov	r1, r3
 800140e:	f007 fb93 	bl	8008b38 <memcpy>
      offset += length_msg;
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4413      	add	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
      return offset;
 800141a:	68fb      	ldr	r3, [r7, #12]
    }
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	4413      	add	r3, r2
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	3301      	adds	r3, #1
 8001442:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	441a      	add	r2, r3
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fc2f 	bl	8002cb4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	3304      	adds	r3, #4
 800145a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	429a      	cmp	r2, r3
 800146a:	d20c      	bcs.n	8001486 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	441a      	add	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3b01      	subs	r3, #1
 8001476:	6839      	ldr	r1, [r7, #0]
 8001478:	440b      	add	r3, r1
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e7ec      	b.n	8001460 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	3b01      	subs	r3, #1
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	4413      	add	r3, r2
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	3b01      	subs	r3, #1
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	441a      	add	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
     return offset;
 80014aa:	693b      	ldr	r3, [r7, #16]
    }
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	08008ef8 	.word	0x08008ef8

080014d0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	08008f0c 	.word	0x08008f0c

080014ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fc84 	bl	8000e04 <_ZN3ros3MsgC1Ev>
 80014fc:	4a11      	ldr	r2, [pc, #68]	; (8001544 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	080090bc 	.word	0x080090bc

08001548 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6859      	ldr	r1, [r3, #4]
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	4413      	add	r3, r2
 8001560:	b2ca      	uxtb	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	0a19      	lsrs	r1, r3, #8
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	3301      	adds	r3, #1
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	4413      	add	r3, r2
 8001572:	b2ca      	uxtb	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	0c19      	lsrs	r1, r3, #16
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	3302      	adds	r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	b2ca      	uxtb	r2, r1
 8001586:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	0e19      	lsrs	r1, r3, #24
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	3303      	adds	r3, #3
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	4413      	add	r3, r2
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	3304      	adds	r3, #4
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	6a3a      	ldr	r2, [r7, #32]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d22b      	bcs.n	8001606 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80015bc:	6939      	ldr	r1, [r7, #16]
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	b2ca      	uxtb	r2, r1
 80015c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	0a19      	lsrs	r1, r3, #8
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	3301      	adds	r3, #1
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	b2ca      	uxtb	r2, r1
 80015d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	0c19      	lsrs	r1, r3, #16
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	3302      	adds	r3, #2
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	b2ca      	uxtb	r2, r1
 80015e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	0e19      	lsrs	r1, r3, #24
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	3303      	adds	r3, #3
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	b2ca      	uxtb	r2, r1
 80015f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	3304      	adds	r3, #4
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	3301      	adds	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
 8001604:	e7ce      	b.n	80015a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6919      	ldr	r1, [r3, #16]
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	4413      	add	r3, r2
 8001610:	b2ca      	uxtb	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	0a19      	lsrs	r1, r3, #8
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	3301      	adds	r3, #1
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	4413      	add	r3, r2
 8001622:	b2ca      	uxtb	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	0c19      	lsrs	r1, r3, #16
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	3302      	adds	r3, #2
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	4413      	add	r3, r2
 8001634:	b2ca      	uxtb	r2, r1
 8001636:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	0e19      	lsrs	r1, r3, #24
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	3303      	adds	r3, #3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	b2ca      	uxtb	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	3304      	adds	r3, #4
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	429a      	cmp	r2, r3
 800165c:	d22b      	bcs.n	80016b6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699a      	ldr	r2, [r3, #24]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800166c:	68f9      	ldr	r1, [r7, #12]
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	4413      	add	r3, r2
 8001674:	b2ca      	uxtb	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	0a19      	lsrs	r1, r3, #8
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	3301      	adds	r3, #1
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	4413      	add	r3, r2
 8001684:	b2ca      	uxtb	r2, r1
 8001686:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	0c19      	lsrs	r1, r3, #16
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	3302      	adds	r3, #2
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	4413      	add	r3, r2
 8001694:	b2ca      	uxtb	r2, r1
 8001696:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	0e19      	lsrs	r1, r3, #24
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	3303      	adds	r3, #3
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	b2ca      	uxtb	r2, r1
 80016a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	3304      	adds	r3, #4
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	e7ce      	b.n	8001654 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69d9      	ldr	r1, [r3, #28]
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	b2ca      	uxtb	r2, r1
 80016c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	0a19      	lsrs	r1, r3, #8
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	3301      	adds	r3, #1
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	b2ca      	uxtb	r2, r1
 80016d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	0c19      	lsrs	r1, r3, #16
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	3302      	adds	r3, #2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	b2ca      	uxtb	r2, r1
 80016e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	0e19      	lsrs	r1, r3, #24
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	3303      	adds	r3, #3
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	b2ca      	uxtb	r2, r1
 80016f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3304      	adds	r3, #4
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	429a      	cmp	r2, r3
 800170c:	d228      	bcs.n	8001760 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fd8c 	bl	8000238 <strlen>
 8001720:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	4413      	add	r3, r2
 8001728:	6979      	ldr	r1, [r7, #20]
 800172a:	4618      	mov	r0, r3
 800172c:	f001 faa4 	bl	8002c78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	3304      	adds	r3, #4
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	18d0      	adds	r0, r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	4619      	mov	r1, r3
 800174c:	f007 f9f4 	bl	8008b38 <memcpy>
      offset += length_stringsi;
 8001750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	4413      	add	r3, r2
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	3301      	adds	r3, #1
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	e7d1      	b.n	8001704 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001762:	4618      	mov	r0, r3
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800176a:	b580      	push	{r7, lr}
 800176c:	b08e      	sub	sp, #56	; 0x38
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001784:	3301      	adds	r3, #1
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	6a3a      	ldr	r2, [r7, #32]
 8001790:	4313      	orrs	r3, r2
 8001792:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001796:	3302      	adds	r3, #2
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	4413      	add	r3, r2
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	041b      	lsls	r3, r3, #16
 80017a0:	6a3a      	ldr	r2, [r7, #32]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80017a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a8:	3303      	adds	r3, #3
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	6a3a      	ldr	r2, [r7, #32]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ba:	3304      	adds	r3, #4
 80017bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	6a3a      	ldr	r2, [r7, #32]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d90a      	bls.n	80017de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4619      	mov	r1, r3
 80017d2:	4610      	mov	r0, r2
 80017d4:	f007 f9c6 	bl	8008b64 <realloc>
 80017d8:	4602      	mov	r2, r0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a3a      	ldr	r2, [r7, #32]
 80017e2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80017e4:	2300      	movs	r3, #0
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d236      	bcs.n	8001860 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017fa:	6839      	ldr	r1, [r7, #0]
 80017fc:	440a      	add	r2, r1
 80017fe:	7812      	ldrb	r2, [r2, #0]
 8001800:	4313      	orrs	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001808:	3301      	adds	r3, #1
 800180a:	6839      	ldr	r1, [r7, #0]
 800180c:	440b      	add	r3, r1
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	4313      	orrs	r3, r2
 8001814:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181a:	3302      	adds	r3, #2
 800181c:	6839      	ldr	r1, [r7, #0]
 800181e:	440b      	add	r3, r1
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	041b      	lsls	r3, r3, #16
 8001824:	4313      	orrs	r3, r2
 8001826:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182c:	3303      	adds	r3, #3
 800182e:	6839      	ldr	r1, [r7, #0]
 8001830:	440b      	add	r3, r1
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	4313      	orrs	r3, r2
 8001838:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001842:	3304      	adds	r3, #4
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185a:	3301      	adds	r3, #1
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
 800185e:	e7c3      	b.n	80017e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	4413      	add	r3, r2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	3301      	adds	r3, #1
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	4313      	orrs	r3, r2
 800187a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800187c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187e:	3302      	adds	r3, #2
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	041b      	lsls	r3, r3, #16
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	4313      	orrs	r3, r2
 800188c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800188e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001890:	3303      	adds	r3, #3
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	061b      	lsls	r3, r3, #24
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	4313      	orrs	r3, r2
 800189e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80018a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a2:	3304      	adds	r3, #4
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d90a      	bls.n	80018c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4619      	mov	r1, r3
 80018ba:	4610      	mov	r0, r2
 80018bc:	f007 f952 	bl	8008b64 <realloc>
 80018c0:	4602      	mov	r2, r0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d236      	bcs.n	8001948 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	440a      	add	r2, r1
 80018e6:	7812      	ldrb	r2, [r2, #0]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f0:	3301      	adds	r3, #1
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	440b      	add	r3, r1
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001902:	3302      	adds	r3, #2
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	440b      	add	r3, r1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	041b      	lsls	r3, r3, #16
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001914:	3303      	adds	r3, #3
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	440b      	add	r3, r1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192a:	3304      	adds	r3, #4
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	3214      	adds	r2, #20
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001942:	3301      	adds	r3, #1
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001946:	e7c3      	b.n	80018d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	4413      	add	r3, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001954:	3301      	adds	r3, #1
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001966:	3302      	adds	r3, #2
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001978:	3303      	adds	r3, #3
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	4413      	add	r3, r2
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198a:	3304      	adds	r3, #4
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	429a      	cmp	r2, r3
 8001996:	d90a      	bls.n	80019ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4619      	mov	r1, r3
 80019a2:	4610      	mov	r0, r2
 80019a4:	f007 f8de 	bl	8008b64 <realloc>
 80019a8:	4602      	mov	r2, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019be:	429a      	cmp	r2, r3
 80019c0:	d23f      	bcs.n	8001a42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80019c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	441a      	add	r2, r3
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 f970 	bl	8002cb4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d6:	3304      	adds	r3, #4
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80019da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
 80019de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d20c      	bcs.n	8001a04 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	441a      	add	r2, r3
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	440b      	add	r3, r1
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	3301      	adds	r3, #1
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
 8001a02:	e7ec      	b.n	80019de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	3b01      	subs	r3, #1
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	441a      	add	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4413      	add	r3, r2
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	3220      	adds	r2, #32
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a40:	e7ba      	b.n	80019b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001a44:	4618      	mov	r0, r3
 8001a46:	3738      	adds	r7, #56	; 0x38
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	08009010 	.word	0x08009010

08001a68 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	08008f30 	.word	0x08008f30

08001a84 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
  }
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 8192;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8001ab2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 8192;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <_ZN13STM32HardwareC1Ev+0x40>)
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2300      	movs	r3, #0
 8001adc:	6053      	str	r3, [r2, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	6093      	str	r3, [r2, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001af0:	461a      	mov	r2, r3
 8001af2:	2300      	movs	r3, #0
 8001af4:	60d3      	str	r3, [r2, #12]
    }
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	20000200 	.word	0x20000200

08001b08 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f804 	bl	8001b1e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b32:	4619      	mov	r1, r3
 8001b34:	f005 fd22 	bl	800757c <HAL_UART_Receive_DMA>
    }
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b54:	685c      	ldr	r4, [r3, #4]
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffa0 	bl	8001a9c <_ZN13STM32Hardware10getRdmaIndEv>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	429c      	cmp	r4, r3
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d016      	beq.n	8001b9a <_ZN13STM32Hardware4readEv+0x5a>
        c = rbuf[rind++];
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8001b7c:	604a      	str	r2, [r1, #4]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	791b      	ldrb	r3, [r3, #4]
 8001b84:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001b98:	6053      	str	r3, [r2, #4]
      }
      return c;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    }
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}

08001ba4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d108      	bne.n	8001bc8 <_ZN13STM32Hardware5flushEv+0x24>
 8001bb6:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <_ZN13STM32Hardware5flushEv+0xfc>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	f083 0301 	eor.w	r3, r3, #1
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <_ZN13STM32Hardware5flushEv+0x24>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <_ZN13STM32Hardware5flushEv+0x26>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d064      	beq.n	8001c98 <_ZN13STM32Hardware5flushEv+0xf4>
        mutex = true;
 8001bce:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <_ZN13STM32Hardware5flushEv+0xfc>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d054      	beq.n	8001c92 <_ZN13STM32Hardware5flushEv+0xee>
          uint16_t len = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d21b      	bcs.n	8001c38 <_ZN13STM32Hardware5flushEv+0x94>
			len = twind - tfind;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	f242 0308 	movw	r3, #8200	; 0x2008
 8001c28:	4413      	add	r3, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	89fa      	ldrh	r2, [r7, #14]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f005 fc27 	bl	8007484 <HAL_UART_Transmit_DMA>
 8001c36:	e024      	b.n	8001c82 <_ZN13STM32Hardware5flushEv+0xde>
		  }else{
			len = tbuflen - tfind;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8001c46:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	f242 0308 	movw	r3, #8200	; 0x2008
 8001c58:	4413      	add	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	89fa      	ldrh	r2, [r7, #14]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f005 fc0f 	bl	8007484 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	f242 0308 	movw	r3, #8200	; 0x2008
 8001c70:	4413      	add	r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001c78:	6892      	ldr	r2, [r2, #8]
 8001c7a:	b292      	uxth	r2, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f005 fc01 	bl	8007484 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001c90:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8001c92:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <_ZN13STM32Hardware5flushEv+0xfc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
      }
    }
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000348 	.word	0x20000348

08001ca4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
      int n = length;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cba:	bfa8      	it	ge
 8001cbc:	f44f 5300 	movge.w	r3, #8192	; 0x2000
 8001cc0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f5c3 5200 	rsb	r2, r3, #8192	; 0x2000
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	bf28      	it	cs
 8001cd4:	4613      	movcs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	f242 0308 	movw	r3, #8200	; 0x2008
 8001ce4:	4413      	add	r3, r2
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f006 ff22 	bl	8008b38 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001d0a:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d00d      	beq.n	8001d30 <_ZN13STM32Hardware5writeEPhi+0x8c>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	f242 0308 	movw	r3, #8200	; 0x2008
 8001d1a:	4413      	add	r3, r2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68b9      	ldr	r1, [r7, #8]
 8001d20:	1888      	adds	r0, r1, r2
 8001d22:	6979      	ldr	r1, [r7, #20]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	1a8a      	subs	r2, r1, r2
 8001d28:	4601      	mov	r1, r0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f006 ff04 	bl	8008b38 <memcpy>
      }

      flush();
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7ff ff37 	bl	8001ba4 <_ZN13STM32Hardware5flushEv>
    }
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	f002 f9a5 	bl	8004094 <HAL_GetTick>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f850 	bl	8000e04 <_ZN3ros3MsgC1Ev>
 8001d64:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	08009078 	.word	0x08009078

08001da4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001da4:	b480      	push	{r7}
 8001da6:	b08b      	sub	sp, #44	; 0x2c
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001db8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8001dbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dc2:	6838      	ldr	r0, [r7, #0]
 8001dc4:	4401      	add	r1, r0
 8001dc6:	b2d3      	uxtb	r3, r2
 8001dc8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8001dca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	0a02      	lsrs	r2, r0, #8
 8001dd8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001ddc:	0a0b      	lsrs	r3, r1, #8
 8001dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de0:	3101      	adds	r1, #1
 8001de2:	6838      	ldr	r0, [r7, #0]
 8001de4:	4401      	add	r1, r0
 8001de6:	b2d3      	uxtb	r3, r2
 8001de8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8001dea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	0c02      	lsrs	r2, r0, #16
 8001df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001dfc:	0c0b      	lsrs	r3, r1, #16
 8001dfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e00:	3102      	adds	r1, #2
 8001e02:	6838      	ldr	r0, [r7, #0]
 8001e04:	4401      	add	r1, r0
 8001e06:	b2d3      	uxtb	r3, r2
 8001e08:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8001e0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	0e02      	lsrs	r2, r0, #24
 8001e18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e1c:	0e0b      	lsrs	r3, r1, #24
 8001e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e20:	3103      	adds	r1, #3
 8001e22:	6838      	ldr	r0, [r7, #0]
 8001e24:	4401      	add	r1, r0
 8001e26:	b2d3      	uxtb	r3, r2
 8001e28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8001e2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	000a      	movs	r2, r1
 8001e38:	2300      	movs	r3, #0
 8001e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e3c:	3104      	adds	r1, #4
 8001e3e:	6838      	ldr	r0, [r7, #0]
 8001e40:	4401      	add	r1, r0
 8001e42:	b2d3      	uxtb	r3, r2
 8001e44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8001e46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	0a0a      	lsrs	r2, r1, #8
 8001e54:	2300      	movs	r3, #0
 8001e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e58:	3105      	adds	r1, #5
 8001e5a:	6838      	ldr	r0, [r7, #0]
 8001e5c:	4401      	add	r1, r0
 8001e5e:	b2d3      	uxtb	r3, r2
 8001e60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8001e62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	0c0a      	lsrs	r2, r1, #16
 8001e70:	2300      	movs	r3, #0
 8001e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e74:	3106      	adds	r1, #6
 8001e76:	6838      	ldr	r0, [r7, #0]
 8001e78:	4401      	add	r1, r0
 8001e7a:	b2d3      	uxtb	r3, r2
 8001e7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8001e7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	0e0a      	lsrs	r2, r1, #24
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e90:	3107      	adds	r1, #7
 8001e92:	6838      	ldr	r0, [r7, #0]
 8001e94:	4401      	add	r1, r0
 8001e96:	b2d3      	uxtb	r3, r2
 8001e98:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	3308      	adds	r3, #8
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ea6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8001eaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eb0:	6838      	ldr	r0, [r7, #0]
 8001eb2:	4401      	add	r1, r0
 8001eb4:	b2d3      	uxtb	r3, r2
 8001eb6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8001eb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	0a02      	lsrs	r2, r0, #8
 8001ec6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001eca:	0a0b      	lsrs	r3, r1, #8
 8001ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ece:	3101      	adds	r1, #1
 8001ed0:	6838      	ldr	r0, [r7, #0]
 8001ed2:	4401      	add	r1, r0
 8001ed4:	b2d3      	uxtb	r3, r2
 8001ed6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8001ed8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	0c02      	lsrs	r2, r0, #16
 8001ee6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001eea:	0c0b      	lsrs	r3, r1, #16
 8001eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eee:	3102      	adds	r1, #2
 8001ef0:	6838      	ldr	r0, [r7, #0]
 8001ef2:	4401      	add	r1, r0
 8001ef4:	b2d3      	uxtb	r3, r2
 8001ef6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8001ef8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	0e02      	lsrs	r2, r0, #24
 8001f06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f0a:	0e0b      	lsrs	r3, r1, #24
 8001f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0e:	3103      	adds	r1, #3
 8001f10:	6838      	ldr	r0, [r7, #0]
 8001f12:	4401      	add	r1, r0
 8001f14:	b2d3      	uxtb	r3, r2
 8001f16:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8001f18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	000a      	movs	r2, r1
 8001f26:	2300      	movs	r3, #0
 8001f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2a:	3104      	adds	r1, #4
 8001f2c:	6838      	ldr	r0, [r7, #0]
 8001f2e:	4401      	add	r1, r0
 8001f30:	b2d3      	uxtb	r3, r2
 8001f32:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001f34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	0a0a      	lsrs	r2, r1, #8
 8001f42:	2300      	movs	r3, #0
 8001f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f46:	3105      	adds	r1, #5
 8001f48:	6838      	ldr	r0, [r7, #0]
 8001f4a:	4401      	add	r1, r0
 8001f4c:	b2d3      	uxtb	r3, r2
 8001f4e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001f50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	0c0a      	lsrs	r2, r1, #16
 8001f5e:	2300      	movs	r3, #0
 8001f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f62:	3106      	adds	r1, #6
 8001f64:	6838      	ldr	r0, [r7, #0]
 8001f66:	4401      	add	r1, r0
 8001f68:	b2d3      	uxtb	r3, r2
 8001f6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8001f6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	0e0a      	lsrs	r2, r1, #24
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f7e:	3107      	adds	r1, #7
 8001f80:	6838      	ldr	r0, [r7, #0]
 8001f82:	4401      	add	r1, r0
 8001f84:	b2d3      	uxtb	r3, r2
 8001f86:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f94:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8001f98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f9e:	6838      	ldr	r0, [r7, #0]
 8001fa0:	4401      	add	r1, r0
 8001fa2:	b2d3      	uxtb	r3, r2
 8001fa4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8001fa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	0a02      	lsrs	r2, r0, #8
 8001fb4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001fb8:	0a0b      	lsrs	r3, r1, #8
 8001fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fbc:	3101      	adds	r1, #1
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	4401      	add	r1, r0
 8001fc2:	b2d3      	uxtb	r3, r2
 8001fc4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8001fc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	0c02      	lsrs	r2, r0, #16
 8001fd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001fd8:	0c0b      	lsrs	r3, r1, #16
 8001fda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fdc:	3102      	adds	r1, #2
 8001fde:	6838      	ldr	r0, [r7, #0]
 8001fe0:	4401      	add	r1, r0
 8001fe2:	b2d3      	uxtb	r3, r2
 8001fe4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8001fe6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	0e02      	lsrs	r2, r0, #24
 8001ff4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ff8:	0e0b      	lsrs	r3, r1, #24
 8001ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ffc:	3103      	adds	r1, #3
 8001ffe:	6838      	ldr	r0, [r7, #0]
 8002000:	4401      	add	r1, r0
 8002002:	b2d3      	uxtb	r3, r2
 8002004:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	000a      	movs	r2, r1
 8002014:	2300      	movs	r3, #0
 8002016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002018:	3104      	adds	r1, #4
 800201a:	6838      	ldr	r0, [r7, #0]
 800201c:	4401      	add	r1, r0
 800201e:	b2d3      	uxtb	r3, r2
 8002020:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002022:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	0a0a      	lsrs	r2, r1, #8
 8002030:	2300      	movs	r3, #0
 8002032:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002034:	3105      	adds	r1, #5
 8002036:	6838      	ldr	r0, [r7, #0]
 8002038:	4401      	add	r1, r0
 800203a:	b2d3      	uxtb	r3, r2
 800203c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800203e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	0c0a      	lsrs	r2, r1, #16
 800204c:	2300      	movs	r3, #0
 800204e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002050:	3106      	adds	r1, #6
 8002052:	6838      	ldr	r0, [r7, #0]
 8002054:	4401      	add	r1, r0
 8002056:	b2d3      	uxtb	r3, r2
 8002058:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800205a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	0e0a      	lsrs	r2, r1, #24
 8002068:	2300      	movs	r3, #0
 800206a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800206c:	3107      	adds	r1, #7
 800206e:	6838      	ldr	r0, [r7, #0]
 8002070:	4401      	add	r1, r0
 8002072:	b2d3      	uxtb	r3, r2
 8002074:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	3308      	adds	r3, #8
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800207e:	4618      	mov	r0, r3
 8002080:	372c      	adds	r7, #44	; 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800208a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800208e:	b0eb      	sub	sp, #428	; 0x1ac
 8002090:	af00      	add	r7, sp, #0
 8002092:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002096:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020ac:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80020b0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80020b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020b8:	4413      	add	r3, r2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2200      	movs	r2, #0
 80020c0:	461c      	mov	r4, r3
 80020c2:	4615      	mov	r5, r2
 80020c4:	ea40 0804 	orr.w	r8, r0, r4
 80020c8:	ea41 0905 	orr.w	r9, r1, r5
 80020cc:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020d0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80020d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2200      	movs	r2, #0
 80020e6:	469a      	mov	sl, r3
 80020e8:	4693      	mov	fp, r2
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80020f6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80020fa:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80020fe:	ea40 0402 	orr.w	r4, r0, r2
 8002102:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002106:	430b      	orrs	r3, r1
 8002108:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800210c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002110:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002114:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002118:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800211c:	1c9a      	adds	r2, r3, #2
 800211e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2200      	movs	r2, #0
 800212a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800212e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800213e:	464c      	mov	r4, r9
 8002140:	0423      	lsls	r3, r4, #16
 8002142:	4644      	mov	r4, r8
 8002144:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002148:	4644      	mov	r4, r8
 800214a:	0422      	lsls	r2, r4, #16
 800214c:	ea40 0402 	orr.w	r4, r0, r2
 8002150:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002154:	430b      	orrs	r3, r1
 8002156:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800215a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800215e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002162:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002166:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800216a:	1cda      	adds	r2, r3, #3
 800216c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002170:	4413      	add	r3, r2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2200      	movs	r2, #0
 8002178:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800217c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002180:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002184:	4623      	mov	r3, r4
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800218c:	4623      	mov	r3, r4
 800218e:	061b      	lsls	r3, r3, #24
 8002190:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002194:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002198:	4623      	mov	r3, r4
 800219a:	4303      	orrs	r3, r0
 800219c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021a0:	462b      	mov	r3, r5
 80021a2:	430b      	orrs	r3, r1
 80021a4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021a8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80021ac:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80021b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80021b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021b8:	1d1a      	adds	r2, r3, #4
 80021ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2200      	movs	r2, #0
 80021c6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80021ca:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80021da:	0023      	movs	r3, r4
 80021dc:	2200      	movs	r2, #0
 80021de:	ea40 0402 	orr.w	r4, r0, r2
 80021e2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80021e6:	430b      	orrs	r3, r1
 80021e8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80021ec:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80021f0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80021f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80021f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021fc:	1d5a      	adds	r2, r3, #5
 80021fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2200      	movs	r2, #0
 800220a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800220e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800221e:	0223      	lsls	r3, r4, #8
 8002220:	2200      	movs	r2, #0
 8002222:	ea40 0402 	orr.w	r4, r0, r2
 8002226:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800222a:	430b      	orrs	r3, r1
 800222c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002230:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002234:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002238:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800223c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002240:	1d9a      	adds	r2, r3, #6
 8002242:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2200      	movs	r2, #0
 800224e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002252:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002262:	0423      	lsls	r3, r4, #16
 8002264:	2200      	movs	r2, #0
 8002266:	ea40 0402 	orr.w	r4, r0, r2
 800226a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800226e:	430b      	orrs	r3, r1
 8002270:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002274:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002278:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800227c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002280:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002284:	1dda      	adds	r2, r3, #7
 8002286:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800228a:	4413      	add	r3, r2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2200      	movs	r2, #0
 8002292:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002296:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80022a6:	0623      	lsls	r3, r4, #24
 80022a8:	2200      	movs	r2, #0
 80022aa:	ea40 0402 	orr.w	r4, r0, r2
 80022ae:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80022b2:	430b      	orrs	r3, r1
 80022b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80022b8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80022bc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80022c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80022c4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80022c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80022cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022d0:	3308      	adds	r3, #8
 80022d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022e2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80022e6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80022ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2200      	movs	r2, #0
 80022f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80022fa:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80022fe:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002302:	4623      	mov	r3, r4
 8002304:	4303      	orrs	r3, r0
 8002306:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800230a:	462b      	mov	r3, r5
 800230c:	430b      	orrs	r3, r1
 800230e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002312:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002316:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800231a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800231e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002328:	4413      	add	r3, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2200      	movs	r2, #0
 8002330:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002334:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002344:	464c      	mov	r4, r9
 8002346:	0223      	lsls	r3, r4, #8
 8002348:	4644      	mov	r4, r8
 800234a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800234e:	4644      	mov	r4, r8
 8002350:	0222      	lsls	r2, r4, #8
 8002352:	ea40 0402 	orr.w	r4, r0, r2
 8002356:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800235a:	430b      	orrs	r3, r1
 800235c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002360:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002364:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002368:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800236c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002370:	1c9a      	adds	r2, r3, #2
 8002372:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002376:	4413      	add	r3, r2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2200      	movs	r2, #0
 800237e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002382:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002392:	464c      	mov	r4, r9
 8002394:	0423      	lsls	r3, r4, #16
 8002396:	4644      	mov	r4, r8
 8002398:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800239c:	4644      	mov	r4, r8
 800239e:	0422      	lsls	r2, r4, #16
 80023a0:	ea40 0402 	orr.w	r4, r0, r2
 80023a4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80023a8:	430b      	orrs	r3, r1
 80023aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023ae:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80023b2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023b6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80023ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023be:	1cda      	adds	r2, r3, #3
 80023c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023c4:	4413      	add	r3, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2200      	movs	r2, #0
 80023cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023d0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023d4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80023d8:	4623      	mov	r3, r4
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023e0:	4623      	mov	r3, r4
 80023e2:	061b      	lsls	r3, r3, #24
 80023e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023e8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80023ec:	4623      	mov	r3, r4
 80023ee:	4303      	orrs	r3, r0
 80023f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023f4:	462b      	mov	r3, r5
 80023f6:	430b      	orrs	r3, r1
 80023f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023fc:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002400:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002404:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002408:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800240c:	1d1a      	adds	r2, r3, #4
 800240e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2200      	movs	r2, #0
 800241a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800241e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800242e:	0023      	movs	r3, r4
 8002430:	2200      	movs	r2, #0
 8002432:	ea40 0402 	orr.w	r4, r0, r2
 8002436:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800243a:	430b      	orrs	r3, r1
 800243c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002440:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002444:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002448:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800244c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002450:	1d5a      	adds	r2, r3, #5
 8002452:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002456:	4413      	add	r3, r2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2200      	movs	r2, #0
 800245e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002462:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002472:	0223      	lsls	r3, r4, #8
 8002474:	2200      	movs	r2, #0
 8002476:	ea40 0402 	orr.w	r4, r0, r2
 800247a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800247e:	430b      	orrs	r3, r1
 8002480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002484:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002488:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800248c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002490:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002494:	1d9a      	adds	r2, r3, #6
 8002496:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800249a:	4413      	add	r3, r2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2200      	movs	r2, #0
 80024a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80024b6:	0423      	lsls	r3, r4, #16
 80024b8:	2200      	movs	r2, #0
 80024ba:	ea40 0402 	orr.w	r4, r0, r2
 80024be:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80024c2:	430b      	orrs	r3, r1
 80024c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80024c8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80024cc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80024d0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80024d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024d8:	1dda      	adds	r2, r3, #7
 80024da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024de:	4413      	add	r3, r2
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2200      	movs	r2, #0
 80024e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80024fa:	0623      	lsls	r3, r4, #24
 80024fc:	2200      	movs	r2, #0
 80024fe:	ea40 0402 	orr.w	r4, r0, r2
 8002502:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002506:	430b      	orrs	r3, r1
 8002508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800250c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002510:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002514:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002518:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800251c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002520:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002524:	3308      	adds	r3, #8
 8002526:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002536:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800253a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800253e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002542:	4413      	add	r3, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2200      	movs	r2, #0
 800254a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800254e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002552:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002556:	4623      	mov	r3, r4
 8002558:	4303      	orrs	r3, r0
 800255a:	67bb      	str	r3, [r7, #120]	; 0x78
 800255c:	462b      	mov	r3, r5
 800255e:	430b      	orrs	r3, r1
 8002560:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002562:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002566:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800256a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800256e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002578:	4413      	add	r3, r2
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2200      	movs	r2, #0
 8002580:	673b      	str	r3, [r7, #112]	; 0x70
 8002582:	677a      	str	r2, [r7, #116]	; 0x74
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002590:	464c      	mov	r4, r9
 8002592:	0223      	lsls	r3, r4, #8
 8002594:	4644      	mov	r4, r8
 8002596:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800259a:	4644      	mov	r4, r8
 800259c:	0222      	lsls	r2, r4, #8
 800259e:	ea40 0402 	orr.w	r4, r0, r2
 80025a2:	66bc      	str	r4, [r7, #104]	; 0x68
 80025a4:	430b      	orrs	r3, r1
 80025a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025a8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80025ac:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025b0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80025b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025b8:	1c9a      	adds	r2, r3, #2
 80025ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025be:	4413      	add	r3, r2
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2200      	movs	r2, #0
 80025c6:	663b      	str	r3, [r7, #96]	; 0x60
 80025c8:	667a      	str	r2, [r7, #100]	; 0x64
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025d6:	464c      	mov	r4, r9
 80025d8:	0423      	lsls	r3, r4, #16
 80025da:	4644      	mov	r4, r8
 80025dc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80025e0:	4644      	mov	r4, r8
 80025e2:	0422      	lsls	r2, r4, #16
 80025e4:	ea40 0402 	orr.w	r4, r0, r2
 80025e8:	65bc      	str	r4, [r7, #88]	; 0x58
 80025ea:	430b      	orrs	r3, r1
 80025ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ee:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80025f2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025f6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80025fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025fe:	1cda      	adds	r2, r3, #3
 8002600:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002604:	4413      	add	r3, r2
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2200      	movs	r2, #0
 800260c:	653b      	str	r3, [r7, #80]	; 0x50
 800260e:	657a      	str	r2, [r7, #84]	; 0x54
 8002610:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002614:	4623      	mov	r3, r4
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800261a:	4623      	mov	r3, r4
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002620:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002624:	4623      	mov	r3, r4
 8002626:	4303      	orrs	r3, r0
 8002628:	643b      	str	r3, [r7, #64]	; 0x40
 800262a:	462b      	mov	r3, r5
 800262c:	430b      	orrs	r3, r1
 800262e:	647b      	str	r3, [r7, #68]	; 0x44
 8002630:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002634:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002638:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800263c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002640:	1d1a      	adds	r2, r3, #4
 8002642:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2200      	movs	r2, #0
 800264e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002650:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800265c:	0023      	movs	r3, r4
 800265e:	2200      	movs	r2, #0
 8002660:	ea40 0402 	orr.w	r4, r0, r2
 8002664:	633c      	str	r4, [r7, #48]	; 0x30
 8002666:	430b      	orrs	r3, r1
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
 800266a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800266e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002672:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002676:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800267a:	1d5a      	adds	r2, r3, #5
 800267c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2200      	movs	r2, #0
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
 800268a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002696:	0223      	lsls	r3, r4, #8
 8002698:	2200      	movs	r2, #0
 800269a:	ea40 0402 	orr.w	r4, r0, r2
 800269e:	623c      	str	r4, [r7, #32]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80026a8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80026ac:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80026b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026b4:	3306      	adds	r3, #6
 80026b6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2200      	movs	r2, #0
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	61fa      	str	r2, [r7, #28]
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	69bc      	ldr	r4, [r7, #24]
 80026d0:	0423      	lsls	r3, r4, #16
 80026d2:	2200      	movs	r2, #0
 80026d4:	ea40 0402 	orr.w	r4, r0, r2
 80026d8:	613c      	str	r4, [r7, #16]
 80026da:	430b      	orrs	r3, r1
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80026e2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80026e6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80026ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026ee:	3307      	adds	r3, #7
 80026f0:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80026f4:	4413      	add	r3, r2
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2200      	movs	r2, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	60fa      	str	r2, [r7, #12]
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	68bc      	ldr	r4, [r7, #8]
 800270a:	0623      	lsls	r3, r4, #24
 800270c:	2200      	movs	r2, #0
 800270e:	ea40 0402 	orr.w	r4, r0, r2
 8002712:	603c      	str	r4, [r7, #0]
 8002714:	430b      	orrs	r3, r1
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	e9d7 3400 	ldrd	r3, r4, [r7]
 800271c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002720:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002724:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002728:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 800272c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002730:	3308      	adds	r3, #8
 8002732:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002736:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800273a:	4618      	mov	r0, r3
 800273c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002740:	46bd      	mov	sp, r7
 8002742:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002746:	4770      	bx	lr

08002748 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	08008f54 	.word	0x08008f54

08002764 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	08008f6c 	.word	0x08008f6c

08002780 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fb3a 	bl	8000e04 <_ZN3ros3MsgC1Ev>
 8002790:	4a08      	ldr	r2, [pc, #32]	; (80027b4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3308      	adds	r3, #8
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fada 	bl	8001d54 <_ZN13geometry_msgs7Vector3C1Ev>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3328      	adds	r3, #40	; 0x28
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fad5 	bl	8001d54 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	08009060 	.word	0x08009060

080027b8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f103 0008 	add.w	r0, r3, #8
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	4413      	add	r3, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	f7ff fae6 	bl	8001da4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4413      	add	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7ff fad9 	bl	8001da4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
      return offset;
 80027fa:	68fb      	ldr	r3, [r7, #12]
    }
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f103 0008 	add.w	r0, r3, #8
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	4413      	add	r3, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f7ff fc33 	bl	800208a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4413      	add	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4619      	mov	r1, r3
 800283a:	f7ff fc26 	bl	800208a <_ZN13geometry_msgs7Vector311deserializeEPh>
 800283e:	4602      	mov	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
     return offset;
 8002846:	68fb      	ldr	r3, [r7, #12]
    }
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	08008f90 	.word	0x08008f90

0800286c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	08008fa4 	.word	0x08008fa4

08002888 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	080090a8 	.word	0x080090a8

080028a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ffe8 	bl	8002888 <_ZN3ros15NodeHandleBase_C1Ev>
 80028b8:	4a4c      	ldr	r2, [pc, #304]	; (80029ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x144>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f8fe 	bl	8001ac4 <_ZN13STM32HardwareC1Ev>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028ce:	461a      	mov	r2, r3
 80028d0:	2300      	movs	r3, #0
 80028d2:	6153      	str	r3, [r2, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028da:	461a      	mov	r2, r3
 80028dc:	2300      	movs	r3, #0
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028e6:	461a      	mov	r2, r3
 80028e8:	2300      	movs	r3, #0
 80028ea:	61d3      	str	r3, [r2, #28]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028f2:	461a      	mov	r2, r3
 80028f4:	2300      	movs	r3, #0
 80028f6:	6213      	str	r3, [r2, #32]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80028fe:	3324      	adds	r3, #36	; 0x24
 8002900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f006 f924 	bl	8008b54 <memset>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002912:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8002916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f006 f919 	bl	8008b54 <memset>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002928:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800292c:	2264      	movs	r2, #100	; 0x64
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f006 f90f 	bl	8008b54 <memset>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800293c:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8002940:	2264      	movs	r2, #100	; 0x64
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f006 f905 	bl	8008b54 <memset>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002950:	461a      	mov	r2, r3
 8002952:	2300      	movs	r3, #0
 8002954:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800295e:	461a      	mov	r2, r3
 8002960:	2300      	movs	r3, #0
 8002962:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800296c:	461a      	mov	r2, r3
 800296e:	2300      	movs	r3, #0
 8002970:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800297a:	461a      	mov	r2, r3
 800297c:	2300      	movs	r3, #0
 800297e:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002988:	461a      	mov	r2, r3
 800298a:	2300      	movs	r3, #0
 800298c:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80029a2:	461a      	mov	r2, r3
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80029b0:	461a      	mov	r2, r3
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80029be:	461a      	mov	r2, r3
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	f244 5314 	movw	r3, #17684	; 0x4514
 80029d8:	4413      	add	r3, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fd86 	bl	80014ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	0800904c 	.word	0x0800904c

080029f0 <HAL_UART_TxCpltCallback>:

void ugv_vel_cb(const geometry_msgs::Twist& ugv_vel_msg);

ros::Subscriber<geometry_msgs::Twist> ugv_vel_sub("cmd_vel_ugv", &ugv_vel_cb);	//subscribing a topic from rpi's topic

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80029f8:	4805      	ldr	r0, [pc, #20]	; (8002a10 <HAL_UART_TxCpltCallback+0x20>)
 80029fa:	f000 f9b5 	bl	8002d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff f8cf 	bl	8001ba4 <_ZN13STM32Hardware5flushEv>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000034c 	.word	0x2000034c

08002a14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002a1c:	4805      	ldr	r0, [pc, #20]	; (8002a34 <HAL_UART_RxCpltCallback+0x20>)
 8002a1e:	f000 f9a3 	bl	8002d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f87a 	bl	8001b1e <_ZN13STM32Hardware10reset_rbufEv>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	2000034c 	.word	0x2000034c

08002a38 <setup>:

void setup(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  nh.initNode();
 8002a3c:	4814      	ldr	r0, [pc, #80]	; (8002a90 <setup+0x58>)
 8002a3e:	f000 f99f 	bl	8002d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(ugv_vel_sub);
 8002a42:	4914      	ldr	r1, [pc, #80]	; (8002a94 <setup+0x5c>)
 8002a44:	4812      	ldr	r0, [pc, #72]	; (8002a90 <setup+0x58>)
 8002a46:	f000 f9c4 	bl	8002dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4812      	ldr	r0, [pc, #72]	; (8002a98 <setup+0x60>)
 8002a4e:	f003 fc37 	bl	80062c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002a52:	2104      	movs	r1, #4
 8002a54:	4810      	ldr	r0, [pc, #64]	; (8002a98 <setup+0x60>)
 8002a56:	f003 fc33 	bl	80062c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002a5a:	2108      	movs	r1, #8
 8002a5c:	480e      	ldr	r0, [pc, #56]	; (8002a98 <setup+0x60>)
 8002a5e:	f003 fc2f 	bl	80062c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002a62:	210c      	movs	r1, #12
 8002a64:	480c      	ldr	r0, [pc, #48]	; (8002a98 <setup+0x60>)
 8002a66:	f003 fc2b 	bl	80062c0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	480b      	ldr	r0, [pc, #44]	; (8002a9c <setup+0x64>)
 8002a6e:	f003 fc27 	bl	80062c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002a72:	2104      	movs	r1, #4
 8002a74:	4809      	ldr	r0, [pc, #36]	; (8002a9c <setup+0x64>)
 8002a76:	f003 fc23 	bl	80062c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002a7a:	2108      	movs	r1, #8
 8002a7c:	4807      	ldr	r0, [pc, #28]	; (8002a9c <setup+0x64>)
 8002a7e:	f003 fc1f 	bl	80062c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002a82:	210c      	movs	r1, #12
 8002a84:	4805      	ldr	r0, [pc, #20]	; (8002a9c <setup+0x64>)
 8002a86:	f003 fc1b 	bl	80062c0 <HAL_TIM_PWM_Start>
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2000034c 	.word	0x2000034c
 8002a94:	20004888 	.word	0x20004888
 8002a98:	20000094 	.word	0x20000094
 8002a9c:	200000e0 	.word	0x200000e0

08002aa0 <loop>:

void loop(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  nh.spinOnce();
 8002aa4:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <loop+0x14>)
 8002aa6:	f000 f9c1 	bl	8002e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(10);								//rate of 10hz
 8002aaa:	200a      	movs	r0, #10
 8002aac:	f001 fafe 	bl	80040ac <HAL_Delay>
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000034c 	.word	0x2000034c

08002ab8 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE>:

void ugv_vel_cb(const geometry_msgs::Twist& ugv_vel_msg)	//callback function from subscribe
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

	int drive_duty_cycle = ugv_vel_msg.linear.x;//val: -100 <-> 100
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ac6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002aca:	ee17 3a90 	vmov	r3, s15
 8002ace:	60fb      	str	r3, [r7, #12]
	int turn 			 = ugv_vel_msg.angular.z;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002ad6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002ada:	ee17 3a90 	vmov	r3, s15
 8002ade:	60bb      	str	r3, [r7, #8]

	if (drive_duty_cycle > 0 )					//Forward
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f340 8090 	ble.w	8002c08 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x150>
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, drive_duty_cycle*400);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002aee:	fb03 f202 	mul.w	r2, r3, r2
 8002af2:	4b5e      	ldr	r3, [pc, #376]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8002af8:	4b5c      	ldr	r3, [pc, #368]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2200      	movs	r2, #0
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, drive_duty_cycle*400);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b06:	fb03 f202 	mul.w	r2, r3, r2
 8002b0a:	4b58      	ldr	r3, [pc, #352]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 8002b10:	4b56      	ldr	r3, [pc, #344]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2200      	movs	r2, #0
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, drive_duty_cycle*400);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b1e:	fb03 f202 	mul.w	r2, r3, r2
 8002b22:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 0);
 8002b28:	4b51      	ldr	r3, [pc, #324]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, drive_duty_cycle*400);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b36:	fb03 f202 	mul.w	r2, r3, r2
 8002b3a:	4b4d      	ldr	r3, [pc, #308]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, 0);
 8002b40:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2200      	movs	r2, #0
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40

		if (turn > 0)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	dd2c      	ble.n	8002ba8 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0xf0>
		{
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (drive_duty_cycle * 0)*400); //l_front
 8002b4e:	4b47      	ldr	r3, [pc, #284]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8002b56:	4b45      	ldr	r3, [pc, #276]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, (drive_duty_cycle - turn)*(400)); //r_front
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b68:	fb03 f202 	mul.w	r2, r3, r2
 8002b6c:	4b3f      	ldr	r3, [pc, #252]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2200      	movs	r2, #0
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, (drive_duty_cycle * 0)*400);  //l_back
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 0);
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2200      	movs	r2, #0
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, (drive_duty_cycle - turn)*(400));		//r_back
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b94:	fb03 f202 	mul.w	r2, r3, r2
 8002b98:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, 0);
 8002b9e:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, (drive_duty_cycle * -1) *400);

		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, 0);
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, (drive_duty_cycle * -1) *400);
	}
}
 8002ba6:	e05b      	b.n	8002c60 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1a8>
		else if (turn < 0)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	da58      	bge.n	8002c60 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1a8>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (drive_duty_cycle - (turn*-1))*(400));
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002bb8:	fb03 f202 	mul.w	r2, r3, r2
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8002bc2:	4b2a      	ldr	r3, [pc, #168]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, (drive_duty_cycle * 0)*400);
 8002bca:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, (drive_duty_cycle - (turn*-1))*(400));
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4413      	add	r3, r2
 8002be0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002be4:	fb03 f202 	mul.w	r2, r3, r2
 8002be8:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 0);
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, (drive_duty_cycle * 0)*400);
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, 0);
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2200      	movs	r2, #0
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c06:	e02b      	b.n	8002c60 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1a8>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 8002c08:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, (drive_duty_cycle * -1) *400);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1bc>)
 8002c14:	fb03 f202 	mul.w	r2, r3, r2
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 0);
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, (drive_duty_cycle * -1) *400);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a12      	ldr	r2, [pc, #72]	; (8002c74 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1bc>)
 8002c2a:	fb03 f202 	mul.w	r2, r3, r2
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 0);
 8002c34:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, (drive_duty_cycle * -1) *400);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1bc>)
 8002c40:	fb03 f202 	mul.w	r2, r3, r2
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, 0);
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, (drive_duty_cycle * -1) *400);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1bc>)
 8002c56:	fb03 f202 	mul.w	r2, r3, r2
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <_Z10ugv_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	20000094 	.word	0x20000094
 8002c70:	200000e0 	.word	0x200000e0
 8002c74:	fffffe70 	.word	0xfffffe70

08002c78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d80d      	bhi.n	8002ca8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	fa22 f103 	lsr.w	r1, r2, r3
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	b2ca      	uxtb	r2, r1
 8002c9e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e7ee      	b.n	8002c86 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d811      	bhi.n	8002cf2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6839      	ldr	r1, [r7, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	440a      	add	r2, r1
 8002cd8:	7812      	ldrb	r2, [r2, #0]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	00d2      	lsls	r2, r2, #3
 8002ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3301      	adds	r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e7ea      	b.n	8002cc8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	08009090 	.word	0x08009090

08002d20 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ffe5 	bl	8002d00 <_ZN3ros11Subscriber_C1Ev>
 8002d36:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3310      	adds	r3, #16
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fd1d 	bl	8002780 <_ZN13geometry_msgs5TwistC1Ev>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	609a      	str	r2, [r3, #8]
  };
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	08009034 	.word	0x08009034

08002d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
  }
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe febb 	bl	8001b08 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002da6:	461a      	mov	r2, r3
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002db4:	461a      	mov	r2, r3
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b18      	cmp	r3, #24
 8002de4:	dc1b      	bgt.n	8002e1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68f9      	ldr	r1, [r7, #12]
 8002dea:	f241 1322 	movw	r3, #4386	; 0x1122
 8002dee:	440b      	add	r3, r1
 8002df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10e      	bne.n	8002e16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x44>
      {
        subscribers[i] = &s;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	f241 1322 	movw	r3, #4386	; 0x1122
 8002e00:	440b      	add	r3, r1
 8002e02:	6839      	ldr	r1, [r7, #0]
 8002e04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        s.id_ = i + 100;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	605a      	str	r2, [r3, #4]
        return true;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e004      	b.n	8002e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e7e0      	b.n	8002de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8002e1e:	2300      	movs	r3, #0
  }
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe ff80 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 8002e3e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d905      	bls.n	8002e62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e68:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00e      	beq.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e76:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d906      	bls.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e86:	461a      	mov	r2, r3
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d015      	beq.n	8002ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe ff4d 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad2      	subs	r2, r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	bf8c      	ite	hi
 8002eb6:	2301      	movhi	r3, #1
 8002eb8:	2300      	movls	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8002ec0:	f06f 0301 	mvn.w	r3, #1
 8002ec4:	e229      	b.n	800331a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ee>
      int data = hardware_.read();
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fe38 	bl	8001b40 <_ZN13STM32Hardware4readEv>
 8002ed0:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f2c0 8202 	blt.w	80032de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b2>
      checksum_ += data;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002ee0:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002eee:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002ef8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002efc:	2b07      	cmp	r3, #7
 8002efe:	d12d      	bne.n	8002f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f06:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8002f12:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	b2d1      	uxtb	r1, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	441a      	add	r2, r3
 8002f1e:	f244 0324 	movw	r3, #16420	; 0x4024
 8002f22:	4413      	add	r3, r2
 8002f24:	460a      	mov	r2, r1
 8002f26:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f2e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002f32:	3b01      	subs	r3, #1
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002f3a:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f44:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1a0      	bne.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f52:	461a      	mov	r2, r3
 8002f54:	2308      	movs	r3, #8
 8002f56:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002f5a:	e798      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f62:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d130      	bne.n	8002fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2bff      	cmp	r3, #255	; 0xff
 8002f6e:	d112      	bne.n	8002f96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002f76:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002f82:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3314      	adds	r3, #20
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002f90:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8002f94:	e77b      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe fecf 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	bf8c      	ite	hi
 8002fae:	2301      	movhi	r3, #1
 8002fb0:	2300      	movls	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f43f af6a 	beq.w	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8002fc6:	f06f 0301 	mvn.w	r3, #1
 8002fca:	e1a6      	b.n	800331a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ee>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002fd2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d121      	bne.n	800301e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2bfe      	cmp	r3, #254	; 0xfe
 8002fde:	d10b      	bne.n	8002ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002fe6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002fea:	3301      	adds	r3, #1
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002ff2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002ff6:	e74a      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002ffe:	461a      	mov	r2, r3
 8003000:	2300      	movs	r3, #0
 8003002:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800300c:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003010:	2b00      	cmp	r3, #0
 8003012:	f47f af3c 	bne.w	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f983 	bl	8003322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800301c:	e737      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003024:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003028:	2b02      	cmp	r3, #2
 800302a:	d120      	bne.n	800306e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003040:	461a      	mov	r2, r3
 8003042:	2300      	movs	r3, #0
 8003044:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800304e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003052:	3301      	adds	r3, #1
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800305a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003064:	461a      	mov	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800306c:	e70f      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003074:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003078:	2b03      	cmp	r3, #3
 800307a:	d118      	bne.n	80030ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003082:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	4413      	add	r3, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003092:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800309c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80030a0:	3301      	adds	r3, #1
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80030a8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80030ac:	e6ef      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80030b4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d11f      	bne.n	80030fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80030c2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80030c6:	425a      	negs	r2, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	bf58      	it	pl
 80030ce:	4253      	negpl	r3, r2
 80030d0:	2bff      	cmp	r3, #255	; 0xff
 80030d2:	d10b      	bne.n	80030ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80030da:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80030de:	3301      	adds	r3, #1
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80030e6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80030ea:	e6d0      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80030f2:	461a      	mov	r2, r3
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80030fa:	e6c8      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003102:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003106:	2b05      	cmp	r3, #5
 8003108:	d119      	bne.n	800313e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800311e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003122:	3301      	adds	r3, #1
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800312a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800313c:	e6a7      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003144:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003148:	2b06      	cmp	r3, #6
 800314a:	d123      	bne.n	8003194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003152:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	4413      	add	r3, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003162:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800316c:	461a      	mov	r2, r3
 800316e:	2307      	movs	r3, #7
 8003170:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800317a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800317e:	2b00      	cmp	r3, #0
 8003180:	f47f ae85 	bne.w	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800318a:	461a      	mov	r2, r3
 800318c:	2308      	movs	r3, #8
 800318e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003192:	e67c      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800319a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800319e:	2b08      	cmp	r3, #8
 80031a0:	f47f ae75 	bne.w	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80031aa:	461a      	mov	r2, r3
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80031b8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80031bc:	425a      	negs	r2, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	bf58      	it	pl
 80031c4:	4253      	negpl	r3, r2
 80031c6:	2bff      	cmp	r3, #255	; 0xff
 80031c8:	f47f ae61 	bne.w	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80031d2:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8a1 	bl	8003322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f8bd 	bl	8003360 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80031ec:	461a      	mov	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
 8003206:	e088      	b.n	800331a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ee>
          else if (topic_ == TopicInfo::ID_TIME)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800320e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003212:	2b0a      	cmp	r3, #10
 8003214:	d108      	bne.n	8003228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	f244 0324 	movw	r3, #16420	; 0x4024
 800321c:	4413      	add	r3, r2
 800321e:	4619      	mov	r1, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f98b 	bl	800353c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003226:	e632      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800322e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003232:	2b06      	cmp	r3, #6
 8003234:	d112      	bne.n	800325c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	f244 5314 	movw	r3, #17684	; 0x4514
 800323c:	4413      	add	r3, r2
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	f244 0224 	movw	r2, #16420	; 0x4024
 8003244:	440a      	add	r2, r1
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe fa8e 	bl	800176a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 800325a:	e618      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003262:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003266:	2b0b      	cmp	r3, #11
 8003268:	d106      	bne.n	8003278 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003276:	e60a      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800327e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003282:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	f241 1322 	movw	r3, #4386	; 0x1122
 800328c:	440b      	add	r3, r1
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f43f adfb 	beq.w	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800329e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80032a2:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	f241 1322 	movw	r3, #4386	; 0x1122
 80032ac:	440b      	add	r3, r1
 80032ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80032b8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80032bc:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	f241 1322 	movw	r3, #4386	; 0x1122
 80032c6:	440b      	add	r3, r1
 80032c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	f244 0324 	movw	r3, #16420	; 0x4024
 80032d6:	440b      	add	r3, r1
 80032d8:	4619      	mov	r1, r3
 80032da:	4790      	blx	r2
    while (true)
 80032dc:	e5d7      	b.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80032de:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80032e6:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d014      	beq.n	8003318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ec>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80032f4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003300:	4293      	cmp	r3, r2
 8003302:	d909      	bls.n	8003318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ec>
      requestSyncTime();
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f80c 	bl	8003322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003310:	461a      	mov	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8003318:	2300      	movs	r3, #0
  }
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800332a:	f107 030c 	add.w	r3, r7, #12
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd fd78 	bl	8000e24 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f107 020c 	add.w	r2, r7, #12
 800333e:	210a      	movs	r1, #10
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
    rt_time = hardware_.time();
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe fcf8 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 800334e:	4602      	mov	r2, r0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003356:	615a      	str	r2, [r3, #20]
  }
 8003358:	bf00      	nop
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b08b      	sub	sp, #44	; 0x2c
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003368:	f107 030c 	add.w	r3, r7, #12
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd fe49 	bl	8001004 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	2b18      	cmp	r3, #24
 800337a:	dc69      	bgt.n	8003450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xf0>
    {
      if (publishers[i] != 0) // non-empty slot
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003380:	f241 1308 	movw	r3, #4360	; 0x1108
 8003384:	440b      	add	r3, r1
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d05b      	beq.n	8003448 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      {
        ti.topic_id = publishers[i]->id_;
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003394:	f241 1308 	movw	r3, #4360	; 0x1108
 8003398:	440b      	add	r3, r1
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80033ae:	440b      	add	r3, r1
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033be:	f241 1308 	movw	r3, #4360	; 0x1108
 80033c2:	440b      	add	r3, r1
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	6858      	ldr	r0, [r3, #4]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d0:	f241 1308 	movw	r3, #4360	; 0x1108
 80033d4:	440b      	add	r3, r1
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3308      	adds	r3, #8
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4798      	blx	r3
 80033e6:	4603      	mov	r3, r0
 80033e8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ee:	f241 1308 	movw	r3, #4360	; 0x1108
 80033f2:	440b      	add	r3, r1
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	6858      	ldr	r0, [r3, #4]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003400:	f241 1308 	movw	r3, #4360	; 0x1108
 8003404:	440b      	add	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4798      	blx	r3
 8003416:	4603      	mov	r3, r0
 8003418:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800341a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800341e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681c      	ldr	r4, [r3, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800342a:	f241 1308 	movw	r3, #4360	; 0x1108
 800342e:	440b      	add	r3, r1
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe fb24 	bl	8001a84 <_ZN3ros9Publisher15getEndpointTypeEv>
 800343c:	4601      	mov	r1, r0
 800343e:	f107 030c 	add.w	r3, r7, #12
 8003442:	461a      	mov	r2, r3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	3301      	adds	r3, #1
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
 800344e:	e792      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003450:	2300      	movs	r3, #0
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	2b18      	cmp	r3, #24
 8003458:	dc65      	bgt.n	8003526 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1c6>
    {
      if (subscribers[i] != 0) // non-empty slot
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800345e:	f241 1322 	movw	r3, #4386	; 0x1122
 8003462:	440b      	add	r3, r1
 8003464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d058      	beq.n	800351e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1be>
      {
        ti.topic_id = subscribers[i]->id_;
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003470:	f241 1322 	movw	r3, #4386	; 0x1122
 8003474:	440b      	add	r3, r1
 8003476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	b29b      	uxth	r3, r3
 800347e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003484:	f241 1322 	movw	r3, #4386	; 0x1122
 8003488:	440b      	add	r3, r1
 800348a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003496:	f241 1322 	movw	r3, #4386	; 0x1122
 800349a:	440b      	add	r3, r1
 800349c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a4:	f241 1322 	movw	r3, #4386	; 0x1122
 80034a8:	440b      	add	r3, r1
 80034aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3308      	adds	r3, #8
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4798      	blx	r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034be:	f241 1322 	movw	r3, #4386	; 0x1122
 80034c2:	440b      	add	r3, r1
 80034c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034cc:	f241 1322 	movw	r3, #4386	; 0x1122
 80034d0:	440b      	add	r3, r1
 80034d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4798      	blx	r3
 80034de:	4603      	mov	r3, r0
 80034e0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80034e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e6:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681c      	ldr	r4, [r3, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f2:	f241 1322 	movw	r3, #4386	; 0x1122
 80034f6:	440b      	add	r3, r1
 80034f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003500:	f241 1322 	movw	r3, #4386	; 0x1122
 8003504:	440b      	add	r3, r1
 8003506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3304      	adds	r3, #4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4798      	blx	r3
 8003512:	4601      	mov	r1, r0
 8003514:	f107 030c 	add.w	r3, r7, #12
 8003518:	461a      	mov	r2, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	3301      	adds	r3, #1
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
 8003524:	e796      	b.n	8003454 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xf4>
      }
    }
    configured_ = true;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8003532:	bf00      	nop
 8003534:	372c      	adds	r7, #44	; 0x2c
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}
	...

0800353c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003546:	f107 0308 	add.w	r3, r7, #8
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd fc6a 	bl	8000e24 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fbf2 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 800355a:	4602      	mov	r2, r0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fd fcc8 	bl	8000f04 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	4915      	ldr	r1, [pc, #84]	; (80035d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800357a:	fba1 1303 	umull	r1, r3, r1, r3
 800357e:	099b      	lsrs	r3, r3, #6
 8003580:	4413      	add	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003584:	6939      	ldr	r1, [r7, #16]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800358a:	fba3 0302 	umull	r0, r3, r3, r2
 800358e:	099b      	lsrs	r3, r3, #6
 8003590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003594:	fb00 f303 	mul.w	r3, r0, r3
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	440b      	add	r3, r1
 80035a2:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80035a4:	f107 0308 	add.w	r3, r7, #8
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f8bf 	bl	8003730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe fbc1 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 80035bc:	4602      	mov	r2, r0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80035c4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 80035c8:	bf00      	nop
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	10624dd3 	.word	0x10624dd3
 80035d4:	000f4240 	.word	0x000f4240

080035d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b63      	cmp	r3, #99	; 0x63
 80035e8:	dd0b      	ble.n	8003602 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80035f0:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80035f4:	f083 0301 	eor.w	r3, r3, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	e090      	b.n	8003724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68f9      	ldr	r1, [r7, #12]
 800360a:	f244 2324 	movw	r3, #16932	; 0x4224
 800360e:	440b      	add	r3, r1
 8003610:	3307      	adds	r3, #7
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4790      	blx	r2
 8003618:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003620:	22ff      	movs	r2, #255	; 0xff
 8003622:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800362c:	22fe      	movs	r2, #254	; 0xfe
 800362e:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800363c:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	b29b      	uxth	r3, r3
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	b29b      	uxth	r3, r3
 8003648:	b2da      	uxtb	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003650:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800365a:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003664:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8003668:	4413      	add	r3, r2
 800366a:	b2db      	uxtb	r3, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003676:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003684:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	b21b      	sxth	r3, r3
 800368c:	121b      	asrs	r3, r3, #8
 800368e:	b21b      	sxth	r3, r3
 8003690:	b2da      	uxtb	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003698:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80036a0:	2305      	movs	r3, #5
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	3306      	adds	r3, #6
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	dc0e      	bgt.n	80036cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	441a      	add	r2, r3
 80036b4:	f244 2324 	movw	r3, #16932	; 0x4224
 80036b8:	4413      	add	r3, r2
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	3301      	adds	r3, #1
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	e7eb      	b.n	80036a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	3307      	adds	r3, #7
 80036d0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	425a      	negs	r2, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	bf58      	it	pl
 80036dc:	4253      	negpl	r3, r2
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	1c59      	adds	r1, r3, #1
 80036e4:	6179      	str	r1, [r7, #20]
 80036e6:	43d2      	mvns	r2, r2
 80036e8:	b2d1      	uxtb	r1, r2
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	441a      	add	r2, r3
 80036ee:	f244 2324 	movw	r3, #16932	; 0x4224
 80036f2:	4413      	add	r3, r2
 80036f4:	460a      	mov	r2, r1
 80036f6:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fe:	dc0b      	bgt.n	8003718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1d18      	adds	r0, r3, #4
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	f244 2324 	movw	r3, #16932	; 0x4224
 800370a:	4413      	add	r3, r2
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4619      	mov	r1, r3
 8003710:	f7fe fac8 	bl	8001ca4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	e005      	b.n	8003724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003718:	4904      	ldr	r1, [pc, #16]	; (800372c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f84c 	bl	80037b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003724:	4618      	mov	r0, r3
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	08008fc8 	.word	0x08008fc8

08003730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe fafd 	bl	8001d3e <_ZN13STM32Hardware4timeEv>
 8003744:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4917      	ldr	r1, [pc, #92]	; (80037ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 800374e:	fba1 1303 	umull	r1, r3, r1, r3
 8003752:	099b      	lsrs	r3, r3, #6
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800375e:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003768:	fba3 0302 	umull	r0, r3, r3, r2
 800376c:	099b      	lsrs	r3, r3, #6
 800376e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003772:	fb00 f303 	mul.w	r3, r0, r3
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x80>)
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	1aca      	subs	r2, r1, r3
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x84>)
 8003782:	4413      	add	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800378a:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	f244 0318 	movw	r3, #16408	; 0x4018
 8003792:	4413      	add	r3, r2
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	f244 021c 	movw	r2, #16412	; 0x401c
 800379a:	440a      	add	r2, r1
 800379c:	4611      	mov	r1, r2
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fc fed4 	bl	800054c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	10624dd3 	.word	0x10624dd3
 80037b0:	000f4240 	.word	0x000f4240
 80037b4:	3b9aca00 	.word	0x3b9aca00

080037b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	2103      	movs	r1, #3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f804 	bl	80037d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	460b      	mov	r3, r1
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80037e2:	f107 0314 	add.w	r3, r7, #20
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fdd0 	bl	800138c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80037ec:	7afb      	ldrb	r3, [r7, #11]
 80037ee:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f107 0214 	add.w	r2, r7, #20
 80037fe:	2107      	movs	r1, #7
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	4798      	blx	r3
  }
 8003804:	bf00      	nop
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_Z41__static_initialization_and_destruction_0ii>:
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d10d      	bne.n	8003838 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003822:	4293      	cmp	r3, r2
 8003824:	d108      	bne.n	8003838 <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 8003826:	4806      	ldr	r0, [pc, #24]	; (8003840 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003828:	f7ff f83e 	bl	80028a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> ugv_vel_sub("cmd_vel_ugv", &ugv_vel_cb);	//subscribing a topic from rpi's topic
 800382c:	2301      	movs	r3, #1
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003830:	4905      	ldr	r1, [pc, #20]	; (8003848 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003832:	4806      	ldr	r0, [pc, #24]	; (800384c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003834:	f7ff fa74 	bl	8002d20 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	2000034c 	.word	0x2000034c
 8003844:	08002ab9 	.word	0x08002ab9
 8003848:	08009004 	.word	0x08009004
 800384c:	20004888 	.word	0x20004888

08003850 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3310      	adds	r3, #16
 800385e:	6839      	ldr	r1, [r7, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe ffcf 	bl	8002804 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	3210      	adds	r2, #16
 800386e:	4610      	mov	r0, r2
 8003870:	4798      	blx	r3
  }
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3310      	adds	r3, #16
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe ffd6 	bl	8002850 <_ZN13geometry_msgs5Twist7getTypeEv>
 80038a4:	4603      	mov	r3, r0
  }
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3310      	adds	r3, #16
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe ffd6 	bl	800286c <_ZN13geometry_msgs5Twist6getMD5Ev>
 80038c0:	4603      	mov	r3, r0
  }
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
    return configured_;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80038d8:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <_GLOBAL__sub_I_nh>:
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038f0:	2001      	movs	r0, #1
 80038f2:	f7ff ff8b 	bl	800380c <_Z41__static_initialization_and_destruction_0ii>
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <HAL_MspInit+0x44>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	4a0e      	ldr	r2, [pc, #56]	; (800393c <HAL_MspInit+0x44>)
 8003904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003908:	6413      	str	r3, [r2, #64]	; 0x40
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <HAL_MspInit+0x44>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	607b      	str	r3, [r7, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_MspInit+0x44>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	4a08      	ldr	r2, [pc, #32]	; (800393c <HAL_MspInit+0x44>)
 800391c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003920:	6453      	str	r3, [r2, #68]	; 0x44
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_MspInit+0x44>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800

08003940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a27      	ldr	r2, [pc, #156]	; (80039ec <HAL_TIM_Base_MspInit+0xac>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d114      	bne.n	800397c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003952:	4b27      	ldr	r3, [pc, #156]	; (80039f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a26      	ldr	r2, [pc, #152]	; (80039f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003958:	f043 0302 	orr.w	r3, r3, #2
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	2100      	movs	r1, #0
 800396e:	201d      	movs	r0, #29
 8003970:	f000 fc9b 	bl	80042aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003974:	201d      	movs	r0, #29
 8003976:	f000 fcb4 	bl	80042e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800397a:	e032      	b.n	80039e2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <HAL_TIM_Base_MspInit+0xb4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d114      	bne.n	80039b0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003986:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4a19      	ldr	r2, [pc, #100]	; (80039f0 <HAL_TIM_Base_MspInit+0xb0>)
 800398c:	f043 0304 	orr.w	r3, r3, #4
 8003990:	6413      	str	r3, [r2, #64]	; 0x40
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	201e      	movs	r0, #30
 80039a4:	f000 fc81 	bl	80042aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039a8:	201e      	movs	r0, #30
 80039aa:	f000 fc9a 	bl	80042e2 <HAL_NVIC_EnableIRQ>
}
 80039ae:	e018      	b.n	80039e2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM11)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <HAL_TIM_Base_MspInit+0xb8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d113      	bne.n	80039e2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <HAL_TIM_Base_MspInit+0xb0>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <HAL_TIM_Base_MspInit+0xb0>)
 80039c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c4:	6453      	str	r3, [r2, #68]	; 0x44
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_TIM_Base_MspInit+0xb0>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	2100      	movs	r1, #0
 80039d6:	201a      	movs	r0, #26
 80039d8:	f000 fc67 	bl	80042aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80039dc:	201a      	movs	r0, #26
 80039de:	f000 fc80 	bl	80042e2 <HAL_NVIC_EnableIRQ>
}
 80039e2:	bf00      	nop
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40014800 	.word	0x40014800

080039fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08c      	sub	sp, #48	; 0x30
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	f107 031c 	add.w	r3, r7, #28
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a42      	ldr	r2, [pc, #264]	; (8003b24 <HAL_TIM_MspPostInit+0x128>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d139      	bne.n	8003a92 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1e:	4b42      	ldr	r3, [pc, #264]	; (8003b28 <HAL_TIM_MspPostInit+0x12c>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4a41      	ldr	r2, [pc, #260]	; (8003b28 <HAL_TIM_MspPostInit+0x12c>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2a:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_TIM_MspPostInit+0x12c>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	61bb      	str	r3, [r7, #24]
 8003a34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a36:	4b3c      	ldr	r3, [pc, #240]	; (8003b28 <HAL_TIM_MspPostInit+0x12c>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4a3b      	ldr	r2, [pc, #236]	; (8003b28 <HAL_TIM_MspPostInit+0x12c>)
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	6313      	str	r3, [r2, #48]	; 0x30
 8003a42:	4b39      	ldr	r3, [pc, #228]	; (8003b28 <HAL_TIM_MspPostInit+0x12c>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a4e:	23c0      	movs	r3, #192	; 0xc0
 8003a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a62:	f107 031c 	add.w	r3, r7, #28
 8003a66:	4619      	mov	r1, r3
 8003a68:	4830      	ldr	r0, [pc, #192]	; (8003b2c <HAL_TIM_MspPostInit+0x130>)
 8003a6a:	f001 f85f 	bl	8004b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a80:	2302      	movs	r3, #2
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4829      	ldr	r0, [pc, #164]	; (8003b30 <HAL_TIM_MspPostInit+0x134>)
 8003a8c:	f001 f84e 	bl	8004b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003a90:	e043      	b.n	8003b1a <HAL_TIM_MspPostInit+0x11e>
  else if(htim->Instance==TIM4)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a27      	ldr	r2, [pc, #156]	; (8003b34 <HAL_TIM_MspPostInit+0x138>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d11d      	bne.n	8003ad8 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a9c:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_TIM_MspPostInit+0x12c>)
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <HAL_TIM_MspPostInit+0x12c>)
 8003aa2:	f043 0308 	orr.w	r3, r3, #8
 8003aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa8:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <HAL_TIM_MspPostInit+0x12c>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003ab4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aba:	2302      	movs	r3, #2
 8003abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aca:	f107 031c 	add.w	r3, r7, #28
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4819      	ldr	r0, [pc, #100]	; (8003b38 <HAL_TIM_MspPostInit+0x13c>)
 8003ad2:	f001 f82b 	bl	8004b2c <HAL_GPIO_Init>
}
 8003ad6:	e020      	b.n	8003b1a <HAL_TIM_MspPostInit+0x11e>
  else if(htim->Instance==TIM11)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a17      	ldr	r2, [pc, #92]	; (8003b3c <HAL_TIM_MspPostInit+0x140>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d11b      	bne.n	8003b1a <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_TIM_MspPostInit+0x12c>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <HAL_TIM_MspPostInit+0x12c>)
 8003ae8:	f043 0320 	orr.w	r3, r3, #32
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_TIM_MspPostInit+0x12c>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM11_Servo_Pin;
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	2302      	movs	r3, #2
 8003b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b06:	2300      	movs	r3, #0
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM11_Servo_GPIO_Port, &GPIO_InitStruct);
 8003b0e:	f107 031c 	add.w	r3, r7, #28
 8003b12:	4619      	mov	r1, r3
 8003b14:	480a      	ldr	r0, [pc, #40]	; (8003b40 <HAL_TIM_MspPostInit+0x144>)
 8003b16:	f001 f809 	bl	8004b2c <HAL_GPIO_Init>
}
 8003b1a:	bf00      	nop
 8003b1c:	3730      	adds	r7, #48	; 0x30
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40020000 	.word	0x40020000
 8003b30:	40020800 	.word	0x40020800
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40020c00 	.word	0x40020c00
 8003b3c:	40014800 	.word	0x40014800
 8003b40:	40021400 	.word	0x40021400

08003b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b0b0      	sub	sp, #192	; 0xc0
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b5c:	f107 031c 	add.w	r3, r7, #28
 8003b60:	2290      	movs	r2, #144	; 0x90
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f004 fff5 	bl	8008b54 <memset>
  if(huart->Instance==USART1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a96      	ldr	r2, [pc, #600]	; (8003dc8 <HAL_UART_MspInit+0x284>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d159      	bne.n	8003c28 <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b74:	2340      	movs	r3, #64	; 0x40
 8003b76:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b7c:	f107 031c 	add.w	r3, r7, #28
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 febd 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003b8c:	f7fd f924 	bl	8000dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b90:	4b8e      	ldr	r3, [pc, #568]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	4a8d      	ldr	r2, [pc, #564]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003b96:	f043 0310 	orr.w	r3, r3, #16
 8003b9a:	6453      	str	r3, [r2, #68]	; 0x44
 8003b9c:	4b8b      	ldr	r3, [pc, #556]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba8:	4b88      	ldr	r3, [pc, #544]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	4a87      	ldr	r2, [pc, #540]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003bae:	f043 0302 	orr.w	r3, r3, #2
 8003bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb4:	4b85      	ldr	r3, [pc, #532]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USART1_Rx_Claw_Pin;
 8003bc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003bda:	2304      	movs	r3, #4
 8003bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(USART1_Rx_Claw_GPIO_Port, &GPIO_InitStruct);
 8003be0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003be4:	4619      	mov	r1, r3
 8003be6:	487a      	ldr	r0, [pc, #488]	; (8003dd0 <HAL_UART_MspInit+0x28c>)
 8003be8:	f000 ffa0 	bl	8004b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_Tx_Claw_Pin;
 8003bec:	2340      	movs	r3, #64	; 0x40
 8003bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c04:	2307      	movs	r3, #7
 8003c06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(USART1_Tx_Claw_GPIO_Port, &GPIO_InitStruct);
 8003c0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c0e:	4619      	mov	r1, r3
 8003c10:	486f      	ldr	r0, [pc, #444]	; (8003dd0 <HAL_UART_MspInit+0x28c>)
 8003c12:	f000 ff8b 	bl	8004b2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c16:	2200      	movs	r2, #0
 8003c18:	2100      	movs	r1, #0
 8003c1a:	2025      	movs	r0, #37	; 0x25
 8003c1c:	f000 fb45 	bl	80042aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c20:	2025      	movs	r0, #37	; 0x25
 8003c22:	f000 fb5e 	bl	80042e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c26:	e0ca      	b.n	8003dbe <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART3)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a69      	ldr	r2, [pc, #420]	; (8003dd4 <HAL_UART_MspInit+0x290>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	f040 80c5 	bne.w	8003dbe <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c38:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c3e:	f107 031c 	add.w	r3, r7, #28
 8003c42:	4618      	mov	r0, r3
 8003c44:	f001 fe5c 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_UART_MspInit+0x10e>
      Error_Handler();
 8003c4e:	f7fd f8c3 	bl	8000dd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c52:	4b5e      	ldr	r3, [pc, #376]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	4a5d      	ldr	r2, [pc, #372]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5e:	4b5b      	ldr	r3, [pc, #364]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6a:	4b58      	ldr	r3, [pc, #352]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	4a57      	ldr	r2, [pc, #348]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003c70:	f043 0302 	orr.w	r3, r3, #2
 8003c74:	6313      	str	r3, [r2, #48]	; 0x30
 8003c76:	4b55      	ldr	r3, [pc, #340]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c82:	4b52      	ldr	r3, [pc, #328]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	4a51      	ldr	r2, [pc, #324]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003c88:	f043 0308 	orr.w	r3, r3, #8
 8003c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8e:	4b4f      	ldr	r3, [pc, #316]	; (8003dcc <HAL_UART_MspInit+0x288>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003cb4:	2307      	movs	r3, #7
 8003cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4843      	ldr	r0, [pc, #268]	; (8003dd0 <HAL_UART_MspInit+0x28c>)
 8003cc2:	f000 ff33 	bl	8004b2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_Tx_Rpi_Pin|USART3_Rx_Rpi_Pin;
 8003cc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ce0:	2307      	movs	r3, #7
 8003ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ce6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003cea:	4619      	mov	r1, r3
 8003cec:	483a      	ldr	r0, [pc, #232]	; (8003dd8 <HAL_UART_MspInit+0x294>)
 8003cee:	f000 ff1d 	bl	8004b2c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003cf2:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003cf4:	4a3a      	ldr	r2, [pc, #232]	; (8003de0 <HAL_UART_MspInit+0x29c>)
 8003cf6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003cf8:	4b38      	ldr	r3, [pc, #224]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cfe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d00:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d06:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d0c:	4b33      	ldr	r3, [pc, #204]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d12:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d14:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d1a:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003d20:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003d26:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003d28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d2c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d2e:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003d34:	4829      	ldr	r0, [pc, #164]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003d36:	f000 faef 	bl	8004318 <HAL_DMA_Init>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_UART_MspInit+0x200>
      Error_Handler();
 8003d40:	f7fd f84a 	bl	8000dd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a25      	ldr	r2, [pc, #148]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003d48:	675a      	str	r2, [r3, #116]	; 0x74
 8003d4a:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <HAL_UART_MspInit+0x298>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003d52:	4a25      	ldr	r2, [pc, #148]	; (8003de8 <HAL_UART_MspInit+0x2a4>)
 8003d54:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003d56:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003d58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d5c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d5e:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003d60:	2240      	movs	r2, #64	; 0x40
 8003d62:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d64:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003d6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d70:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d72:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d78:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003d7e:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003d84:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003d86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d8a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d8c:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003d92:	4814      	ldr	r0, [pc, #80]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003d94:	f000 fac0 	bl	8004318 <HAL_DMA_Init>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8003d9e:	f7fd f81b 	bl	8000dd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003da6:	671a      	str	r2, [r3, #112]	; 0x70
 8003da8:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <HAL_UART_MspInit+0x2a0>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003dae:	2200      	movs	r2, #0
 8003db0:	2100      	movs	r1, #0
 8003db2:	2027      	movs	r0, #39	; 0x27
 8003db4:	f000 fa79 	bl	80042aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003db8:	2027      	movs	r0, #39	; 0x27
 8003dba:	f000 fa92 	bl	80042e2 <HAL_NVIC_EnableIRQ>
}
 8003dbe:	bf00      	nop
 8003dc0:	37c0      	adds	r7, #192	; 0xc0
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40011000 	.word	0x40011000
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40020400 	.word	0x40020400
 8003dd4:	40004800 	.word	0x40004800
 8003dd8:	40020c00 	.word	0x40020c00
 8003ddc:	20000288 	.word	0x20000288
 8003de0:	40026028 	.word	0x40026028
 8003de4:	200002e8 	.word	0x200002e8
 8003de8:	40026058 	.word	0x40026058

08003dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003df0:	e7fe      	b.n	8003df0 <NMI_Handler+0x4>

08003df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003df2:	b480      	push	{r7}
 8003df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003df6:	e7fe      	b.n	8003df6 <HardFault_Handler+0x4>

08003df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dfc:	e7fe      	b.n	8003dfc <MemManage_Handler+0x4>

08003dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e02:	e7fe      	b.n	8003e02 <BusFault_Handler+0x4>

08003e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e08:	e7fe      	b.n	8003e08 <UsageFault_Handler+0x4>

08003e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e1c:	bf00      	nop
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e26:	b480      	push	{r7}
 8003e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e38:	f000 f918 	bl	800406c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e3c:	bf00      	nop
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <DMA1_Stream1_IRQHandler+0x10>)
 8003e46:	f000 fc07 	bl	8004658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000288 	.word	0x20000288

08003e54 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <DMA1_Stream3_IRQHandler+0x10>)
 8003e5a:	f000 fbfd 	bl	8004658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	200002e8 	.word	0x200002e8

08003e68 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003e6c:	4802      	ldr	r0, [pc, #8]	; (8003e78 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003e6e:	f002 fb21 	bl	80064b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	2000012c 	.word	0x2000012c

08003e7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e80:	4802      	ldr	r0, [pc, #8]	; (8003e8c <TIM3_IRQHandler+0x10>)
 8003e82:	f002 fb17 	bl	80064b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000094 	.word	0x20000094

08003e90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e94:	4802      	ldr	r0, [pc, #8]	; (8003ea0 <TIM4_IRQHandler+0x10>)
 8003e96:	f002 fb0d 	bl	80064b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200000e0 	.word	0x200000e0

08003ea4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ea8:	4802      	ldr	r0, [pc, #8]	; (8003eb4 <USART1_IRQHandler+0x10>)
 8003eaa:	f003 fbab 	bl	8007604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000178 	.word	0x20000178

08003eb8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ebc:	4802      	ldr	r0, [pc, #8]	; (8003ec8 <USART3_IRQHandler+0x10>)
 8003ebe:	f003 fba1 	bl	8007604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000200 	.word	0x20000200

08003ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
	return 1;
 8003ed0:	2301      	movs	r3, #1
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <_kill>:

int _kill(int pid, int sig)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ee6:	f004 fdfd 	bl	8008ae4 <__errno>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2216      	movs	r2, #22
 8003eee:	601a      	str	r2, [r3, #0]
	return -1;
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_exit>:

void _exit (int status)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f04:	f04f 31ff 	mov.w	r1, #4294967295
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ffe7 	bl	8003edc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f0e:	e7fe      	b.n	8003f0e <_exit+0x12>

08003f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f18:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <_sbrk+0x5c>)
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <_sbrk+0x60>)
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <_sbrk+0x64>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <_sbrk+0x64>)
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <_sbrk+0x68>)
 8003f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <_sbrk+0x64>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4413      	add	r3, r2
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d207      	bcs.n	8003f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f40:	f004 fdd0 	bl	8008ae4 <__errno>
 8003f44:	4603      	mov	r3, r0
 8003f46:	220c      	movs	r2, #12
 8003f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	e009      	b.n	8003f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <_sbrk+0x64>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <_sbrk+0x64>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	4a05      	ldr	r2, [pc, #20]	; (8003f74 <_sbrk+0x64>)
 8003f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f62:	68fb      	ldr	r3, [r7, #12]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20080000 	.word	0x20080000
 8003f70:	00000400 	.word	0x00000400
 8003f74:	200048e8 	.word	0x200048e8
 8003f78:	20004900 	.word	0x20004900

08003f7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <SystemInit+0x20>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	4a05      	ldr	r2, [pc, #20]	; (8003f9c <SystemInit+0x20>)
 8003f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fa4:	480d      	ldr	r0, [pc, #52]	; (8003fdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fa6:	490e      	ldr	r1, [pc, #56]	; (8003fe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fa8:	4a0e      	ldr	r2, [pc, #56]	; (8003fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fac:	e002      	b.n	8003fb4 <LoopCopyDataInit>

08003fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fb2:	3304      	adds	r3, #4

08003fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fb8:	d3f9      	bcc.n	8003fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fba:	4a0b      	ldr	r2, [pc, #44]	; (8003fe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fbc:	4c0b      	ldr	r4, [pc, #44]	; (8003fec <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fc0:	e001      	b.n	8003fc6 <LoopFillZerobss>

08003fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fc4:	3204      	adds	r2, #4

08003fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fc8:	d3fb      	bcc.n	8003fc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003fca:	f7ff ffd7 	bl	8003f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fce:	f004 fd8f 	bl	8008af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fd2:	f7fc fae7 	bl	80005a4 <main>
  bx  lr    
 8003fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fd8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fe0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003fe4:	08009160 	.word	0x08009160
  ldr r2, =_sbss
 8003fe8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003fec:	20004900 	.word	0x20004900

08003ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ff0:	e7fe      	b.n	8003ff0 <ADC_IRQHandler>

08003ff2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ff6:	2003      	movs	r0, #3
 8003ff8:	f000 f94c 	bl	8004294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f000 f805 	bl	800400c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004002:	f7ff fc79 	bl	80038f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004014:	4b12      	ldr	r3, [pc, #72]	; (8004060 <HAL_InitTick+0x54>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b12      	ldr	r3, [pc, #72]	; (8004064 <HAL_InitTick+0x58>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	4619      	mov	r1, r3
 800401e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004022:	fbb3 f3f1 	udiv	r3, r3, r1
 8004026:	fbb2 f3f3 	udiv	r3, r2, r3
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f967 	bl	80042fe <HAL_SYSTICK_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e00e      	b.n	8004058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b0f      	cmp	r3, #15
 800403e:	d80a      	bhi.n	8004056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004040:	2200      	movs	r2, #0
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	f000 f92f 	bl	80042aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800404c:	4a06      	ldr	r2, [pc, #24]	; (8004068 <HAL_InitTick+0x5c>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000000 	.word	0x20000000
 8004064:	20000008 	.word	0x20000008
 8004068:	20000004 	.word	0x20000004

0800406c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_IncTick+0x20>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <HAL_IncTick+0x24>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4413      	add	r3, r2
 800407c:	4a04      	ldr	r2, [pc, #16]	; (8004090 <HAL_IncTick+0x24>)
 800407e:	6013      	str	r3, [r2, #0]
}
 8004080:	bf00      	nop
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000008 	.word	0x20000008
 8004090:	200048ec 	.word	0x200048ec

08004094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  return uwTick;
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <HAL_GetTick+0x14>)
 800409a:	681b      	ldr	r3, [r3, #0]
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	200048ec 	.word	0x200048ec

080040ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7ff ffee 	bl	8004094 <HAL_GetTick>
 80040b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d005      	beq.n	80040d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040c6:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <HAL_Delay+0x44>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040d2:	bf00      	nop
 80040d4:	f7ff ffde 	bl	8004094 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d8f7      	bhi.n	80040d4 <HAL_Delay+0x28>
  {
  }
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000008 	.word	0x20000008

080040f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <__NVIC_SetPriorityGrouping+0x40>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004110:	4013      	ands	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <__NVIC_SetPriorityGrouping+0x44>)
 800411e:	4313      	orrs	r3, r2
 8004120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <__NVIC_SetPriorityGrouping+0x40>)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	60d3      	str	r3, [r2, #12]
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000ed00 	.word	0xe000ed00
 8004138:	05fa0000 	.word	0x05fa0000

0800413c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004140:	4b04      	ldr	r3, [pc, #16]	; (8004154 <__NVIC_GetPriorityGrouping+0x18>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	0a1b      	lsrs	r3, r3, #8
 8004146:	f003 0307 	and.w	r3, r3, #7
}
 800414a:	4618      	mov	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	e000ed00 	.word	0xe000ed00

08004158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	2b00      	cmp	r3, #0
 8004168:	db0b      	blt.n	8004182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	f003 021f 	and.w	r2, r3, #31
 8004170:	4907      	ldr	r1, [pc, #28]	; (8004190 <__NVIC_EnableIRQ+0x38>)
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	2001      	movs	r0, #1
 800417a:	fa00 f202 	lsl.w	r2, r0, r2
 800417e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	e000e100 	.word	0xe000e100

08004194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	6039      	str	r1, [r7, #0]
 800419e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	db0a      	blt.n	80041be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	490c      	ldr	r1, [pc, #48]	; (80041e0 <__NVIC_SetPriority+0x4c>)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	0112      	lsls	r2, r2, #4
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	440b      	add	r3, r1
 80041b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041bc:	e00a      	b.n	80041d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4908      	ldr	r1, [pc, #32]	; (80041e4 <__NVIC_SetPriority+0x50>)
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	3b04      	subs	r3, #4
 80041cc:	0112      	lsls	r2, r2, #4
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	440b      	add	r3, r1
 80041d2:	761a      	strb	r2, [r3, #24]
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	e000e100 	.word	0xe000e100
 80041e4:	e000ed00 	.word	0xe000ed00

080041e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	; 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f1c3 0307 	rsb	r3, r3, #7
 8004202:	2b04      	cmp	r3, #4
 8004204:	bf28      	it	cs
 8004206:	2304      	movcs	r3, #4
 8004208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	3304      	adds	r3, #4
 800420e:	2b06      	cmp	r3, #6
 8004210:	d902      	bls.n	8004218 <NVIC_EncodePriority+0x30>
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3b03      	subs	r3, #3
 8004216:	e000      	b.n	800421a <NVIC_EncodePriority+0x32>
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800421c:	f04f 32ff 	mov.w	r2, #4294967295
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43da      	mvns	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	401a      	ands	r2, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004230:	f04f 31ff 	mov.w	r1, #4294967295
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	43d9      	mvns	r1, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004240:	4313      	orrs	r3, r2
         );
}
 8004242:	4618      	mov	r0, r3
 8004244:	3724      	adds	r7, #36	; 0x24
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3b01      	subs	r3, #1
 800425c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004260:	d301      	bcc.n	8004266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004262:	2301      	movs	r3, #1
 8004264:	e00f      	b.n	8004286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004266:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <SysTick_Config+0x40>)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3b01      	subs	r3, #1
 800426c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800426e:	210f      	movs	r1, #15
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	f7ff ff8e 	bl	8004194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <SysTick_Config+0x40>)
 800427a:	2200      	movs	r2, #0
 800427c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800427e:	4b04      	ldr	r3, [pc, #16]	; (8004290 <SysTick_Config+0x40>)
 8004280:	2207      	movs	r2, #7
 8004282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	e000e010 	.word	0xe000e010

08004294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ff29 	bl	80040f4 <__NVIC_SetPriorityGrouping>
}
 80042a2:	bf00      	nop
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	4603      	mov	r3, r0
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042bc:	f7ff ff3e 	bl	800413c <__NVIC_GetPriorityGrouping>
 80042c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	6978      	ldr	r0, [r7, #20]
 80042c8:	f7ff ff8e 	bl	80041e8 <NVIC_EncodePriority>
 80042cc:	4602      	mov	r2, r0
 80042ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d2:	4611      	mov	r1, r2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff ff5d 	bl	8004194 <__NVIC_SetPriority>
}
 80042da:	bf00      	nop
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	4603      	mov	r3, r0
 80042ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ff31 	bl	8004158 <__NVIC_EnableIRQ>
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff ffa2 	bl	8004250 <SysTick_Config>
 800430c:	4603      	mov	r3, r0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004324:	f7ff feb6 	bl	8004094 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e099      	b.n	8004468 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0201 	bic.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004354:	e00f      	b.n	8004376 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004356:	f7ff fe9d 	bl	8004094 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b05      	cmp	r3, #5
 8004362:	d908      	bls.n	8004376 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2203      	movs	r2, #3
 800436e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e078      	b.n	8004468 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e8      	bne.n	8004356 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4b38      	ldr	r3, [pc, #224]	; (8004470 <HAL_DMA_Init+0x158>)
 8004390:	4013      	ands	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d107      	bne.n	80043e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	4313      	orrs	r3, r2
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 0307 	bic.w	r3, r3, #7
 80043f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	2b04      	cmp	r3, #4
 8004408:	d117      	bne.n	800443a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00e      	beq.n	800443a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fb09 	bl	8004a34 <DMA_CheckFifoParam>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2240      	movs	r2, #64	; 0x40
 800442c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004436:	2301      	movs	r3, #1
 8004438:	e016      	b.n	8004468 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fac0 	bl	80049c8 <DMA_CalcBaseAndBitshift>
 8004448:	4603      	mov	r3, r0
 800444a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	223f      	movs	r2, #63	; 0x3f
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	e010803f 	.word	0xe010803f

08004474 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_DMA_Start_IT+0x26>
 8004496:	2302      	movs	r3, #2
 8004498:	e048      	b.n	800452c <HAL_DMA_Start_IT+0xb8>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d137      	bne.n	800451e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2202      	movs	r2, #2
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fa52 	bl	800496c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	223f      	movs	r2, #63	; 0x3f
 80044ce:	409a      	lsls	r2, r3
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0216 	orr.w	r2, r2, #22
 80044e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d007      	beq.n	800450c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0208 	orr.w	r2, r2, #8
 800450a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	e005      	b.n	800452a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004526:	2302      	movs	r3, #2
 8004528:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800452a:	7dfb      	ldrb	r3, [r7, #23]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004540:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004542:	f7ff fda7 	bl	8004094 <HAL_GetTick>
 8004546:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d008      	beq.n	8004566 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2280      	movs	r2, #128	; 0x80
 8004558:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e052      	b.n	800460c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0216 	bic.w	r2, r2, #22
 8004574:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004584:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d103      	bne.n	8004596 <HAL_DMA_Abort+0x62>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004592:	2b00      	cmp	r3, #0
 8004594:	d007      	beq.n	80045a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0208 	bic.w	r2, r2, #8
 80045a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045b6:	e013      	b.n	80045e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045b8:	f7ff fd6c 	bl	8004094 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b05      	cmp	r3, #5
 80045c4:	d90c      	bls.n	80045e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2203      	movs	r2, #3
 80045d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e015      	b.n	800460c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e4      	bne.n	80045b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	223f      	movs	r2, #63	; 0x3f
 80045f4:	409a      	lsls	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d004      	beq.n	8004632 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2280      	movs	r2, #128	; 0x80
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e00c      	b.n	800464c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2205      	movs	r2, #5
 8004636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004664:	4b8e      	ldr	r3, [pc, #568]	; (80048a0 <HAL_DMA_IRQHandler+0x248>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a8e      	ldr	r2, [pc, #568]	; (80048a4 <HAL_DMA_IRQHandler+0x24c>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	0a9b      	lsrs	r3, r3, #10
 8004670:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004676:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004682:	2208      	movs	r2, #8
 8004684:	409a      	lsls	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d01a      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d013      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0204 	bic.w	r2, r2, #4
 80046aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b0:	2208      	movs	r2, #8
 80046b2:	409a      	lsls	r2, r3
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	f043 0201 	orr.w	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	2201      	movs	r2, #1
 80046ca:	409a      	lsls	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d012      	beq.n	80046fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e6:	2201      	movs	r2, #1
 80046e8:	409a      	lsls	r2, r3
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	f043 0202 	orr.w	r2, r3, #2
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fe:	2204      	movs	r2, #4
 8004700:	409a      	lsls	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d012      	beq.n	8004730 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471c:	2204      	movs	r2, #4
 800471e:	409a      	lsls	r2, r3
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004728:	f043 0204 	orr.w	r2, r3, #4
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004734:	2210      	movs	r2, #16
 8004736:	409a      	lsls	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4013      	ands	r3, r2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d043      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d03c      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004752:	2210      	movs	r2, #16
 8004754:	409a      	lsls	r2, r3
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d018      	beq.n	800479a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d108      	bne.n	8004788 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d024      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
 8004786:	e01f      	b.n	80047c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01b      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	4798      	blx	r3
 8004798:	e016      	b.n	80047c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d107      	bne.n	80047b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0208 	bic.w	r2, r2, #8
 80047b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047cc:	2220      	movs	r2, #32
 80047ce:	409a      	lsls	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 808f 	beq.w	80048f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8087 	beq.w	80048f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ee:	2220      	movs	r2, #32
 80047f0:	409a      	lsls	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b05      	cmp	r3, #5
 8004800:	d136      	bne.n	8004870 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0216 	bic.w	r2, r2, #22
 8004810:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004820:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <HAL_DMA_IRQHandler+0x1da>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0208 	bic.w	r2, r2, #8
 8004840:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004846:	223f      	movs	r2, #63	; 0x3f
 8004848:	409a      	lsls	r2, r3
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004862:	2b00      	cmp	r3, #0
 8004864:	d07e      	beq.n	8004964 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4798      	blx	r3
        }
        return;
 800486e:	e079      	b.n	8004964 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01d      	beq.n	80048ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10d      	bne.n	80048a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004890:	2b00      	cmp	r3, #0
 8004892:	d031      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
 800489c:	e02c      	b.n	80048f8 <HAL_DMA_IRQHandler+0x2a0>
 800489e:	bf00      	nop
 80048a0:	20000000 	.word	0x20000000
 80048a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d023      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
 80048b8:	e01e      	b.n	80048f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10f      	bne.n	80048e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0210 	bic.w	r2, r2, #16
 80048d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d032      	beq.n	8004966 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d022      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2205      	movs	r2, #5
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0201 	bic.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	3301      	adds	r3, #1
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	429a      	cmp	r2, r3
 800492e:	d307      	bcc.n	8004940 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f2      	bne.n	8004924 <HAL_DMA_IRQHandler+0x2cc>
 800493e:	e000      	b.n	8004942 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004940:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
 8004962:	e000      	b.n	8004966 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004964:	bf00      	nop
    }
  }
}
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004988:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d108      	bne.n	80049ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049aa:	e007      	b.n	80049bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	60da      	str	r2, [r3, #12]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	3b10      	subs	r3, #16
 80049d8:	4a13      	ldr	r2, [pc, #76]	; (8004a28 <DMA_CalcBaseAndBitshift+0x60>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049e2:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <DMA_CalcBaseAndBitshift+0x64>)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d908      	bls.n	8004a08 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <DMA_CalcBaseAndBitshift+0x68>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	1d1a      	adds	r2, r3, #4
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	659a      	str	r2, [r3, #88]	; 0x58
 8004a06:	e006      	b.n	8004a16 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <DMA_CalcBaseAndBitshift+0x68>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	aaaaaaab 	.word	0xaaaaaaab
 8004a2c:	08009144 	.word	0x08009144
 8004a30:	fffffc00 	.word	0xfffffc00

08004a34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11f      	bne.n	8004a8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d856      	bhi.n	8004b02 <DMA_CheckFifoParam+0xce>
 8004a54:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <DMA_CheckFifoParam+0x28>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004a6d 	.word	0x08004a6d
 8004a60:	08004a7f 	.word	0x08004a7f
 8004a64:	08004a6d 	.word	0x08004a6d
 8004a68:	08004b03 	.word	0x08004b03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d046      	beq.n	8004b06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a7c:	e043      	b.n	8004b06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a86:	d140      	bne.n	8004b0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a8c:	e03d      	b.n	8004b0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a96:	d121      	bne.n	8004adc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d837      	bhi.n	8004b0e <DMA_CheckFifoParam+0xda>
 8004a9e:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <DMA_CheckFifoParam+0x70>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004abb 	.word	0x08004abb
 8004aac:	08004ab5 	.word	0x08004ab5
 8004ab0:	08004acd 	.word	0x08004acd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab8:	e030      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d025      	beq.n	8004b12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aca:	e022      	b.n	8004b12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ad4:	d11f      	bne.n	8004b16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ada:	e01c      	b.n	8004b16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d903      	bls.n	8004aea <DMA_CheckFifoParam+0xb6>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d003      	beq.n	8004af0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ae8:	e018      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
      break;
 8004aee:	e015      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00e      	beq.n	8004b1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
      break;
 8004b00:	e00b      	b.n	8004b1a <DMA_CheckFifoParam+0xe6>
      break;
 8004b02:	bf00      	nop
 8004b04:	e00a      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      break;
 8004b06:	bf00      	nop
 8004b08:	e008      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      break;
 8004b0a:	bf00      	nop
 8004b0c:	e006      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      break;
 8004b0e:	bf00      	nop
 8004b10:	e004      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      break;
 8004b12:	bf00      	nop
 8004b14:	e002      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      break;   
 8004b16:	bf00      	nop
 8004b18:	e000      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      break;
 8004b1a:	bf00      	nop
    }
  } 
  
  return status; 
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop

08004b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	; 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	e175      	b.n	8004e38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	f040 8164 	bne.w	8004e32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d005      	beq.n	8004b82 <HAL_GPIO_Init+0x56>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d130      	bne.n	8004be4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43db      	mvns	r3, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4013      	ands	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bb8:	2201      	movs	r2, #1
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 0201 	and.w	r2, r3, #1
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d017      	beq.n	8004c20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	43db      	mvns	r3, r3
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4013      	ands	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d123      	bne.n	8004c74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	08da      	lsrs	r2, r3, #3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3208      	adds	r2, #8
 8004c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	220f      	movs	r2, #15
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	08da      	lsrs	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3208      	adds	r2, #8
 8004c6e:	69b9      	ldr	r1, [r7, #24]
 8004c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	2203      	movs	r2, #3
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0203 	and.w	r2, r3, #3
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80be 	beq.w	8004e32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cb6:	4b66      	ldr	r3, [pc, #408]	; (8004e50 <HAL_GPIO_Init+0x324>)
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	4a65      	ldr	r2, [pc, #404]	; (8004e50 <HAL_GPIO_Init+0x324>)
 8004cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8004cc2:	4b63      	ldr	r3, [pc, #396]	; (8004e50 <HAL_GPIO_Init+0x324>)
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004cce:	4a61      	ldr	r2, [pc, #388]	; (8004e54 <HAL_GPIO_Init+0x328>)
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	220f      	movs	r2, #15
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a58      	ldr	r2, [pc, #352]	; (8004e58 <HAL_GPIO_Init+0x32c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d037      	beq.n	8004d6a <HAL_GPIO_Init+0x23e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a57      	ldr	r2, [pc, #348]	; (8004e5c <HAL_GPIO_Init+0x330>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d031      	beq.n	8004d66 <HAL_GPIO_Init+0x23a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a56      	ldr	r2, [pc, #344]	; (8004e60 <HAL_GPIO_Init+0x334>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d02b      	beq.n	8004d62 <HAL_GPIO_Init+0x236>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a55      	ldr	r2, [pc, #340]	; (8004e64 <HAL_GPIO_Init+0x338>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d025      	beq.n	8004d5e <HAL_GPIO_Init+0x232>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a54      	ldr	r2, [pc, #336]	; (8004e68 <HAL_GPIO_Init+0x33c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01f      	beq.n	8004d5a <HAL_GPIO_Init+0x22e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a53      	ldr	r2, [pc, #332]	; (8004e6c <HAL_GPIO_Init+0x340>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d019      	beq.n	8004d56 <HAL_GPIO_Init+0x22a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a52      	ldr	r2, [pc, #328]	; (8004e70 <HAL_GPIO_Init+0x344>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d013      	beq.n	8004d52 <HAL_GPIO_Init+0x226>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a51      	ldr	r2, [pc, #324]	; (8004e74 <HAL_GPIO_Init+0x348>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00d      	beq.n	8004d4e <HAL_GPIO_Init+0x222>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a50      	ldr	r2, [pc, #320]	; (8004e78 <HAL_GPIO_Init+0x34c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d007      	beq.n	8004d4a <HAL_GPIO_Init+0x21e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a4f      	ldr	r2, [pc, #316]	; (8004e7c <HAL_GPIO_Init+0x350>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d101      	bne.n	8004d46 <HAL_GPIO_Init+0x21a>
 8004d42:	2309      	movs	r3, #9
 8004d44:	e012      	b.n	8004d6c <HAL_GPIO_Init+0x240>
 8004d46:	230a      	movs	r3, #10
 8004d48:	e010      	b.n	8004d6c <HAL_GPIO_Init+0x240>
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	e00e      	b.n	8004d6c <HAL_GPIO_Init+0x240>
 8004d4e:	2307      	movs	r3, #7
 8004d50:	e00c      	b.n	8004d6c <HAL_GPIO_Init+0x240>
 8004d52:	2306      	movs	r3, #6
 8004d54:	e00a      	b.n	8004d6c <HAL_GPIO_Init+0x240>
 8004d56:	2305      	movs	r3, #5
 8004d58:	e008      	b.n	8004d6c <HAL_GPIO_Init+0x240>
 8004d5a:	2304      	movs	r3, #4
 8004d5c:	e006      	b.n	8004d6c <HAL_GPIO_Init+0x240>
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e004      	b.n	8004d6c <HAL_GPIO_Init+0x240>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e002      	b.n	8004d6c <HAL_GPIO_Init+0x240>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <HAL_GPIO_Init+0x240>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	f002 0203 	and.w	r2, r2, #3
 8004d72:	0092      	lsls	r2, r2, #2
 8004d74:	4093      	lsls	r3, r2
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004d7c:	4935      	ldr	r1, [pc, #212]	; (8004e54 <HAL_GPIO_Init+0x328>)
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	089b      	lsrs	r3, r3, #2
 8004d82:	3302      	adds	r3, #2
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d8a:	4b3d      	ldr	r3, [pc, #244]	; (8004e80 <HAL_GPIO_Init+0x354>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	43db      	mvns	r3, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4013      	ands	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dae:	4a34      	ldr	r2, [pc, #208]	; (8004e80 <HAL_GPIO_Init+0x354>)
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004db4:	4b32      	ldr	r3, [pc, #200]	; (8004e80 <HAL_GPIO_Init+0x354>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004dd8:	4a29      	ldr	r2, [pc, #164]	; (8004e80 <HAL_GPIO_Init+0x354>)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dde:	4b28      	ldr	r3, [pc, #160]	; (8004e80 <HAL_GPIO_Init+0x354>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	43db      	mvns	r3, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4013      	ands	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e02:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <HAL_GPIO_Init+0x354>)
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e08:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <HAL_GPIO_Init+0x354>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4013      	ands	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e2c:	4a14      	ldr	r2, [pc, #80]	; (8004e80 <HAL_GPIO_Init+0x354>)
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	3301      	adds	r3, #1
 8004e36:	61fb      	str	r3, [r7, #28]
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	2b0f      	cmp	r3, #15
 8004e3c:	f67f ae86 	bls.w	8004b4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	3724      	adds	r7, #36	; 0x24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40013800 	.word	0x40013800
 8004e58:	40020000 	.word	0x40020000
 8004e5c:	40020400 	.word	0x40020400
 8004e60:	40020800 	.word	0x40020800
 8004e64:	40020c00 	.word	0x40020c00
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40021400 	.word	0x40021400
 8004e70:	40021800 	.word	0x40021800
 8004e74:	40021c00 	.word	0x40021c00
 8004e78:	40022000 	.word	0x40022000
 8004e7c:	40022400 	.word	0x40022400
 8004e80:	40013c00 	.word	0x40013c00

08004e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	807b      	strh	r3, [r7, #2]
 8004e90:	4613      	mov	r3, r2
 8004e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e94:	787b      	ldrb	r3, [r7, #1]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e9a:	887a      	ldrh	r2, [r7, #2]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ea0:	e003      	b.n	8004eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ea2:	887b      	ldrh	r3, [r7, #2]
 8004ea4:	041a      	lsls	r2, r3, #16
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	619a      	str	r2, [r3, #24]
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ec2:	4b23      	ldr	r3, [pc, #140]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004eda:	4b1e      	ldr	r3, [pc, #120]	; (8004f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ee6:	f7ff f8d5 	bl	8004094 <HAL_GetTick>
 8004eea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004eec:	e009      	b.n	8004f02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004eee:	f7ff f8d1 	bl	8004094 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004efc:	d901      	bls.n	8004f02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e022      	b.n	8004f48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f02:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0e:	d1ee      	bne.n	8004eee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f10:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a0f      	ldr	r2, [pc, #60]	; (8004f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f1c:	f7ff f8ba 	bl	8004094 <HAL_GetTick>
 8004f20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f22:	e009      	b.n	8004f38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f24:	f7ff f8b6 	bl	8004094 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f32:	d901      	bls.n	8004f38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e007      	b.n	8004f48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f44:	d1ee      	bne.n	8004f24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40023800 	.word	0x40023800
 8004f54:	40007000 	.word	0x40007000

08004f58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004f60:	2300      	movs	r3, #0
 8004f62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e29b      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8087 	beq.w	800508a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f7c:	4b96      	ldr	r3, [pc, #600]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d00c      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f88:	4b93      	ldr	r3, [pc, #588]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d112      	bne.n	8004fba <HAL_RCC_OscConfig+0x62>
 8004f94:	4b90      	ldr	r3, [pc, #576]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa0:	d10b      	bne.n	8004fba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa2:	4b8d      	ldr	r3, [pc, #564]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d06c      	beq.n	8005088 <HAL_RCC_OscConfig+0x130>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d168      	bne.n	8005088 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e275      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc2:	d106      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x7a>
 8004fc4:	4b84      	ldr	r3, [pc, #528]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a83      	ldr	r2, [pc, #524]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8004fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e02e      	b.n	8005030 <HAL_RCC_OscConfig+0xd8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10c      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x9c>
 8004fda:	4b7f      	ldr	r3, [pc, #508]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a7e      	ldr	r2, [pc, #504]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8004fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	4b7c      	ldr	r3, [pc, #496]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a7b      	ldr	r2, [pc, #492]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8004fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e01d      	b.n	8005030 <HAL_RCC_OscConfig+0xd8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCC_OscConfig+0xc0>
 8004ffe:	4b76      	ldr	r3, [pc, #472]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a75      	ldr	r2, [pc, #468]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	4b73      	ldr	r3, [pc, #460]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a72      	ldr	r2, [pc, #456]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e00b      	b.n	8005030 <HAL_RCC_OscConfig+0xd8>
 8005018:	4b6f      	ldr	r3, [pc, #444]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a6e      	ldr	r2, [pc, #440]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 800501e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	4b6c      	ldr	r3, [pc, #432]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6b      	ldr	r2, [pc, #428]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 800502a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d013      	beq.n	8005060 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005038:	f7ff f82c 	bl	8004094 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005040:	f7ff f828 	bl	8004094 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b64      	cmp	r3, #100	; 0x64
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e229      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	4b61      	ldr	r3, [pc, #388]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f0      	beq.n	8005040 <HAL_RCC_OscConfig+0xe8>
 800505e:	e014      	b.n	800508a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7ff f818 	bl	8004094 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005068:	f7ff f814 	bl	8004094 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b64      	cmp	r3, #100	; 0x64
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e215      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507a:	4b57      	ldr	r3, [pc, #348]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x110>
 8005086:	e000      	b.n	800508a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d069      	beq.n	800516a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005096:	4b50      	ldr	r3, [pc, #320]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050a2:	4b4d      	ldr	r3, [pc, #308]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d11c      	bne.n	80050e8 <HAL_RCC_OscConfig+0x190>
 80050ae:	4b4a      	ldr	r3, [pc, #296]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d116      	bne.n	80050e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ba:	4b47      	ldr	r3, [pc, #284]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_RCC_OscConfig+0x17a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d001      	beq.n	80050d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e1e9      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d2:	4b41      	ldr	r3, [pc, #260]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	493d      	ldr	r1, [pc, #244]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e6:	e040      	b.n	800516a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d023      	beq.n	8005138 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f0:	4b39      	ldr	r3, [pc, #228]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a38      	ldr	r2, [pc, #224]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fe ffca 	bl	8004094 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005104:	f7fe ffc6 	bl	8004094 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e1c7      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005116:	4b30      	ldr	r3, [pc, #192]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f0      	beq.n	8005104 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005122:	4b2d      	ldr	r3, [pc, #180]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4929      	ldr	r1, [pc, #164]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]
 8005136:	e018      	b.n	800516a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005138:	4b27      	ldr	r3, [pc, #156]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a26      	ldr	r2, [pc, #152]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fe ffa6 	bl	8004094 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514c:	f7fe ffa2 	bl	8004094 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e1a3      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515e:	4b1e      	ldr	r3, [pc, #120]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d038      	beq.n	80051e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d019      	beq.n	80051b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517e:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005182:	4a15      	ldr	r2, [pc, #84]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518a:	f7fe ff83 	bl	8004094 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005192:	f7fe ff7f 	bl	8004094 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e180      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 80051a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x23a>
 80051b0:	e01a      	b.n	80051e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 80051b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b6:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <HAL_RCC_OscConfig+0x280>)
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051be:	f7fe ff69 	bl	8004094 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c4:	e00a      	b.n	80051dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c6:	f7fe ff65 	bl	8004094 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d903      	bls.n	80051dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e166      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
 80051d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051dc:	4b92      	ldr	r3, [pc, #584]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80051de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1ee      	bne.n	80051c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80a4 	beq.w	800533e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f6:	4b8c      	ldr	r3, [pc, #560]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10d      	bne.n	800521e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005202:	4b89      	ldr	r3, [pc, #548]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	4a88      	ldr	r2, [pc, #544]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 8005208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520c:	6413      	str	r3, [r2, #64]	; 0x40
 800520e:	4b86      	ldr	r3, [pc, #536]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521a:	2301      	movs	r3, #1
 800521c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800521e:	4b83      	ldr	r3, [pc, #524]	; (800542c <HAL_RCC_OscConfig+0x4d4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	2b00      	cmp	r3, #0
 8005228:	d118      	bne.n	800525c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800522a:	4b80      	ldr	r3, [pc, #512]	; (800542c <HAL_RCC_OscConfig+0x4d4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a7f      	ldr	r2, [pc, #508]	; (800542c <HAL_RCC_OscConfig+0x4d4>)
 8005230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005236:	f7fe ff2d 	bl	8004094 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523e:	f7fe ff29 	bl	8004094 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b64      	cmp	r3, #100	; 0x64
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e12a      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005250:	4b76      	ldr	r3, [pc, #472]	; (800542c <HAL_RCC_OscConfig+0x4d4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0f0      	beq.n	800523e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d106      	bne.n	8005272 <HAL_RCC_OscConfig+0x31a>
 8005264:	4b70      	ldr	r3, [pc, #448]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005268:	4a6f      	ldr	r2, [pc, #444]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 800526a:	f043 0301 	orr.w	r3, r3, #1
 800526e:	6713      	str	r3, [r2, #112]	; 0x70
 8005270:	e02d      	b.n	80052ce <HAL_RCC_OscConfig+0x376>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10c      	bne.n	8005294 <HAL_RCC_OscConfig+0x33c>
 800527a:	4b6b      	ldr	r3, [pc, #428]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	4a6a      	ldr	r2, [pc, #424]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	6713      	str	r3, [r2, #112]	; 0x70
 8005286:	4b68      	ldr	r3, [pc, #416]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	4a67      	ldr	r2, [pc, #412]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 800528c:	f023 0304 	bic.w	r3, r3, #4
 8005290:	6713      	str	r3, [r2, #112]	; 0x70
 8005292:	e01c      	b.n	80052ce <HAL_RCC_OscConfig+0x376>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b05      	cmp	r3, #5
 800529a:	d10c      	bne.n	80052b6 <HAL_RCC_OscConfig+0x35e>
 800529c:	4b62      	ldr	r3, [pc, #392]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 800529e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a0:	4a61      	ldr	r2, [pc, #388]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80052a2:	f043 0304 	orr.w	r3, r3, #4
 80052a6:	6713      	str	r3, [r2, #112]	; 0x70
 80052a8:	4b5f      	ldr	r3, [pc, #380]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ac:	4a5e      	ldr	r2, [pc, #376]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	6713      	str	r3, [r2, #112]	; 0x70
 80052b4:	e00b      	b.n	80052ce <HAL_RCC_OscConfig+0x376>
 80052b6:	4b5c      	ldr	r3, [pc, #368]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	4a5b      	ldr	r2, [pc, #364]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	6713      	str	r3, [r2, #112]	; 0x70
 80052c2:	4b59      	ldr	r3, [pc, #356]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c6:	4a58      	ldr	r2, [pc, #352]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80052c8:	f023 0304 	bic.w	r3, r3, #4
 80052cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d015      	beq.n	8005302 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d6:	f7fe fedd 	bl	8004094 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	e00a      	b.n	80052f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7fe fed9 	bl	8004094 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e0d8      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f4:	4b4c      	ldr	r3, [pc, #304]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0ee      	beq.n	80052de <HAL_RCC_OscConfig+0x386>
 8005300:	e014      	b.n	800532c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005302:	f7fe fec7 	bl	8004094 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005308:	e00a      	b.n	8005320 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530a:	f7fe fec3 	bl	8004094 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f241 3288 	movw	r2, #5000	; 0x1388
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e0c2      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005320:	4b41      	ldr	r3, [pc, #260]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1ee      	bne.n	800530a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800532c:	7dfb      	ldrb	r3, [r7, #23]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d105      	bne.n	800533e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005332:	4b3d      	ldr	r3, [pc, #244]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	4a3c      	ldr	r2, [pc, #240]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 8005338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800533c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 80ae 	beq.w	80054a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005348:	4b37      	ldr	r3, [pc, #220]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 030c 	and.w	r3, r3, #12
 8005350:	2b08      	cmp	r3, #8
 8005352:	d06d      	beq.n	8005430 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	2b02      	cmp	r3, #2
 800535a:	d14b      	bne.n	80053f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800535c:	4b32      	ldr	r3, [pc, #200]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a31      	ldr	r2, [pc, #196]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 8005362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005368:	f7fe fe94 	bl	8004094 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005370:	f7fe fe90 	bl	8004094 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e091      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005382:	4b29      	ldr	r3, [pc, #164]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f0      	bne.n	8005370 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	019b      	lsls	r3, r3, #6
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	3b01      	subs	r3, #1
 80053a8:	041b      	lsls	r3, r3, #16
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b8:	071b      	lsls	r3, r3, #28
 80053ba:	491b      	ldr	r1, [pc, #108]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053c0:	4b19      	ldr	r3, [pc, #100]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a18      	ldr	r2, [pc, #96]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80053c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053cc:	f7fe fe62 	bl	8004094 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d4:	f7fe fe5e 	bl	8004094 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e05f      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e6:	4b10      	ldr	r3, [pc, #64]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCC_OscConfig+0x47c>
 80053f2:	e057      	b.n	80054a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a0b      	ldr	r2, [pc, #44]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 80053fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005400:	f7fe fe48 	bl	8004094 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005408:	f7fe fe44 	bl	8004094 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e045      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800541a:	4b03      	ldr	r3, [pc, #12]	; (8005428 <HAL_RCC_OscConfig+0x4d0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0x4b0>
 8005426:	e03d      	b.n	80054a4 <HAL_RCC_OscConfig+0x54c>
 8005428:	40023800 	.word	0x40023800
 800542c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005430:	4b1f      	ldr	r3, [pc, #124]	; (80054b0 <HAL_RCC_OscConfig+0x558>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d030      	beq.n	80054a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005448:	429a      	cmp	r2, r3
 800544a:	d129      	bne.n	80054a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005456:	429a      	cmp	r2, r3
 8005458:	d122      	bne.n	80054a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005460:	4013      	ands	r3, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005466:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005468:	4293      	cmp	r3, r2
 800546a:	d119      	bne.n	80054a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	3b01      	subs	r3, #1
 800547a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800547c:	429a      	cmp	r2, r3
 800547e:	d10f      	bne.n	80054a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d107      	bne.n	80054a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40023800 	.word	0x40023800

080054b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0d0      	b.n	800566e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054cc:	4b6a      	ldr	r3, [pc, #424]	; (8005678 <HAL_RCC_ClockConfig+0x1c4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d910      	bls.n	80054fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054da:	4b67      	ldr	r3, [pc, #412]	; (8005678 <HAL_RCC_ClockConfig+0x1c4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f023 020f 	bic.w	r2, r3, #15
 80054e2:	4965      	ldr	r1, [pc, #404]	; (8005678 <HAL_RCC_ClockConfig+0x1c4>)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ea:	4b63      	ldr	r3, [pc, #396]	; (8005678 <HAL_RCC_ClockConfig+0x1c4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d001      	beq.n	80054fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0b8      	b.n	800566e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d020      	beq.n	800554a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005514:	4b59      	ldr	r3, [pc, #356]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	4a58      	ldr	r2, [pc, #352]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 800551a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800551e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800552c:	4b53      	ldr	r3, [pc, #332]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	4a52      	ldr	r2, [pc, #328]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005536:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005538:	4b50      	ldr	r3, [pc, #320]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	494d      	ldr	r1, [pc, #308]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005546:	4313      	orrs	r3, r2
 8005548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d040      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d107      	bne.n	800556e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555e:	4b47      	ldr	r3, [pc, #284]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d115      	bne.n	8005596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e07f      	b.n	800566e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d107      	bne.n	8005586 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005576:	4b41      	ldr	r3, [pc, #260]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e073      	b.n	800566e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005586:	4b3d      	ldr	r3, [pc, #244]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e06b      	b.n	800566e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005596:	4b39      	ldr	r3, [pc, #228]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f023 0203 	bic.w	r2, r3, #3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	4936      	ldr	r1, [pc, #216]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a8:	f7fe fd74 	bl	8004094 <HAL_GetTick>
 80055ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ae:	e00a      	b.n	80055c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b0:	f7fe fd70 	bl	8004094 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e053      	b.n	800566e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c6:	4b2d      	ldr	r3, [pc, #180]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 020c 	and.w	r2, r3, #12
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d1eb      	bne.n	80055b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055d8:	4b27      	ldr	r3, [pc, #156]	; (8005678 <HAL_RCC_ClockConfig+0x1c4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d210      	bcs.n	8005608 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e6:	4b24      	ldr	r3, [pc, #144]	; (8005678 <HAL_RCC_ClockConfig+0x1c4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f023 020f 	bic.w	r2, r3, #15
 80055ee:	4922      	ldr	r1, [pc, #136]	; (8005678 <HAL_RCC_ClockConfig+0x1c4>)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f6:	4b20      	ldr	r3, [pc, #128]	; (8005678 <HAL_RCC_ClockConfig+0x1c4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d001      	beq.n	8005608 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e032      	b.n	800566e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005614:	4b19      	ldr	r3, [pc, #100]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4916      	ldr	r1, [pc, #88]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005622:	4313      	orrs	r3, r2
 8005624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005632:	4b12      	ldr	r3, [pc, #72]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	490e      	ldr	r1, [pc, #56]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005646:	f000 f821 	bl	800568c <HAL_RCC_GetSysClockFreq>
 800564a:	4602      	mov	r2, r0
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <HAL_RCC_ClockConfig+0x1c8>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	490a      	ldr	r1, [pc, #40]	; (8005680 <HAL_RCC_ClockConfig+0x1cc>)
 8005658:	5ccb      	ldrb	r3, [r1, r3]
 800565a:	fa22 f303 	lsr.w	r3, r2, r3
 800565e:	4a09      	ldr	r2, [pc, #36]	; (8005684 <HAL_RCC_ClockConfig+0x1d0>)
 8005660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005662:	4b09      	ldr	r3, [pc, #36]	; (8005688 <HAL_RCC_ClockConfig+0x1d4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe fcd0 	bl	800400c <HAL_InitTick>

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40023c00 	.word	0x40023c00
 800567c:	40023800 	.word	0x40023800
 8005680:	0800912c 	.word	0x0800912c
 8005684:	20000000 	.word	0x20000000
 8005688:	20000004 	.word	0x20000004

0800568c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800568c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005690:	b094      	sub	sp, #80	; 0x50
 8005692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	647b      	str	r3, [r7, #68]	; 0x44
 8005698:	2300      	movs	r3, #0
 800569a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800569c:	2300      	movs	r3, #0
 800569e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056a4:	4b79      	ldr	r3, [pc, #484]	; (800588c <HAL_RCC_GetSysClockFreq+0x200>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 030c 	and.w	r3, r3, #12
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d00d      	beq.n	80056cc <HAL_RCC_GetSysClockFreq+0x40>
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	f200 80e1 	bhi.w	8005878 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0x34>
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d003      	beq.n	80056c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80056be:	e0db      	b.n	8005878 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056c0:	4b73      	ldr	r3, [pc, #460]	; (8005890 <HAL_RCC_GetSysClockFreq+0x204>)
 80056c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056c4:	e0db      	b.n	800587e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056c6:	4b73      	ldr	r3, [pc, #460]	; (8005894 <HAL_RCC_GetSysClockFreq+0x208>)
 80056c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056ca:	e0d8      	b.n	800587e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056cc:	4b6f      	ldr	r3, [pc, #444]	; (800588c <HAL_RCC_GetSysClockFreq+0x200>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056d4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80056d6:	4b6d      	ldr	r3, [pc, #436]	; (800588c <HAL_RCC_GetSysClockFreq+0x200>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d063      	beq.n	80057aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056e2:	4b6a      	ldr	r3, [pc, #424]	; (800588c <HAL_RCC_GetSysClockFreq+0x200>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	099b      	lsrs	r3, r3, #6
 80056e8:	2200      	movs	r2, #0
 80056ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f4:	633b      	str	r3, [r7, #48]	; 0x30
 80056f6:	2300      	movs	r3, #0
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
 80056fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056fe:	4622      	mov	r2, r4
 8005700:	462b      	mov	r3, r5
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f04f 0100 	mov.w	r1, #0
 800570a:	0159      	lsls	r1, r3, #5
 800570c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005710:	0150      	lsls	r0, r2, #5
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4621      	mov	r1, r4
 8005718:	1a51      	subs	r1, r2, r1
 800571a:	6139      	str	r1, [r7, #16]
 800571c:	4629      	mov	r1, r5
 800571e:	eb63 0301 	sbc.w	r3, r3, r1
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005730:	4659      	mov	r1, fp
 8005732:	018b      	lsls	r3, r1, #6
 8005734:	4651      	mov	r1, sl
 8005736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800573a:	4651      	mov	r1, sl
 800573c:	018a      	lsls	r2, r1, #6
 800573e:	4651      	mov	r1, sl
 8005740:	ebb2 0801 	subs.w	r8, r2, r1
 8005744:	4659      	mov	r1, fp
 8005746:	eb63 0901 	sbc.w	r9, r3, r1
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800575a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800575e:	4690      	mov	r8, r2
 8005760:	4699      	mov	r9, r3
 8005762:	4623      	mov	r3, r4
 8005764:	eb18 0303 	adds.w	r3, r8, r3
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	462b      	mov	r3, r5
 800576c:	eb49 0303 	adc.w	r3, r9, r3
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800577e:	4629      	mov	r1, r5
 8005780:	024b      	lsls	r3, r1, #9
 8005782:	4621      	mov	r1, r4
 8005784:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005788:	4621      	mov	r1, r4
 800578a:	024a      	lsls	r2, r1, #9
 800578c:	4610      	mov	r0, r2
 800578e:	4619      	mov	r1, r3
 8005790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005792:	2200      	movs	r2, #0
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
 8005796:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005798:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800579c:	f7fa fd54 	bl	8000248 <__aeabi_uldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4613      	mov	r3, r2
 80057a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a8:	e058      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057aa:	4b38      	ldr	r3, [pc, #224]	; (800588c <HAL_RCC_GetSysClockFreq+0x200>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	099b      	lsrs	r3, r3, #6
 80057b0:	2200      	movs	r2, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	4611      	mov	r1, r2
 80057b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057ba:	623b      	str	r3, [r7, #32]
 80057bc:	2300      	movs	r3, #0
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
 80057c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057c4:	4642      	mov	r2, r8
 80057c6:	464b      	mov	r3, r9
 80057c8:	f04f 0000 	mov.w	r0, #0
 80057cc:	f04f 0100 	mov.w	r1, #0
 80057d0:	0159      	lsls	r1, r3, #5
 80057d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057d6:	0150      	lsls	r0, r2, #5
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4641      	mov	r1, r8
 80057de:	ebb2 0a01 	subs.w	sl, r2, r1
 80057e2:	4649      	mov	r1, r9
 80057e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057fc:	ebb2 040a 	subs.w	r4, r2, sl
 8005800:	eb63 050b 	sbc.w	r5, r3, fp
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	00eb      	lsls	r3, r5, #3
 800580e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005812:	00e2      	lsls	r2, r4, #3
 8005814:	4614      	mov	r4, r2
 8005816:	461d      	mov	r5, r3
 8005818:	4643      	mov	r3, r8
 800581a:	18e3      	adds	r3, r4, r3
 800581c:	603b      	str	r3, [r7, #0]
 800581e:	464b      	mov	r3, r9
 8005820:	eb45 0303 	adc.w	r3, r5, r3
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	f04f 0200 	mov.w	r2, #0
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005832:	4629      	mov	r1, r5
 8005834:	028b      	lsls	r3, r1, #10
 8005836:	4621      	mov	r1, r4
 8005838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800583c:	4621      	mov	r1, r4
 800583e:	028a      	lsls	r2, r1, #10
 8005840:	4610      	mov	r0, r2
 8005842:	4619      	mov	r1, r3
 8005844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005846:	2200      	movs	r2, #0
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	61fa      	str	r2, [r7, #28]
 800584c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005850:	f7fa fcfa 	bl	8000248 <__aeabi_uldivmod>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4613      	mov	r3, r2
 800585a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <HAL_RCC_GetSysClockFreq+0x200>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	0c1b      	lsrs	r3, r3, #16
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	3301      	adds	r3, #1
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800586c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800586e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005876:	e002      	b.n	800587e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <HAL_RCC_GetSysClockFreq+0x204>)
 800587a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800587c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800587e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005880:	4618      	mov	r0, r3
 8005882:	3750      	adds	r7, #80	; 0x50
 8005884:	46bd      	mov	sp, r7
 8005886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800588a:	bf00      	nop
 800588c:	40023800 	.word	0x40023800
 8005890:	00f42400 	.word	0x00f42400
 8005894:	007a1200 	.word	0x007a1200

08005898 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <HAL_RCC_GetHCLKFreq+0x14>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000000 	.word	0x20000000

080058b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058b4:	f7ff fff0 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0a9b      	lsrs	r3, r3, #10
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4903      	ldr	r1, [pc, #12]	; (80058d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c6:	5ccb      	ldrb	r3, [r1, r3]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40023800 	.word	0x40023800
 80058d4:	0800913c 	.word	0x0800913c

080058d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058dc:	f7ff ffdc 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0b5b      	lsrs	r3, r3, #13
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	4903      	ldr	r1, [pc, #12]	; (80058fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ee:	5ccb      	ldrb	r3, [r1, r3]
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40023800 	.word	0x40023800
 80058fc:	0800913c 	.word	0x0800913c

08005900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d012      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005928:	4b69      	ldr	r3, [pc, #420]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4a68      	ldr	r2, [pc, #416]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005932:	6093      	str	r3, [r2, #8]
 8005934:	4b66      	ldr	r3, [pc, #408]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	4964      	ldr	r1, [pc, #400]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800593e:	4313      	orrs	r3, r2
 8005940:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800594a:	2301      	movs	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d017      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800595a:	4b5d      	ldr	r3, [pc, #372]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005968:	4959      	ldr	r1, [pc, #356]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005978:	d101      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800597a:	2301      	movs	r3, #1
 800597c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005986:	2301      	movs	r3, #1
 8005988:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d017      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005996:	4b4e      	ldr	r3, [pc, #312]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800599c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	494a      	ldr	r1, [pc, #296]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b4:	d101      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80059b6:	2301      	movs	r3, #1
 80059b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80059c2:	2301      	movs	r3, #1
 80059c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80059d2:	2301      	movs	r3, #1
 80059d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 808b 	beq.w	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059e4:	4b3a      	ldr	r3, [pc, #232]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	4a39      	ldr	r2, [pc, #228]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ee:	6413      	str	r3, [r2, #64]	; 0x40
 80059f0:	4b37      	ldr	r3, [pc, #220]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059fc:	4b35      	ldr	r3, [pc, #212]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a34      	ldr	r2, [pc, #208]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a08:	f7fe fb44 	bl	8004094 <HAL_GetTick>
 8005a0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a10:	f7fe fb40 	bl	8004094 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b64      	cmp	r3, #100	; 0x64
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e38f      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a22:	4b2c      	ldr	r3, [pc, #176]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a2e:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d035      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d02e      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a4c:	4b20      	ldr	r3, [pc, #128]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a56:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5a:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a62:	4b1b      	ldr	r3, [pc, #108]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a66:	4a1a      	ldr	r2, [pc, #104]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005a6e:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a74:	4b16      	ldr	r3, [pc, #88]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d114      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a80:	f7fe fb08 	bl	8004094 <HAL_GetTick>
 8005a84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a86:	e00a      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a88:	f7fe fb04 	bl	8004094 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e351      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0ee      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ab6:	d111      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ab8:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ac4:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ac6:	400b      	ands	r3, r1
 8005ac8:	4901      	ldr	r1, [pc, #4]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	608b      	str	r3, [r1, #8]
 8005ace:	e00b      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	40007000 	.word	0x40007000
 8005ad8:	0ffffcff 	.word	0x0ffffcff
 8005adc:	4bac      	ldr	r3, [pc, #688]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4aab      	ldr	r2, [pc, #684]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ae2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ae6:	6093      	str	r3, [r2, #8]
 8005ae8:	4ba9      	ldr	r3, [pc, #676]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af4:	49a6      	ldr	r1, [pc, #664]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d010      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b06:	4ba2      	ldr	r3, [pc, #648]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b0c:	4aa0      	ldr	r2, [pc, #640]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b16:	4b9e      	ldr	r3, [pc, #632]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	499b      	ldr	r1, [pc, #620]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b34:	4b96      	ldr	r3, [pc, #600]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b42:	4993      	ldr	r1, [pc, #588]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b56:	4b8e      	ldr	r3, [pc, #568]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b64:	498a      	ldr	r1, [pc, #552]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b78:	4b85      	ldr	r3, [pc, #532]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b86:	4982      	ldr	r1, [pc, #520]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b9a:	4b7d      	ldr	r3, [pc, #500]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	4979      	ldr	r1, [pc, #484]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bbc:	4b74      	ldr	r3, [pc, #464]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc2:	f023 0203 	bic.w	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	4971      	ldr	r1, [pc, #452]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bde:	4b6c      	ldr	r3, [pc, #432]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be4:	f023 020c 	bic.w	r2, r3, #12
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bec:	4968      	ldr	r1, [pc, #416]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c00:	4b63      	ldr	r3, [pc, #396]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	4960      	ldr	r1, [pc, #384]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c22:	4b5b      	ldr	r3, [pc, #364]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c30:	4957      	ldr	r1, [pc, #348]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c44:	4b52      	ldr	r3, [pc, #328]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	494f      	ldr	r1, [pc, #316]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005c66:	4b4a      	ldr	r3, [pc, #296]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c74:	4946      	ldr	r1, [pc, #280]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005c88:	4b41      	ldr	r3, [pc, #260]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c96:	493e      	ldr	r1, [pc, #248]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005caa:	4b39      	ldr	r3, [pc, #228]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb8:	4935      	ldr	r1, [pc, #212]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ccc:	4b30      	ldr	r3, [pc, #192]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cda:	492d      	ldr	r1, [pc, #180]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d011      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005cee:	4b28      	ldr	r3, [pc, #160]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cfc:	4924      	ldr	r1, [pc, #144]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d0c:	d101      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d2e:	4b18      	ldr	r3, [pc, #96]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3c:	4914      	ldr	r1, [pc, #80]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d50:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d60:	490b      	ldr	r1, [pc, #44]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00f      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005d74:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d84:	4902      	ldr	r1, [pc, #8]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d8c:	e002      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005d8e:	bf00      	nop
 8005d90:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005da0:	4b8a      	ldr	r3, [pc, #552]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005da6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	4986      	ldr	r1, [pc, #536]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005dc4:	4b81      	ldr	r3, [pc, #516]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dd4:	497d      	ldr	r1, [pc, #500]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d006      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 80d6 	beq.w	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005df0:	4b76      	ldr	r3, [pc, #472]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a75      	ldr	r2, [pc, #468]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfc:	f7fe f94a 	bl	8004094 <HAL_GetTick>
 8005e00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e04:	f7fe f946 	bl	8004094 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b64      	cmp	r3, #100	; 0x64
 8005e10:	d901      	bls.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e195      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e16:	4b6d      	ldr	r3, [pc, #436]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f0      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d021      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d11d      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e36:	4b65      	ldr	r3, [pc, #404]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e3c:	0c1b      	lsrs	r3, r3, #16
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e44:	4b61      	ldr	r3, [pc, #388]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e4a:	0e1b      	lsrs	r3, r3, #24
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	019a      	lsls	r2, r3, #6
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	041b      	lsls	r3, r3, #16
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	061b      	lsls	r3, r3, #24
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	071b      	lsls	r3, r3, #28
 8005e6a:	4958      	ldr	r1, [pc, #352]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e86:	d00a      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d02e      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e9c:	d129      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e9e:	4b4b      	ldr	r3, [pc, #300]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea4:	0c1b      	lsrs	r3, r3, #16
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005eac:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb2:	0f1b      	lsrs	r3, r3, #28
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	019a      	lsls	r2, r3, #6
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	061b      	lsls	r3, r3, #24
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	071b      	lsls	r3, r3, #28
 8005ed2:	493e      	ldr	r1, [pc, #248]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005eda:	4b3c      	ldr	r3, [pc, #240]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee0:	f023 021f 	bic.w	r2, r3, #31
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	4938      	ldr	r1, [pc, #224]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01d      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005efe:	4b33      	ldr	r3, [pc, #204]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f04:	0e1b      	lsrs	r3, r3, #24
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f0c:	4b2f      	ldr	r3, [pc, #188]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f12:	0f1b      	lsrs	r3, r3, #28
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	019a      	lsls	r2, r3, #6
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	041b      	lsls	r3, r3, #16
 8005f26:	431a      	orrs	r2, r3
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	061b      	lsls	r3, r3, #24
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	071b      	lsls	r3, r3, #28
 8005f32:	4926      	ldr	r1, [pc, #152]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d011      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	019a      	lsls	r2, r3, #6
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	041b      	lsls	r3, r3, #16
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	061b      	lsls	r3, r3, #24
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	071b      	lsls	r3, r3, #28
 8005f62:	491a      	ldr	r1, [pc, #104]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f6a:	4b18      	ldr	r3, [pc, #96]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f76:	f7fe f88d 	bl	8004094 <HAL_GetTick>
 8005f7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f7e:	f7fe f889 	bl	8004094 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b64      	cmp	r3, #100	; 0x64
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e0d8      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f90:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0f0      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	f040 80ce 	bne.w	8006140 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005fa4:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a08      	ldr	r2, [pc, #32]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fb0:	f7fe f870 	bl	8004094 <HAL_GetTick>
 8005fb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fb6:	e00b      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005fb8:	f7fe f86c 	bl	8004094 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b64      	cmp	r3, #100	; 0x64
 8005fc4:	d904      	bls.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e0bb      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005fca:	bf00      	nop
 8005fcc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fd0:	4b5e      	ldr	r3, [pc, #376]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fdc:	d0ec      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d02e      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d12a      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006006:	4b51      	ldr	r3, [pc, #324]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006014:	4b4d      	ldr	r3, [pc, #308]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601a:	0f1b      	lsrs	r3, r3, #28
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	019a      	lsls	r2, r3, #6
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	041b      	lsls	r3, r3, #16
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	061b      	lsls	r3, r3, #24
 8006034:	431a      	orrs	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	071b      	lsls	r3, r3, #28
 800603a:	4944      	ldr	r1, [pc, #272]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006042:	4b42      	ldr	r3, [pc, #264]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006048:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006050:	3b01      	subs	r3, #1
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	493d      	ldr	r1, [pc, #244]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d022      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800606c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006070:	d11d      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006072:	4b36      	ldr	r3, [pc, #216]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006078:	0e1b      	lsrs	r3, r3, #24
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006080:	4b32      	ldr	r3, [pc, #200]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006086:	0f1b      	lsrs	r3, r3, #28
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	019a      	lsls	r2, r3, #6
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	041b      	lsls	r3, r3, #16
 800609a:	431a      	orrs	r2, r3
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	061b      	lsls	r3, r3, #24
 80060a0:	431a      	orrs	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	071b      	lsls	r3, r3, #28
 80060a6:	4929      	ldr	r1, [pc, #164]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d028      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060ba:	4b24      	ldr	r3, [pc, #144]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c0:	0e1b      	lsrs	r3, r3, #24
 80060c2:	f003 030f 	and.w	r3, r3, #15
 80060c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80060c8:	4b20      	ldr	r3, [pc, #128]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ce:	0c1b      	lsrs	r3, r3, #16
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	019a      	lsls	r2, r3, #6
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	041b      	lsls	r3, r3, #16
 80060e0:	431a      	orrs	r2, r3
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	061b      	lsls	r3, r3, #24
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	071b      	lsls	r3, r3, #28
 80060ee:	4917      	ldr	r1, [pc, #92]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80060f6:	4b15      	ldr	r3, [pc, #84]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	4911      	ldr	r1, [pc, #68]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800610c:	4b0f      	ldr	r3, [pc, #60]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a0e      	ldr	r2, [pc, #56]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006118:	f7fd ffbc 	bl	8004094 <HAL_GetTick>
 800611c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800611e:	e008      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006120:	f7fd ffb8 	bl	8004094 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b64      	cmp	r3, #100	; 0x64
 800612c:	d901      	bls.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e007      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006132:	4b06      	ldr	r3, [pc, #24]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800613a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613e:	d1ef      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	40023800 	.word	0x40023800

08006150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e049      	b.n	80061f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fd fbe2 	bl	8003940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f000 fcc0 	bl	8006b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e049      	b.n	80062a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f841 	bl	80062ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3304      	adds	r3, #4
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f000 fc69 	bl	8006b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d109      	bne.n	80062e4 <HAL_TIM_PWM_Start+0x24>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b01      	cmp	r3, #1
 80062da:	bf14      	ite	ne
 80062dc:	2301      	movne	r3, #1
 80062de:	2300      	moveq	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	e03c      	b.n	800635e <HAL_TIM_PWM_Start+0x9e>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d109      	bne.n	80062fe <HAL_TIM_PWM_Start+0x3e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	bf14      	ite	ne
 80062f6:	2301      	movne	r3, #1
 80062f8:	2300      	moveq	r3, #0
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	e02f      	b.n	800635e <HAL_TIM_PWM_Start+0x9e>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b08      	cmp	r3, #8
 8006302:	d109      	bne.n	8006318 <HAL_TIM_PWM_Start+0x58>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b01      	cmp	r3, #1
 800630e:	bf14      	ite	ne
 8006310:	2301      	movne	r3, #1
 8006312:	2300      	moveq	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	e022      	b.n	800635e <HAL_TIM_PWM_Start+0x9e>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b0c      	cmp	r3, #12
 800631c:	d109      	bne.n	8006332 <HAL_TIM_PWM_Start+0x72>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b01      	cmp	r3, #1
 8006328:	bf14      	ite	ne
 800632a:	2301      	movne	r3, #1
 800632c:	2300      	moveq	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	e015      	b.n	800635e <HAL_TIM_PWM_Start+0x9e>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b10      	cmp	r3, #16
 8006336:	d109      	bne.n	800634c <HAL_TIM_PWM_Start+0x8c>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	bf14      	ite	ne
 8006344:	2301      	movne	r3, #1
 8006346:	2300      	moveq	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	e008      	b.n	800635e <HAL_TIM_PWM_Start+0x9e>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	bf14      	ite	ne
 8006358:	2301      	movne	r3, #1
 800635a:	2300      	moveq	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e092      	b.n	800648c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <HAL_TIM_PWM_Start+0xb6>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006374:	e023      	b.n	80063be <HAL_TIM_PWM_Start+0xfe>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b04      	cmp	r3, #4
 800637a:	d104      	bne.n	8006386 <HAL_TIM_PWM_Start+0xc6>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006384:	e01b      	b.n	80063be <HAL_TIM_PWM_Start+0xfe>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d104      	bne.n	8006396 <HAL_TIM_PWM_Start+0xd6>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006394:	e013      	b.n	80063be <HAL_TIM_PWM_Start+0xfe>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b0c      	cmp	r3, #12
 800639a:	d104      	bne.n	80063a6 <HAL_TIM_PWM_Start+0xe6>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063a4:	e00b      	b.n	80063be <HAL_TIM_PWM_Start+0xfe>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b10      	cmp	r3, #16
 80063aa:	d104      	bne.n	80063b6 <HAL_TIM_PWM_Start+0xf6>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b4:	e003      	b.n	80063be <HAL_TIM_PWM_Start+0xfe>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2201      	movs	r2, #1
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 ff3c 	bl	8007244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a30      	ldr	r2, [pc, #192]	; (8006494 <HAL_TIM_PWM_Start+0x1d4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d004      	beq.n	80063e0 <HAL_TIM_PWM_Start+0x120>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a2f      	ldr	r2, [pc, #188]	; (8006498 <HAL_TIM_PWM_Start+0x1d8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d101      	bne.n	80063e4 <HAL_TIM_PWM_Start+0x124>
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <HAL_TIM_PWM_Start+0x126>
 80063e4:	2300      	movs	r3, #0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a25      	ldr	r2, [pc, #148]	; (8006494 <HAL_TIM_PWM_Start+0x1d4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d022      	beq.n	800644a <HAL_TIM_PWM_Start+0x18a>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640c:	d01d      	beq.n	800644a <HAL_TIM_PWM_Start+0x18a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a22      	ldr	r2, [pc, #136]	; (800649c <HAL_TIM_PWM_Start+0x1dc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d018      	beq.n	800644a <HAL_TIM_PWM_Start+0x18a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a20      	ldr	r2, [pc, #128]	; (80064a0 <HAL_TIM_PWM_Start+0x1e0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d013      	beq.n	800644a <HAL_TIM_PWM_Start+0x18a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <HAL_TIM_PWM_Start+0x1e4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00e      	beq.n	800644a <HAL_TIM_PWM_Start+0x18a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a19      	ldr	r2, [pc, #100]	; (8006498 <HAL_TIM_PWM_Start+0x1d8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d009      	beq.n	800644a <HAL_TIM_PWM_Start+0x18a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a1b      	ldr	r2, [pc, #108]	; (80064a8 <HAL_TIM_PWM_Start+0x1e8>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d004      	beq.n	800644a <HAL_TIM_PWM_Start+0x18a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a19      	ldr	r2, [pc, #100]	; (80064ac <HAL_TIM_PWM_Start+0x1ec>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d115      	bne.n	8006476 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <HAL_TIM_PWM_Start+0x1f0>)
 8006452:	4013      	ands	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b06      	cmp	r3, #6
 800645a:	d015      	beq.n	8006488 <HAL_TIM_PWM_Start+0x1c8>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006462:	d011      	beq.n	8006488 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006474:	e008      	b.n	8006488 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0201 	orr.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	e000      	b.n	800648a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006488:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40010000 	.word	0x40010000
 8006498:	40010400 	.word	0x40010400
 800649c:	40000400 	.word	0x40000400
 80064a0:	40000800 	.word	0x40000800
 80064a4:	40000c00 	.word	0x40000c00
 80064a8:	40014000 	.word	0x40014000
 80064ac:	40001800 	.word	0x40001800
 80064b0:	00010007 	.word	0x00010007

080064b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d122      	bne.n	8006510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d11b      	bne.n	8006510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0202 	mvn.w	r2, #2
 80064e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 faee 	bl	8006ad8 <HAL_TIM_IC_CaptureCallback>
 80064fc:	e005      	b.n	800650a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fae0 	bl	8006ac4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 faf1 	bl	8006aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b04      	cmp	r3, #4
 800651c:	d122      	bne.n	8006564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b04      	cmp	r3, #4
 800652a:	d11b      	bne.n	8006564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0204 	mvn.w	r2, #4
 8006534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fac4 	bl	8006ad8 <HAL_TIM_IC_CaptureCallback>
 8006550:	e005      	b.n	800655e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fab6 	bl	8006ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fac7 	bl	8006aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b08      	cmp	r3, #8
 8006570:	d122      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b08      	cmp	r3, #8
 800657e:	d11b      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0208 	mvn.w	r2, #8
 8006588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2204      	movs	r2, #4
 800658e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa9a 	bl	8006ad8 <HAL_TIM_IC_CaptureCallback>
 80065a4:	e005      	b.n	80065b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fa8c 	bl	8006ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fa9d 	bl	8006aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	2b10      	cmp	r3, #16
 80065c4:	d122      	bne.n	800660c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d11b      	bne.n	800660c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0210 	mvn.w	r2, #16
 80065dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2208      	movs	r2, #8
 80065e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa70 	bl	8006ad8 <HAL_TIM_IC_CaptureCallback>
 80065f8:	e005      	b.n	8006606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa62 	bl	8006ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fa73 	bl	8006aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b01      	cmp	r3, #1
 8006618:	d10e      	bne.n	8006638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b01      	cmp	r3, #1
 8006626:	d107      	bne.n	8006638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0201 	mvn.w	r2, #1
 8006630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fa3c 	bl	8006ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d10e      	bne.n	8006664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006650:	2b80      	cmp	r3, #128	; 0x80
 8006652:	d107      	bne.n	8006664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800665c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 feae 	bl	80073c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006672:	d10e      	bne.n	8006692 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667e:	2b80      	cmp	r3, #128	; 0x80
 8006680:	d107      	bne.n	8006692 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800668a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fea1 	bl	80073d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669c:	2b40      	cmp	r3, #64	; 0x40
 800669e:	d10e      	bne.n	80066be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	d107      	bne.n	80066be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fa21 	bl	8006b00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d10e      	bne.n	80066ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d107      	bne.n	80066ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f06f 0220 	mvn.w	r2, #32
 80066e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fe61 	bl	80073ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800670e:	2302      	movs	r3, #2
 8006710:	e0ff      	b.n	8006912 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b14      	cmp	r3, #20
 800671e:	f200 80f0 	bhi.w	8006902 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	0800677d 	.word	0x0800677d
 800672c:	08006903 	.word	0x08006903
 8006730:	08006903 	.word	0x08006903
 8006734:	08006903 	.word	0x08006903
 8006738:	080067bd 	.word	0x080067bd
 800673c:	08006903 	.word	0x08006903
 8006740:	08006903 	.word	0x08006903
 8006744:	08006903 	.word	0x08006903
 8006748:	080067ff 	.word	0x080067ff
 800674c:	08006903 	.word	0x08006903
 8006750:	08006903 	.word	0x08006903
 8006754:	08006903 	.word	0x08006903
 8006758:	0800683f 	.word	0x0800683f
 800675c:	08006903 	.word	0x08006903
 8006760:	08006903 	.word	0x08006903
 8006764:	08006903 	.word	0x08006903
 8006768:	08006881 	.word	0x08006881
 800676c:	08006903 	.word	0x08006903
 8006770:	08006903 	.word	0x08006903
 8006774:	08006903 	.word	0x08006903
 8006778:	080068c1 	.word	0x080068c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fa66 	bl	8006c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0208 	orr.w	r2, r2, #8
 8006796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0204 	bic.w	r2, r2, #4
 80067a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6999      	ldr	r1, [r3, #24]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	619a      	str	r2, [r3, #24]
      break;
 80067ba:	e0a5      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fab8 	bl	8006d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699a      	ldr	r2, [r3, #24]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6999      	ldr	r1, [r3, #24]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	021a      	lsls	r2, r3, #8
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	619a      	str	r2, [r3, #24]
      break;
 80067fc:	e084      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fb0f 	bl	8006e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0208 	orr.w	r2, r2, #8
 8006818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0204 	bic.w	r2, r2, #4
 8006828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69d9      	ldr	r1, [r3, #28]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	691a      	ldr	r2, [r3, #16]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	61da      	str	r2, [r3, #28]
      break;
 800683c:	e064      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fb65 	bl	8006f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69d9      	ldr	r1, [r3, #28]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	021a      	lsls	r2, r3, #8
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	61da      	str	r2, [r3, #28]
      break;
 800687e:	e043      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fb9c 	bl	8006fc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0208 	orr.w	r2, r2, #8
 800689a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0204 	bic.w	r2, r2, #4
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068be:	e023      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fbce 	bl	8007068 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	021a      	lsls	r2, r3, #8
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006900:	e002      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]
      break;
 8006906:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop

0800691c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIM_ConfigClockSource+0x1c>
 8006934:	2302      	movs	r3, #2
 8006936:	e0b4      	b.n	8006aa2 <HAL_TIM_ConfigClockSource+0x186>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	4b56      	ldr	r3, [pc, #344]	; (8006aac <HAL_TIM_ConfigClockSource+0x190>)
 8006954:	4013      	ands	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006970:	d03e      	beq.n	80069f0 <HAL_TIM_ConfigClockSource+0xd4>
 8006972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006976:	f200 8087 	bhi.w	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697e:	f000 8086 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x172>
 8006982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006986:	d87f      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 8006988:	2b70      	cmp	r3, #112	; 0x70
 800698a:	d01a      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0xa6>
 800698c:	2b70      	cmp	r3, #112	; 0x70
 800698e:	d87b      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 8006990:	2b60      	cmp	r3, #96	; 0x60
 8006992:	d050      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x11a>
 8006994:	2b60      	cmp	r3, #96	; 0x60
 8006996:	d877      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 8006998:	2b50      	cmp	r3, #80	; 0x50
 800699a:	d03c      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0xfa>
 800699c:	2b50      	cmp	r3, #80	; 0x50
 800699e:	d873      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d058      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x13a>
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d86f      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 80069a8:	2b30      	cmp	r3, #48	; 0x30
 80069aa:	d064      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x15a>
 80069ac:	2b30      	cmp	r3, #48	; 0x30
 80069ae:	d86b      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d060      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x15a>
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d867      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d05c      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x15a>
 80069bc:	2b10      	cmp	r3, #16
 80069be:	d05a      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x15a>
 80069c0:	e062      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6899      	ldr	r1, [r3, #8]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f000 fc17 	bl	8007204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	609a      	str	r2, [r3, #8]
      break;
 80069ee:	e04f      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6818      	ldr	r0, [r3, #0]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	6899      	ldr	r1, [r3, #8]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f000 fc00 	bl	8007204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a12:	609a      	str	r2, [r3, #8]
      break;
 8006a14:	e03c      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6859      	ldr	r1, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f000 fb74 	bl	8007110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2150      	movs	r1, #80	; 0x50
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fbcd 	bl	80071ce <TIM_ITRx_SetConfig>
      break;
 8006a34:	e02c      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6859      	ldr	r1, [r3, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f000 fb93 	bl	800716e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2160      	movs	r1, #96	; 0x60
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fbbd 	bl	80071ce <TIM_ITRx_SetConfig>
      break;
 8006a54:	e01c      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6859      	ldr	r1, [r3, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f000 fb54 	bl	8007110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2140      	movs	r1, #64	; 0x40
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fbad 	bl	80071ce <TIM_ITRx_SetConfig>
      break;
 8006a74:	e00c      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f000 fba4 	bl	80071ce <TIM_ITRx_SetConfig>
      break;
 8006a86:	e003      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a8c:	e000      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	fffeff88 	.word	0xfffeff88

08006ab0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a40      	ldr	r2, [pc, #256]	; (8006c28 <TIM_Base_SetConfig+0x114>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d013      	beq.n	8006b54 <TIM_Base_SetConfig+0x40>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b32:	d00f      	beq.n	8006b54 <TIM_Base_SetConfig+0x40>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a3d      	ldr	r2, [pc, #244]	; (8006c2c <TIM_Base_SetConfig+0x118>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00b      	beq.n	8006b54 <TIM_Base_SetConfig+0x40>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a3c      	ldr	r2, [pc, #240]	; (8006c30 <TIM_Base_SetConfig+0x11c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d007      	beq.n	8006b54 <TIM_Base_SetConfig+0x40>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a3b      	ldr	r2, [pc, #236]	; (8006c34 <TIM_Base_SetConfig+0x120>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_Base_SetConfig+0x40>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a3a      	ldr	r2, [pc, #232]	; (8006c38 <TIM_Base_SetConfig+0x124>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d108      	bne.n	8006b66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a2f      	ldr	r2, [pc, #188]	; (8006c28 <TIM_Base_SetConfig+0x114>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d02b      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b74:	d027      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a2c      	ldr	r2, [pc, #176]	; (8006c2c <TIM_Base_SetConfig+0x118>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d023      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a2b      	ldr	r2, [pc, #172]	; (8006c30 <TIM_Base_SetConfig+0x11c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d01f      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a2a      	ldr	r2, [pc, #168]	; (8006c34 <TIM_Base_SetConfig+0x120>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d01b      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a29      	ldr	r2, [pc, #164]	; (8006c38 <TIM_Base_SetConfig+0x124>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d017      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a28      	ldr	r2, [pc, #160]	; (8006c3c <TIM_Base_SetConfig+0x128>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d013      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a27      	ldr	r2, [pc, #156]	; (8006c40 <TIM_Base_SetConfig+0x12c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00f      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a26      	ldr	r2, [pc, #152]	; (8006c44 <TIM_Base_SetConfig+0x130>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00b      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a25      	ldr	r2, [pc, #148]	; (8006c48 <TIM_Base_SetConfig+0x134>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d007      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a24      	ldr	r2, [pc, #144]	; (8006c4c <TIM_Base_SetConfig+0x138>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d003      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a23      	ldr	r2, [pc, #140]	; (8006c50 <TIM_Base_SetConfig+0x13c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d108      	bne.n	8006bd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a0a      	ldr	r2, [pc, #40]	; (8006c28 <TIM_Base_SetConfig+0x114>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d003      	beq.n	8006c0c <TIM_Base_SetConfig+0xf8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a0c      	ldr	r2, [pc, #48]	; (8006c38 <TIM_Base_SetConfig+0x124>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d103      	bne.n	8006c14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	691a      	ldr	r2, [r3, #16]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	615a      	str	r2, [r3, #20]
}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40000400 	.word	0x40000400
 8006c30:	40000800 	.word	0x40000800
 8006c34:	40000c00 	.word	0x40000c00
 8006c38:	40010400 	.word	0x40010400
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40014400 	.word	0x40014400
 8006c44:	40014800 	.word	0x40014800
 8006c48:	40001800 	.word	0x40001800
 8006c4c:	40001c00 	.word	0x40001c00
 8006c50:	40002000 	.word	0x40002000

08006c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f023 0201 	bic.w	r2, r3, #1
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4b2b      	ldr	r3, [pc, #172]	; (8006d2c <TIM_OC1_SetConfig+0xd8>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f023 0302 	bic.w	r3, r3, #2
 8006c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a21      	ldr	r2, [pc, #132]	; (8006d30 <TIM_OC1_SetConfig+0xdc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_OC1_SetConfig+0x64>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a20      	ldr	r2, [pc, #128]	; (8006d34 <TIM_OC1_SetConfig+0xe0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d10c      	bne.n	8006cd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f023 0308 	bic.w	r3, r3, #8
 8006cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f023 0304 	bic.w	r3, r3, #4
 8006cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a16      	ldr	r2, [pc, #88]	; (8006d30 <TIM_OC1_SetConfig+0xdc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d003      	beq.n	8006ce2 <TIM_OC1_SetConfig+0x8e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a15      	ldr	r2, [pc, #84]	; (8006d34 <TIM_OC1_SetConfig+0xe0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d111      	bne.n	8006d06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	621a      	str	r2, [r3, #32]
}
 8006d20:	bf00      	nop
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	fffeff8f 	.word	0xfffeff8f
 8006d30:	40010000 	.word	0x40010000
 8006d34:	40010400 	.word	0x40010400

08006d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	f023 0210 	bic.w	r2, r3, #16
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4b2e      	ldr	r3, [pc, #184]	; (8006e1c <TIM_OC2_SetConfig+0xe4>)
 8006d64:	4013      	ands	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f023 0320 	bic.w	r3, r3, #32
 8006d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a23      	ldr	r2, [pc, #140]	; (8006e20 <TIM_OC2_SetConfig+0xe8>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d003      	beq.n	8006da0 <TIM_OC2_SetConfig+0x68>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a22      	ldr	r2, [pc, #136]	; (8006e24 <TIM_OC2_SetConfig+0xec>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d10d      	bne.n	8006dbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a18      	ldr	r2, [pc, #96]	; (8006e20 <TIM_OC2_SetConfig+0xe8>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_OC2_SetConfig+0x94>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a17      	ldr	r2, [pc, #92]	; (8006e24 <TIM_OC2_SetConfig+0xec>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d113      	bne.n	8006df4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	feff8fff 	.word	0xfeff8fff
 8006e20:	40010000 	.word	0x40010000
 8006e24:	40010400 	.word	0x40010400

08006e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4b2d      	ldr	r3, [pc, #180]	; (8006f08 <TIM_OC3_SetConfig+0xe0>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a22      	ldr	r2, [pc, #136]	; (8006f0c <TIM_OC3_SetConfig+0xe4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d003      	beq.n	8006e8e <TIM_OC3_SetConfig+0x66>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a21      	ldr	r2, [pc, #132]	; (8006f10 <TIM_OC3_SetConfig+0xe8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d10d      	bne.n	8006eaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	021b      	lsls	r3, r3, #8
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a17      	ldr	r2, [pc, #92]	; (8006f0c <TIM_OC3_SetConfig+0xe4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d003      	beq.n	8006eba <TIM_OC3_SetConfig+0x92>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a16      	ldr	r2, [pc, #88]	; (8006f10 <TIM_OC3_SetConfig+0xe8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d113      	bne.n	8006ee2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	621a      	str	r2, [r3, #32]
}
 8006efc:	bf00      	nop
 8006efe:	371c      	adds	r7, #28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	fffeff8f 	.word	0xfffeff8f
 8006f0c:	40010000 	.word	0x40010000
 8006f10:	40010400 	.word	0x40010400

08006f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4b1e      	ldr	r3, [pc, #120]	; (8006fb8 <TIM_OC4_SetConfig+0xa4>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	031b      	lsls	r3, r3, #12
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a13      	ldr	r2, [pc, #76]	; (8006fbc <TIM_OC4_SetConfig+0xa8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_OC4_SetConfig+0x68>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a12      	ldr	r2, [pc, #72]	; (8006fc0 <TIM_OC4_SetConfig+0xac>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d109      	bne.n	8006f90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	019b      	lsls	r3, r3, #6
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	621a      	str	r2, [r3, #32]
}
 8006faa:	bf00      	nop
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	feff8fff 	.word	0xfeff8fff
 8006fbc:	40010000 	.word	0x40010000
 8006fc0:	40010400 	.word	0x40010400

08006fc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4b1b      	ldr	r3, [pc, #108]	; (800705c <TIM_OC5_SetConfig+0x98>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007004:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	041b      	lsls	r3, r3, #16
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	4313      	orrs	r3, r2
 8007010:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a12      	ldr	r2, [pc, #72]	; (8007060 <TIM_OC5_SetConfig+0x9c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d003      	beq.n	8007022 <TIM_OC5_SetConfig+0x5e>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a11      	ldr	r2, [pc, #68]	; (8007064 <TIM_OC5_SetConfig+0xa0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d109      	bne.n	8007036 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007028:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	621a      	str	r2, [r3, #32]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	fffeff8f 	.word	0xfffeff8f
 8007060:	40010000 	.word	0x40010000
 8007064:	40010400 	.word	0x40010400

08007068 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <TIM_OC6_SetConfig+0x9c>)
 8007094:	4013      	ands	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	051b      	lsls	r3, r3, #20
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a13      	ldr	r2, [pc, #76]	; (8007108 <TIM_OC6_SetConfig+0xa0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d003      	beq.n	80070c8 <TIM_OC6_SetConfig+0x60>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a12      	ldr	r2, [pc, #72]	; (800710c <TIM_OC6_SetConfig+0xa4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d109      	bne.n	80070dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	029b      	lsls	r3, r3, #10
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4313      	orrs	r3, r2
 80070da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	621a      	str	r2, [r3, #32]
}
 80070f6:	bf00      	nop
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	feff8fff 	.word	0xfeff8fff
 8007108:	40010000 	.word	0x40010000
 800710c:	40010400 	.word	0x40010400

08007110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	f023 0201 	bic.w	r2, r3, #1
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800713a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	4313      	orrs	r3, r2
 8007144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f023 030a 	bic.w	r3, r3, #10
 800714c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	621a      	str	r2, [r3, #32]
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800716e:	b480      	push	{r7}
 8007170:	b087      	sub	sp, #28
 8007172:	af00      	add	r7, sp, #0
 8007174:	60f8      	str	r0, [r7, #12]
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	f023 0210 	bic.w	r2, r3, #16
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	031b      	lsls	r3, r3, #12
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	621a      	str	r2, [r3, #32]
}
 80071c2:	bf00      	nop
 80071c4:	371c      	adds	r7, #28
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f043 0307 	orr.w	r3, r3, #7
 80071f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	609a      	str	r2, [r3, #8]
}
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800721e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	021a      	lsls	r2, r3, #8
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	431a      	orrs	r2, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4313      	orrs	r3, r2
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	609a      	str	r2, [r3, #8]
}
 8007238:	bf00      	nop
 800723a:	371c      	adds	r7, #28
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	2201      	movs	r2, #1
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	43db      	mvns	r3, r3
 8007266:	401a      	ands	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f003 031f 	and.w	r3, r3, #31
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	fa01 f303 	lsl.w	r3, r1, r3
 800727c:	431a      	orrs	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	621a      	str	r2, [r3, #32]
}
 8007282:	bf00      	nop
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
	...

08007290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e06d      	b.n	8007384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a30      	ldr	r2, [pc, #192]	; (8007390 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d004      	beq.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a2f      	ldr	r2, [pc, #188]	; (8007394 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d108      	bne.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a20      	ldr	r2, [pc, #128]	; (8007390 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d022      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800731a:	d01d      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1d      	ldr	r2, [pc, #116]	; (8007398 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d018      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1c      	ldr	r2, [pc, #112]	; (800739c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d013      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a1a      	ldr	r2, [pc, #104]	; (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00e      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a15      	ldr	r2, [pc, #84]	; (8007394 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d009      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a16      	ldr	r2, [pc, #88]	; (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a15      	ldr	r2, [pc, #84]	; (80073a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d10c      	bne.n	8007372 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800735e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	4313      	orrs	r3, r2
 8007368:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	40010000 	.word	0x40010000
 8007394:	40010400 	.word	0x40010400
 8007398:	40000400 	.word	0x40000400
 800739c:	40000800 	.word	0x40000800
 80073a0:	40000c00 	.word	0x40000c00
 80073a4:	40014000 	.word	0x40014000
 80073a8:	40001800 	.word	0x40001800

080073ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e040      	b.n	800747c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fc fb9a 	bl	8003b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2224      	movs	r2, #36	; 0x24
 8007414:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0201 	bic.w	r2, r2, #1
 8007424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fc08 	bl	8007c3c <UART_SetConfig>
 800742c:	4603      	mov	r3, r0
 800742e:	2b01      	cmp	r3, #1
 8007430:	d101      	bne.n	8007436 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e022      	b.n	800747c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fe60 	bl	8008104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689a      	ldr	r2, [r3, #8]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0201 	orr.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fee7 	bl	8008248 <UART_CheckIdleState>
 800747a:	4603      	mov	r3, r0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08a      	sub	sp, #40	; 0x28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007496:	2b20      	cmp	r3, #32
 8007498:	d165      	bne.n	8007566 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <HAL_UART_Transmit_DMA+0x22>
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e05e      	b.n	8007568 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	88fa      	ldrh	r2, [r7, #6]
 80074b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	88fa      	ldrh	r2, [r7, #6]
 80074bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2221      	movs	r2, #33	; 0x21
 80074cc:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d027      	beq.n	8007526 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074da:	4a25      	ldr	r2, [pc, #148]	; (8007570 <HAL_UART_Transmit_DMA+0xec>)
 80074dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e2:	4a24      	ldr	r2, [pc, #144]	; (8007574 <HAL_UART_Transmit_DMA+0xf0>)
 80074e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ea:	4a23      	ldr	r2, [pc, #140]	; (8007578 <HAL_UART_Transmit_DMA+0xf4>)
 80074ec:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f2:	2200      	movs	r2, #0
 80074f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fe:	4619      	mov	r1, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3328      	adds	r3, #40	; 0x28
 8007506:	461a      	mov	r2, r3
 8007508:	88fb      	ldrh	r3, [r7, #6]
 800750a:	f7fc ffb3 	bl	8004474 <HAL_DMA_Start_IT>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d008      	beq.n	8007526 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2210      	movs	r2, #16
 8007518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2220      	movs	r2, #32
 8007520:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e020      	b.n	8007568 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2240      	movs	r2, #64	; 0x40
 800752c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	613b      	str	r3, [r7, #16]
   return(result);
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3308      	adds	r3, #8
 800754c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754e:	623a      	str	r2, [r7, #32]
 8007550:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	69f9      	ldr	r1, [r7, #28]
 8007554:	6a3a      	ldr	r2, [r7, #32]
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	61bb      	str	r3, [r7, #24]
   return(result);
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e5      	bne.n	800752e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	e000      	b.n	8007568 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007566:	2302      	movs	r3, #2
  }
}
 8007568:	4618      	mov	r0, r3
 800756a:	3728      	adds	r7, #40	; 0x28
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	080086c5 	.word	0x080086c5
 8007574:	0800875b 	.word	0x0800875b
 8007578:	080088dd 	.word	0x080088dd

0800757c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08a      	sub	sp, #40	; 0x28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	4613      	mov	r3, r2
 8007588:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007590:	2b20      	cmp	r3, #32
 8007592:	d132      	bne.n	80075fa <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_UART_Receive_DMA+0x24>
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e02b      	b.n	80075fc <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d018      	beq.n	80075ea <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	e853 3f00 	ldrex	r3, [r3]
 80075c4:	613b      	str	r3, [r7, #16]
   return(result);
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	623b      	str	r3, [r7, #32]
 80075d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	69f9      	ldr	r1, [r7, #28]
 80075dc:	6a3a      	ldr	r2, [r7, #32]
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e6      	bne.n	80075b8 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	461a      	mov	r2, r3
 80075ee:	68b9      	ldr	r1, [r7, #8]
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 ff3d 	bl	8008470 <UART_Start_Receive_DMA>
 80075f6:	4603      	mov	r3, r0
 80075f8:	e000      	b.n	80075fc <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80075fa:	2302      	movs	r3, #2
  }
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3728      	adds	r7, #40	; 0x28
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b0ba      	sub	sp, #232	; 0xe8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800762a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800762e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007632:	4013      	ands	r3, r2
 8007634:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800763c:	2b00      	cmp	r3, #0
 800763e:	d115      	bne.n	800766c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00f      	beq.n	800766c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800764c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007650:	f003 0320 	and.w	r3, r3, #32
 8007654:	2b00      	cmp	r3, #0
 8007656:	d009      	beq.n	800766c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 82ac 	beq.w	8007bba <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	4798      	blx	r3
      }
      return;
 800766a:	e2a6      	b.n	8007bba <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800766c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 8117 	beq.w	80078a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007682:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007686:	4b85      	ldr	r3, [pc, #532]	; (800789c <HAL_UART_IRQHandler+0x298>)
 8007688:	4013      	ands	r3, r2
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 810a 	beq.w	80078a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d011      	beq.n	80076c0 <HAL_UART_IRQHandler+0xbc>
 800769c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00b      	beq.n	80076c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2201      	movs	r2, #1
 80076ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b6:	f043 0201 	orr.w	r2, r3, #1
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d011      	beq.n	80076f0 <HAL_UART_IRQHandler+0xec>
 80076cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2202      	movs	r2, #2
 80076de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076e6:	f043 0204 	orr.w	r2, r3, #4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d011      	beq.n	8007720 <HAL_UART_IRQHandler+0x11c>
 80076fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2204      	movs	r2, #4
 800770e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007716:	f043 0202 	orr.w	r2, r3, #2
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b00      	cmp	r3, #0
 800772a:	d017      	beq.n	800775c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800772c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b00      	cmp	r3, #0
 8007736:	d105      	bne.n	8007744 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800773c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00b      	beq.n	800775c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2208      	movs	r2, #8
 800774a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007752:	f043 0208 	orr.w	r2, r3, #8
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800775c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007764:	2b00      	cmp	r3, #0
 8007766:	d012      	beq.n	800778e <HAL_UART_IRQHandler+0x18a>
 8007768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800776c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00c      	beq.n	800778e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800777c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007784:	f043 0220 	orr.w	r2, r3, #32
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8212 	beq.w	8007bbe <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800779a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00d      	beq.n	80077c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d007      	beq.n	80077c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d005      	beq.n	80077e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d04f      	beq.n	8007886 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 ff08 	bl	80085fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d141      	bne.n	800787e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3308      	adds	r3, #8
 8007800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007818:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3308      	adds	r3, #8
 8007822:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007826:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800782a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007832:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800783e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1d9      	bne.n	80077fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800784a:	2b00      	cmp	r3, #0
 800784c:	d013      	beq.n	8007876 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007852:	4a13      	ldr	r2, [pc, #76]	; (80078a0 <HAL_UART_IRQHandler+0x29c>)
 8007854:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800785a:	4618      	mov	r0, r3
 800785c:	f7fc feda 	bl	8004614 <HAL_DMA_Abort_IT>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d017      	beq.n	8007896 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800786a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007874:	e00f      	b.n	8007896 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f9c0 	bl	8007bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800787c:	e00b      	b.n	8007896 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f9bc 	bl	8007bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007884:	e007      	b.n	8007896 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f9b8 	bl	8007bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007894:	e193      	b.n	8007bbe <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007896:	bf00      	nop
    return;
 8007898:	e191      	b.n	8007bbe <HAL_UART_IRQHandler+0x5ba>
 800789a:	bf00      	nop
 800789c:	04000120 	.word	0x04000120
 80078a0:	0800895b 	.word	0x0800895b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	f040 814c 	bne.w	8007b46 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b2:	f003 0310 	and.w	r3, r3, #16
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 8145 	beq.w	8007b46 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 813e 	beq.w	8007b46 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2210      	movs	r2, #16
 80078d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078dc:	2b40      	cmp	r3, #64	; 0x40
 80078de:	f040 80b6 	bne.w	8007a4e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 8165 	beq.w	8007bc2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007902:	429a      	cmp	r2, r3
 8007904:	f080 815d 	bcs.w	8007bc2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800790e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800791c:	f000 8086 	beq.w	8007a2c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800793c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	461a      	mov	r2, r3
 8007946:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800794a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800794e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007956:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1da      	bne.n	8007920 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800797a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3308      	adds	r3, #8
 800798a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800798e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007992:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007996:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e1      	bne.n	800796a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3308      	adds	r3, #8
 80079ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3308      	adds	r3, #8
 80079c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e3      	bne.n	80079a6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fc:	f023 0310 	bic.w	r3, r3, #16
 8007a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e4      	bne.n	80079ec <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fc fd84 	bl	8004534 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f8e2 	bl	8007c10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a4c:	e0b9      	b.n	8007bc2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80ab 	beq.w	8007bc6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007a70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 80a6 	beq.w	8007bc6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e4      	bne.n	8007a7a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	623b      	str	r3, [r7, #32]
   return(result);
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	f023 0301 	bic.w	r3, r3, #1
 8007ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3308      	adds	r3, #8
 8007ad0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ad4:	633a      	str	r2, [r7, #48]	; 0x30
 8007ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e3      	bne.n	8007ab0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f023 0310 	bic.w	r3, r3, #16
 8007b10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b1e:	61fb      	str	r3, [r7, #28]
 8007b20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	69b9      	ldr	r1, [r7, #24]
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1e4      	bne.n	8007afc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f866 	bl	8007c10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b44:	e03f      	b.n	8007bc6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00e      	beq.n	8007b70 <HAL_UART_IRQHandler+0x56c>
 8007b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d008      	beq.n	8007b70 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f85d 	bl	8007c28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b6e:	e02d      	b.n	8007bcc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00e      	beq.n	8007b9a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d008      	beq.n	8007b9a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d01c      	beq.n	8007bca <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	4798      	blx	r3
    }
    return;
 8007b98:	e017      	b.n	8007bca <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d012      	beq.n	8007bcc <HAL_UART_IRQHandler+0x5c8>
 8007ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00c      	beq.n	8007bcc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fee7 	bl	8008986 <UART_EndTransmit_IT>
    return;
 8007bb8:	e008      	b.n	8007bcc <HAL_UART_IRQHandler+0x5c8>
      return;
 8007bba:	bf00      	nop
 8007bbc:	e006      	b.n	8007bcc <HAL_UART_IRQHandler+0x5c8>
    return;
 8007bbe:	bf00      	nop
 8007bc0:	e004      	b.n	8007bcc <HAL_UART_IRQHandler+0x5c8>
      return;
 8007bc2:	bf00      	nop
 8007bc4:	e002      	b.n	8007bcc <HAL_UART_IRQHandler+0x5c8>
      return;
 8007bc6:	bf00      	nop
 8007bc8:	e000      	b.n	8007bcc <HAL_UART_IRQHandler+0x5c8>
    return;
 8007bca:	bf00      	nop
  }

}
 8007bcc:	37e8      	adds	r7, #232	; 0xe8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop

08007bd4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	431a      	orrs	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	431a      	orrs	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	4ba6      	ldr	r3, [pc, #664]	; (8007f00 <UART_SetConfig+0x2c4>)
 8007c68:	4013      	ands	r3, r2
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	6812      	ldr	r2, [r2, #0]
 8007c6e:	6979      	ldr	r1, [r7, #20]
 8007c70:	430b      	orrs	r3, r1
 8007c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a94      	ldr	r2, [pc, #592]	; (8007f04 <UART_SetConfig+0x2c8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d120      	bne.n	8007cfa <UART_SetConfig+0xbe>
 8007cb8:	4b93      	ldr	r3, [pc, #588]	; (8007f08 <UART_SetConfig+0x2cc>)
 8007cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d816      	bhi.n	8007cf4 <UART_SetConfig+0xb8>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <UART_SetConfig+0x90>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007cdd 	.word	0x08007cdd
 8007cd0:	08007ce9 	.word	0x08007ce9
 8007cd4:	08007ce3 	.word	0x08007ce3
 8007cd8:	08007cef 	.word	0x08007cef
 8007cdc:	2301      	movs	r3, #1
 8007cde:	77fb      	strb	r3, [r7, #31]
 8007ce0:	e150      	b.n	8007f84 <UART_SetConfig+0x348>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	77fb      	strb	r3, [r7, #31]
 8007ce6:	e14d      	b.n	8007f84 <UART_SetConfig+0x348>
 8007ce8:	2304      	movs	r3, #4
 8007cea:	77fb      	strb	r3, [r7, #31]
 8007cec:	e14a      	b.n	8007f84 <UART_SetConfig+0x348>
 8007cee:	2308      	movs	r3, #8
 8007cf0:	77fb      	strb	r3, [r7, #31]
 8007cf2:	e147      	b.n	8007f84 <UART_SetConfig+0x348>
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	77fb      	strb	r3, [r7, #31]
 8007cf8:	e144      	b.n	8007f84 <UART_SetConfig+0x348>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a83      	ldr	r2, [pc, #524]	; (8007f0c <UART_SetConfig+0x2d0>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d132      	bne.n	8007d6a <UART_SetConfig+0x12e>
 8007d04:	4b80      	ldr	r3, [pc, #512]	; (8007f08 <UART_SetConfig+0x2cc>)
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0a:	f003 030c 	and.w	r3, r3, #12
 8007d0e:	2b0c      	cmp	r3, #12
 8007d10:	d828      	bhi.n	8007d64 <UART_SetConfig+0x128>
 8007d12:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <UART_SetConfig+0xdc>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d4d 	.word	0x08007d4d
 8007d1c:	08007d65 	.word	0x08007d65
 8007d20:	08007d65 	.word	0x08007d65
 8007d24:	08007d65 	.word	0x08007d65
 8007d28:	08007d59 	.word	0x08007d59
 8007d2c:	08007d65 	.word	0x08007d65
 8007d30:	08007d65 	.word	0x08007d65
 8007d34:	08007d65 	.word	0x08007d65
 8007d38:	08007d53 	.word	0x08007d53
 8007d3c:	08007d65 	.word	0x08007d65
 8007d40:	08007d65 	.word	0x08007d65
 8007d44:	08007d65 	.word	0x08007d65
 8007d48:	08007d5f 	.word	0x08007d5f
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	77fb      	strb	r3, [r7, #31]
 8007d50:	e118      	b.n	8007f84 <UART_SetConfig+0x348>
 8007d52:	2302      	movs	r3, #2
 8007d54:	77fb      	strb	r3, [r7, #31]
 8007d56:	e115      	b.n	8007f84 <UART_SetConfig+0x348>
 8007d58:	2304      	movs	r3, #4
 8007d5a:	77fb      	strb	r3, [r7, #31]
 8007d5c:	e112      	b.n	8007f84 <UART_SetConfig+0x348>
 8007d5e:	2308      	movs	r3, #8
 8007d60:	77fb      	strb	r3, [r7, #31]
 8007d62:	e10f      	b.n	8007f84 <UART_SetConfig+0x348>
 8007d64:	2310      	movs	r3, #16
 8007d66:	77fb      	strb	r3, [r7, #31]
 8007d68:	e10c      	b.n	8007f84 <UART_SetConfig+0x348>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a68      	ldr	r2, [pc, #416]	; (8007f10 <UART_SetConfig+0x2d4>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d120      	bne.n	8007db6 <UART_SetConfig+0x17a>
 8007d74:	4b64      	ldr	r3, [pc, #400]	; (8007f08 <UART_SetConfig+0x2cc>)
 8007d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d7e:	2b30      	cmp	r3, #48	; 0x30
 8007d80:	d013      	beq.n	8007daa <UART_SetConfig+0x16e>
 8007d82:	2b30      	cmp	r3, #48	; 0x30
 8007d84:	d814      	bhi.n	8007db0 <UART_SetConfig+0x174>
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d009      	beq.n	8007d9e <UART_SetConfig+0x162>
 8007d8a:	2b20      	cmp	r3, #32
 8007d8c:	d810      	bhi.n	8007db0 <UART_SetConfig+0x174>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <UART_SetConfig+0x15c>
 8007d92:	2b10      	cmp	r3, #16
 8007d94:	d006      	beq.n	8007da4 <UART_SetConfig+0x168>
 8007d96:	e00b      	b.n	8007db0 <UART_SetConfig+0x174>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	77fb      	strb	r3, [r7, #31]
 8007d9c:	e0f2      	b.n	8007f84 <UART_SetConfig+0x348>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	77fb      	strb	r3, [r7, #31]
 8007da2:	e0ef      	b.n	8007f84 <UART_SetConfig+0x348>
 8007da4:	2304      	movs	r3, #4
 8007da6:	77fb      	strb	r3, [r7, #31]
 8007da8:	e0ec      	b.n	8007f84 <UART_SetConfig+0x348>
 8007daa:	2308      	movs	r3, #8
 8007dac:	77fb      	strb	r3, [r7, #31]
 8007dae:	e0e9      	b.n	8007f84 <UART_SetConfig+0x348>
 8007db0:	2310      	movs	r3, #16
 8007db2:	77fb      	strb	r3, [r7, #31]
 8007db4:	e0e6      	b.n	8007f84 <UART_SetConfig+0x348>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a56      	ldr	r2, [pc, #344]	; (8007f14 <UART_SetConfig+0x2d8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d120      	bne.n	8007e02 <UART_SetConfig+0x1c6>
 8007dc0:	4b51      	ldr	r3, [pc, #324]	; (8007f08 <UART_SetConfig+0x2cc>)
 8007dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007dca:	2bc0      	cmp	r3, #192	; 0xc0
 8007dcc:	d013      	beq.n	8007df6 <UART_SetConfig+0x1ba>
 8007dce:	2bc0      	cmp	r3, #192	; 0xc0
 8007dd0:	d814      	bhi.n	8007dfc <UART_SetConfig+0x1c0>
 8007dd2:	2b80      	cmp	r3, #128	; 0x80
 8007dd4:	d009      	beq.n	8007dea <UART_SetConfig+0x1ae>
 8007dd6:	2b80      	cmp	r3, #128	; 0x80
 8007dd8:	d810      	bhi.n	8007dfc <UART_SetConfig+0x1c0>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <UART_SetConfig+0x1a8>
 8007dde:	2b40      	cmp	r3, #64	; 0x40
 8007de0:	d006      	beq.n	8007df0 <UART_SetConfig+0x1b4>
 8007de2:	e00b      	b.n	8007dfc <UART_SetConfig+0x1c0>
 8007de4:	2300      	movs	r3, #0
 8007de6:	77fb      	strb	r3, [r7, #31]
 8007de8:	e0cc      	b.n	8007f84 <UART_SetConfig+0x348>
 8007dea:	2302      	movs	r3, #2
 8007dec:	77fb      	strb	r3, [r7, #31]
 8007dee:	e0c9      	b.n	8007f84 <UART_SetConfig+0x348>
 8007df0:	2304      	movs	r3, #4
 8007df2:	77fb      	strb	r3, [r7, #31]
 8007df4:	e0c6      	b.n	8007f84 <UART_SetConfig+0x348>
 8007df6:	2308      	movs	r3, #8
 8007df8:	77fb      	strb	r3, [r7, #31]
 8007dfa:	e0c3      	b.n	8007f84 <UART_SetConfig+0x348>
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	77fb      	strb	r3, [r7, #31]
 8007e00:	e0c0      	b.n	8007f84 <UART_SetConfig+0x348>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a44      	ldr	r2, [pc, #272]	; (8007f18 <UART_SetConfig+0x2dc>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d125      	bne.n	8007e58 <UART_SetConfig+0x21c>
 8007e0c:	4b3e      	ldr	r3, [pc, #248]	; (8007f08 <UART_SetConfig+0x2cc>)
 8007e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e1a:	d017      	beq.n	8007e4c <UART_SetConfig+0x210>
 8007e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e20:	d817      	bhi.n	8007e52 <UART_SetConfig+0x216>
 8007e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e26:	d00b      	beq.n	8007e40 <UART_SetConfig+0x204>
 8007e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e2c:	d811      	bhi.n	8007e52 <UART_SetConfig+0x216>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <UART_SetConfig+0x1fe>
 8007e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e36:	d006      	beq.n	8007e46 <UART_SetConfig+0x20a>
 8007e38:	e00b      	b.n	8007e52 <UART_SetConfig+0x216>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	77fb      	strb	r3, [r7, #31]
 8007e3e:	e0a1      	b.n	8007f84 <UART_SetConfig+0x348>
 8007e40:	2302      	movs	r3, #2
 8007e42:	77fb      	strb	r3, [r7, #31]
 8007e44:	e09e      	b.n	8007f84 <UART_SetConfig+0x348>
 8007e46:	2304      	movs	r3, #4
 8007e48:	77fb      	strb	r3, [r7, #31]
 8007e4a:	e09b      	b.n	8007f84 <UART_SetConfig+0x348>
 8007e4c:	2308      	movs	r3, #8
 8007e4e:	77fb      	strb	r3, [r7, #31]
 8007e50:	e098      	b.n	8007f84 <UART_SetConfig+0x348>
 8007e52:	2310      	movs	r3, #16
 8007e54:	77fb      	strb	r3, [r7, #31]
 8007e56:	e095      	b.n	8007f84 <UART_SetConfig+0x348>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a2f      	ldr	r2, [pc, #188]	; (8007f1c <UART_SetConfig+0x2e0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d125      	bne.n	8007eae <UART_SetConfig+0x272>
 8007e62:	4b29      	ldr	r3, [pc, #164]	; (8007f08 <UART_SetConfig+0x2cc>)
 8007e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e70:	d017      	beq.n	8007ea2 <UART_SetConfig+0x266>
 8007e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e76:	d817      	bhi.n	8007ea8 <UART_SetConfig+0x26c>
 8007e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e7c:	d00b      	beq.n	8007e96 <UART_SetConfig+0x25a>
 8007e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e82:	d811      	bhi.n	8007ea8 <UART_SetConfig+0x26c>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <UART_SetConfig+0x254>
 8007e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e8c:	d006      	beq.n	8007e9c <UART_SetConfig+0x260>
 8007e8e:	e00b      	b.n	8007ea8 <UART_SetConfig+0x26c>
 8007e90:	2301      	movs	r3, #1
 8007e92:	77fb      	strb	r3, [r7, #31]
 8007e94:	e076      	b.n	8007f84 <UART_SetConfig+0x348>
 8007e96:	2302      	movs	r3, #2
 8007e98:	77fb      	strb	r3, [r7, #31]
 8007e9a:	e073      	b.n	8007f84 <UART_SetConfig+0x348>
 8007e9c:	2304      	movs	r3, #4
 8007e9e:	77fb      	strb	r3, [r7, #31]
 8007ea0:	e070      	b.n	8007f84 <UART_SetConfig+0x348>
 8007ea2:	2308      	movs	r3, #8
 8007ea4:	77fb      	strb	r3, [r7, #31]
 8007ea6:	e06d      	b.n	8007f84 <UART_SetConfig+0x348>
 8007ea8:	2310      	movs	r3, #16
 8007eaa:	77fb      	strb	r3, [r7, #31]
 8007eac:	e06a      	b.n	8007f84 <UART_SetConfig+0x348>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a1b      	ldr	r2, [pc, #108]	; (8007f20 <UART_SetConfig+0x2e4>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d138      	bne.n	8007f2a <UART_SetConfig+0x2ee>
 8007eb8:	4b13      	ldr	r3, [pc, #76]	; (8007f08 <UART_SetConfig+0x2cc>)
 8007eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ebe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ec2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ec6:	d017      	beq.n	8007ef8 <UART_SetConfig+0x2bc>
 8007ec8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ecc:	d82a      	bhi.n	8007f24 <UART_SetConfig+0x2e8>
 8007ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ed2:	d00b      	beq.n	8007eec <UART_SetConfig+0x2b0>
 8007ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ed8:	d824      	bhi.n	8007f24 <UART_SetConfig+0x2e8>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <UART_SetConfig+0x2aa>
 8007ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee2:	d006      	beq.n	8007ef2 <UART_SetConfig+0x2b6>
 8007ee4:	e01e      	b.n	8007f24 <UART_SetConfig+0x2e8>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	77fb      	strb	r3, [r7, #31]
 8007eea:	e04b      	b.n	8007f84 <UART_SetConfig+0x348>
 8007eec:	2302      	movs	r3, #2
 8007eee:	77fb      	strb	r3, [r7, #31]
 8007ef0:	e048      	b.n	8007f84 <UART_SetConfig+0x348>
 8007ef2:	2304      	movs	r3, #4
 8007ef4:	77fb      	strb	r3, [r7, #31]
 8007ef6:	e045      	b.n	8007f84 <UART_SetConfig+0x348>
 8007ef8:	2308      	movs	r3, #8
 8007efa:	77fb      	strb	r3, [r7, #31]
 8007efc:	e042      	b.n	8007f84 <UART_SetConfig+0x348>
 8007efe:	bf00      	nop
 8007f00:	efff69f3 	.word	0xefff69f3
 8007f04:	40011000 	.word	0x40011000
 8007f08:	40023800 	.word	0x40023800
 8007f0c:	40004400 	.word	0x40004400
 8007f10:	40004800 	.word	0x40004800
 8007f14:	40004c00 	.word	0x40004c00
 8007f18:	40005000 	.word	0x40005000
 8007f1c:	40011400 	.word	0x40011400
 8007f20:	40007800 	.word	0x40007800
 8007f24:	2310      	movs	r3, #16
 8007f26:	77fb      	strb	r3, [r7, #31]
 8007f28:	e02c      	b.n	8007f84 <UART_SetConfig+0x348>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a72      	ldr	r2, [pc, #456]	; (80080f8 <UART_SetConfig+0x4bc>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d125      	bne.n	8007f80 <UART_SetConfig+0x344>
 8007f34:	4b71      	ldr	r3, [pc, #452]	; (80080fc <UART_SetConfig+0x4c0>)
 8007f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f42:	d017      	beq.n	8007f74 <UART_SetConfig+0x338>
 8007f44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f48:	d817      	bhi.n	8007f7a <UART_SetConfig+0x33e>
 8007f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f4e:	d00b      	beq.n	8007f68 <UART_SetConfig+0x32c>
 8007f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f54:	d811      	bhi.n	8007f7a <UART_SetConfig+0x33e>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <UART_SetConfig+0x326>
 8007f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f5e:	d006      	beq.n	8007f6e <UART_SetConfig+0x332>
 8007f60:	e00b      	b.n	8007f7a <UART_SetConfig+0x33e>
 8007f62:	2300      	movs	r3, #0
 8007f64:	77fb      	strb	r3, [r7, #31]
 8007f66:	e00d      	b.n	8007f84 <UART_SetConfig+0x348>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	77fb      	strb	r3, [r7, #31]
 8007f6c:	e00a      	b.n	8007f84 <UART_SetConfig+0x348>
 8007f6e:	2304      	movs	r3, #4
 8007f70:	77fb      	strb	r3, [r7, #31]
 8007f72:	e007      	b.n	8007f84 <UART_SetConfig+0x348>
 8007f74:	2308      	movs	r3, #8
 8007f76:	77fb      	strb	r3, [r7, #31]
 8007f78:	e004      	b.n	8007f84 <UART_SetConfig+0x348>
 8007f7a:	2310      	movs	r3, #16
 8007f7c:	77fb      	strb	r3, [r7, #31]
 8007f7e:	e001      	b.n	8007f84 <UART_SetConfig+0x348>
 8007f80:	2310      	movs	r3, #16
 8007f82:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f8c:	d15b      	bne.n	8008046 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007f8e:	7ffb      	ldrb	r3, [r7, #31]
 8007f90:	2b08      	cmp	r3, #8
 8007f92:	d828      	bhi.n	8007fe6 <UART_SetConfig+0x3aa>
 8007f94:	a201      	add	r2, pc, #4	; (adr r2, 8007f9c <UART_SetConfig+0x360>)
 8007f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9a:	bf00      	nop
 8007f9c:	08007fc1 	.word	0x08007fc1
 8007fa0:	08007fc9 	.word	0x08007fc9
 8007fa4:	08007fd1 	.word	0x08007fd1
 8007fa8:	08007fe7 	.word	0x08007fe7
 8007fac:	08007fd7 	.word	0x08007fd7
 8007fb0:	08007fe7 	.word	0x08007fe7
 8007fb4:	08007fe7 	.word	0x08007fe7
 8007fb8:	08007fe7 	.word	0x08007fe7
 8007fbc:	08007fdf 	.word	0x08007fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fc0:	f7fd fc76 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 8007fc4:	61b8      	str	r0, [r7, #24]
        break;
 8007fc6:	e013      	b.n	8007ff0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fc8:	f7fd fc86 	bl	80058d8 <HAL_RCC_GetPCLK2Freq>
 8007fcc:	61b8      	str	r0, [r7, #24]
        break;
 8007fce:	e00f      	b.n	8007ff0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fd0:	4b4b      	ldr	r3, [pc, #300]	; (8008100 <UART_SetConfig+0x4c4>)
 8007fd2:	61bb      	str	r3, [r7, #24]
        break;
 8007fd4:	e00c      	b.n	8007ff0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fd6:	f7fd fb59 	bl	800568c <HAL_RCC_GetSysClockFreq>
 8007fda:	61b8      	str	r0, [r7, #24]
        break;
 8007fdc:	e008      	b.n	8007ff0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fe2:	61bb      	str	r3, [r7, #24]
        break;
 8007fe4:	e004      	b.n	8007ff0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	77bb      	strb	r3, [r7, #30]
        break;
 8007fee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d074      	beq.n	80080e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	005a      	lsls	r2, r3, #1
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	085b      	lsrs	r3, r3, #1
 8008000:	441a      	add	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	fbb2 f3f3 	udiv	r3, r2, r3
 800800a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2b0f      	cmp	r3, #15
 8008010:	d916      	bls.n	8008040 <UART_SetConfig+0x404>
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008018:	d212      	bcs.n	8008040 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	b29b      	uxth	r3, r3
 800801e:	f023 030f 	bic.w	r3, r3, #15
 8008022:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	085b      	lsrs	r3, r3, #1
 8008028:	b29b      	uxth	r3, r3
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	b29a      	uxth	r2, r3
 8008030:	89fb      	ldrh	r3, [r7, #14]
 8008032:	4313      	orrs	r3, r2
 8008034:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	89fa      	ldrh	r2, [r7, #14]
 800803c:	60da      	str	r2, [r3, #12]
 800803e:	e04f      	b.n	80080e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	77bb      	strb	r3, [r7, #30]
 8008044:	e04c      	b.n	80080e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008046:	7ffb      	ldrb	r3, [r7, #31]
 8008048:	2b08      	cmp	r3, #8
 800804a:	d828      	bhi.n	800809e <UART_SetConfig+0x462>
 800804c:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <UART_SetConfig+0x418>)
 800804e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008052:	bf00      	nop
 8008054:	08008079 	.word	0x08008079
 8008058:	08008081 	.word	0x08008081
 800805c:	08008089 	.word	0x08008089
 8008060:	0800809f 	.word	0x0800809f
 8008064:	0800808f 	.word	0x0800808f
 8008068:	0800809f 	.word	0x0800809f
 800806c:	0800809f 	.word	0x0800809f
 8008070:	0800809f 	.word	0x0800809f
 8008074:	08008097 	.word	0x08008097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008078:	f7fd fc1a 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 800807c:	61b8      	str	r0, [r7, #24]
        break;
 800807e:	e013      	b.n	80080a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008080:	f7fd fc2a 	bl	80058d8 <HAL_RCC_GetPCLK2Freq>
 8008084:	61b8      	str	r0, [r7, #24]
        break;
 8008086:	e00f      	b.n	80080a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008088:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <UART_SetConfig+0x4c4>)
 800808a:	61bb      	str	r3, [r7, #24]
        break;
 800808c:	e00c      	b.n	80080a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800808e:	f7fd fafd 	bl	800568c <HAL_RCC_GetSysClockFreq>
 8008092:	61b8      	str	r0, [r7, #24]
        break;
 8008094:	e008      	b.n	80080a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800809a:	61bb      	str	r3, [r7, #24]
        break;
 800809c:	e004      	b.n	80080a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	77bb      	strb	r3, [r7, #30]
        break;
 80080a6:	bf00      	nop
    }

    if (pclk != 0U)
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d018      	beq.n	80080e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	085a      	lsrs	r2, r3, #1
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	441a      	add	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b0f      	cmp	r3, #15
 80080c6:	d909      	bls.n	80080dc <UART_SetConfig+0x4a0>
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ce:	d205      	bcs.n	80080dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	60da      	str	r2, [r3, #12]
 80080da:	e001      	b.n	80080e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80080ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3720      	adds	r7, #32
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	40007c00 	.word	0x40007c00
 80080fc:	40023800 	.word	0x40023800
 8008100:	00f42400 	.word	0x00f42400

08008104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	f003 0308 	and.w	r3, r3, #8
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	f003 0310 	and.w	r3, r3, #16
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	f003 0320 	and.w	r3, r3, #32
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01a      	beq.n	800821a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008202:	d10a      	bne.n	800821a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	430a      	orrs	r2, r1
 8008218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	430a      	orrs	r2, r1
 800823a:	605a      	str	r2, [r3, #4]
  }
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af02      	add	r7, sp, #8
 800824e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008258:	f7fb ff1c 	bl	8004094 <HAL_GetTick>
 800825c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0308 	and.w	r3, r3, #8
 8008268:	2b08      	cmp	r3, #8
 800826a:	d10e      	bne.n	800828a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800826c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f831 	bl	80082e2 <UART_WaitOnFlagUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e027      	b.n	80082da <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b04      	cmp	r3, #4
 8008296:	d10e      	bne.n	80082b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f81b 	bl	80082e2 <UART_WaitOnFlagUntilTimeout>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e011      	b.n	80082da <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2220      	movs	r2, #32
 80082c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b09c      	sub	sp, #112	; 0x70
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	603b      	str	r3, [r7, #0]
 80082ee:	4613      	mov	r3, r2
 80082f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f2:	e0a7      	b.n	8008444 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fa:	f000 80a3 	beq.w	8008444 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fe:	f7fb fec9 	bl	8004094 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800830a:	429a      	cmp	r2, r3
 800830c:	d302      	bcc.n	8008314 <UART_WaitOnFlagUntilTimeout+0x32>
 800830e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008310:	2b00      	cmp	r3, #0
 8008312:	d13f      	bne.n	8008394 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008324:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008328:	667b      	str	r3, [r7, #100]	; 0x64
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008334:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008338:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800833a:	e841 2300 	strex	r3, r2, [r1]
 800833e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e6      	bne.n	8008314 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3308      	adds	r3, #8
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	663b      	str	r3, [r7, #96]	; 0x60
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3308      	adds	r3, #8
 8008364:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008366:	64ba      	str	r2, [r7, #72]	; 0x48
 8008368:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800836c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e5      	bne.n	8008346 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2220      	movs	r2, #32
 800837e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2220      	movs	r2, #32
 8008384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e068      	b.n	8008466 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d050      	beq.n	8008444 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083b0:	d148      	bne.n	8008444 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083ba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083da:	637b      	str	r3, [r7, #52]	; 0x34
 80083dc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e6      	bne.n	80083bc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3308      	adds	r3, #8
 80083f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	613b      	str	r3, [r7, #16]
   return(result);
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f023 0301 	bic.w	r3, r3, #1
 8008404:	66bb      	str	r3, [r7, #104]	; 0x68
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3308      	adds	r3, #8
 800840c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800840e:	623a      	str	r2, [r7, #32]
 8008410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	69f9      	ldr	r1, [r7, #28]
 8008414:	6a3a      	ldr	r2, [r7, #32]
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	61bb      	str	r3, [r7, #24]
   return(result);
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e5      	bne.n	80083ee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2220      	movs	r2, #32
 8008426:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2220      	movs	r2, #32
 800842c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2220      	movs	r2, #32
 8008434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e010      	b.n	8008466 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	69da      	ldr	r2, [r3, #28]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	4013      	ands	r3, r2
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	429a      	cmp	r2, r3
 8008452:	bf0c      	ite	eq
 8008454:	2301      	moveq	r3, #1
 8008456:	2300      	movne	r3, #0
 8008458:	b2db      	uxtb	r3, r3
 800845a:	461a      	mov	r2, r3
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	429a      	cmp	r2, r3
 8008460:	f43f af48 	beq.w	80082f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3770      	adds	r7, #112	; 0x70
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b096      	sub	sp, #88	; 0x58
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	4613      	mov	r3, r2
 800847c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	88fa      	ldrh	r2, [r7, #6]
 8008488:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2222      	movs	r2, #34	; 0x22
 8008498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d028      	beq.n	80084f6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a8:	4a3e      	ldr	r2, [pc, #248]	; (80085a4 <UART_Start_Receive_DMA+0x134>)
 80084aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084b0:	4a3d      	ldr	r2, [pc, #244]	; (80085a8 <UART_Start_Receive_DMA+0x138>)
 80084b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084b8:	4a3c      	ldr	r2, [pc, #240]	; (80085ac <UART_Start_Receive_DMA+0x13c>)
 80084ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c0:	2200      	movs	r2, #0
 80084c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3324      	adds	r3, #36	; 0x24
 80084ce:	4619      	mov	r1, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d4:	461a      	mov	r2, r3
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	f7fb ffcc 	bl	8004474 <HAL_DMA_Start_IT>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d009      	beq.n	80084f6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2210      	movs	r2, #16
 80084e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2220      	movs	r2, #32
 80084ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e051      	b.n	800859a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d018      	beq.n	8008530 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008506:	e853 3f00 	ldrex	r3, [r3]
 800850a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008512:	657b      	str	r3, [r7, #84]	; 0x54
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800851c:	64bb      	str	r3, [r7, #72]	; 0x48
 800851e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008520:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008524:	e841 2300 	strex	r3, r2, [r1]
 8008528:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800852a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e6      	bne.n	80084fe <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3308      	adds	r3, #8
 8008536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	e853 3f00 	ldrex	r3, [r3]
 800853e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	f043 0301 	orr.w	r3, r3, #1
 8008546:	653b      	str	r3, [r7, #80]	; 0x50
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3308      	adds	r3, #8
 800854e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008550:	637a      	str	r2, [r7, #52]	; 0x34
 8008552:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008554:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008558:	e841 2300 	strex	r3, r2, [r1]
 800855c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e5      	bne.n	8008530 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3308      	adds	r3, #8
 800856a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	e853 3f00 	ldrex	r3, [r3]
 8008572:	613b      	str	r3, [r7, #16]
   return(result);
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800857a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3308      	adds	r3, #8
 8008582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008584:	623a      	str	r2, [r7, #32]
 8008586:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008588:	69f9      	ldr	r1, [r7, #28]
 800858a:	6a3a      	ldr	r2, [r7, #32]
 800858c:	e841 2300 	strex	r3, r2, [r1]
 8008590:	61bb      	str	r3, [r7, #24]
   return(result);
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1e5      	bne.n	8008564 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3758      	adds	r7, #88	; 0x58
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	08008777 	.word	0x08008777
 80085a8:	0800889f 	.word	0x0800889f
 80085ac:	080088dd 	.word	0x080088dd

080085b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b089      	sub	sp, #36	; 0x24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	e853 3f00 	ldrex	r3, [r3]
 80085c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085cc:	61fb      	str	r3, [r7, #28]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	61bb      	str	r3, [r7, #24]
 80085d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085da:	6979      	ldr	r1, [r7, #20]
 80085dc:	69ba      	ldr	r2, [r7, #24]
 80085de:	e841 2300 	strex	r3, r2, [r1]
 80085e2:	613b      	str	r3, [r7, #16]
   return(result);
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1e6      	bne.n	80085b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2220      	movs	r2, #32
 80085ee:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80085f0:	bf00      	nop
 80085f2:	3724      	adds	r7, #36	; 0x24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b095      	sub	sp, #84	; 0x54
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008622:	643b      	str	r3, [r7, #64]	; 0x40
 8008624:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e6      	bne.n	8008604 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3308      	adds	r3, #8
 800863c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	61fb      	str	r3, [r7, #28]
   return(result);
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	f023 0301 	bic.w	r3, r3, #1
 800864c:	64bb      	str	r3, [r7, #72]	; 0x48
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3308      	adds	r3, #8
 8008654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008658:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800865c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e5      	bne.n	8008636 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800866e:	2b01      	cmp	r3, #1
 8008670:	d118      	bne.n	80086a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	e853 3f00 	ldrex	r3, [r3]
 800867e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	f023 0310 	bic.w	r3, r3, #16
 8008686:	647b      	str	r3, [r7, #68]	; 0x44
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008690:	61bb      	str	r3, [r7, #24]
 8008692:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008694:	6979      	ldr	r1, [r7, #20]
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	e841 2300 	strex	r3, r2, [r1]
 800869c:	613b      	str	r3, [r7, #16]
   return(result);
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1e6      	bne.n	8008672 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80086b8:	bf00      	nop
 80086ba:	3754      	adds	r7, #84	; 0x54
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b090      	sub	sp, #64	; 0x40
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086da:	d037      	beq.n	800874c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80086dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086de:	2200      	movs	r2, #0
 80086e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3308      	adds	r3, #8
 80086ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	e853 3f00 	ldrex	r3, [r3]
 80086f2:	623b      	str	r3, [r7, #32]
   return(result);
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80086fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3308      	adds	r3, #8
 8008702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008704:	633a      	str	r2, [r7, #48]	; 0x30
 8008706:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800870a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800870c:	e841 2300 	strex	r3, r2, [r1]
 8008710:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e5      	bne.n	80086e4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	e853 3f00 	ldrex	r3, [r3]
 8008724:	60fb      	str	r3, [r7, #12]
   return(result);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800872c:	637b      	str	r3, [r7, #52]	; 0x34
 800872e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008736:	61fb      	str	r3, [r7, #28]
 8008738:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873a:	69b9      	ldr	r1, [r7, #24]
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	e841 2300 	strex	r3, r2, [r1]
 8008742:	617b      	str	r3, [r7, #20]
   return(result);
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1e6      	bne.n	8008718 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800874a:	e002      	b.n	8008752 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800874c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800874e:	f7fa f94f 	bl	80029f0 <HAL_UART_TxCpltCallback>
}
 8008752:	bf00      	nop
 8008754:	3740      	adds	r7, #64	; 0x40
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008766:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f7ff fa33 	bl	8007bd4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800876e:	bf00      	nop
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b09c      	sub	sp, #112	; 0x70
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800878c:	d071      	beq.n	8008872 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800878e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008790:	2200      	movs	r2, #0
 8008792:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80087ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80087b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087bc:	e841 2300 	strex	r3, r2, [r1]
 80087c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e6      	bne.n	8008796 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3308      	adds	r3, #8
 80087ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087da:	f023 0301 	bic.w	r3, r3, #1
 80087de:	667b      	str	r3, [r7, #100]	; 0x64
 80087e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3308      	adds	r3, #8
 80087e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087e8:	647a      	str	r2, [r7, #68]	; 0x44
 80087ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087f0:	e841 2300 	strex	r3, r2, [r1]
 80087f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e5      	bne.n	80087c8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3308      	adds	r3, #8
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	623b      	str	r3, [r7, #32]
   return(result);
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008812:	663b      	str	r3, [r7, #96]	; 0x60
 8008814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3308      	adds	r3, #8
 800881a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800881c:	633a      	str	r2, [r7, #48]	; 0x30
 800881e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e5      	bne.n	80087fc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008832:	2220      	movs	r2, #32
 8008834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800883a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800883c:	2b01      	cmp	r3, #1
 800883e:	d118      	bne.n	8008872 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	60fb      	str	r3, [r7, #12]
   return(result);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f023 0310 	bic.w	r3, r3, #16
 8008854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800885e:	61fb      	str	r3, [r7, #28]
 8008860:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	69b9      	ldr	r1, [r7, #24]
 8008864:	69fa      	ldr	r2, [r7, #28]
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	617b      	str	r3, [r7, #20]
   return(result);
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e6      	bne.n	8008840 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008874:	2200      	movs	r2, #0
 8008876:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800887a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800887c:	2b01      	cmp	r3, #1
 800887e:	d107      	bne.n	8008890 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008882:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008886:	4619      	mov	r1, r3
 8008888:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800888a:	f7ff f9c1 	bl	8007c10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800888e:	e002      	b.n	8008896 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008890:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008892:	f7fa f8bf 	bl	8002a14 <HAL_UART_RxCpltCallback>
}
 8008896:	bf00      	nop
 8008898:	3770      	adds	r7, #112	; 0x70
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2201      	movs	r2, #1
 80088b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d109      	bne.n	80088ce <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088c0:	085b      	lsrs	r3, r3, #1
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	4619      	mov	r1, r3
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff f9a2 	bl	8007c10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088cc:	e002      	b.n	80088d4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7ff f98a 	bl	8007be8 <HAL_UART_RxHalfCpltCallback>
}
 80088d4:	bf00      	nop
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008902:	2b80      	cmp	r3, #128	; 0x80
 8008904:	d109      	bne.n	800891a <UART_DMAError+0x3e>
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	2b21      	cmp	r3, #33	; 0x21
 800890a:	d106      	bne.n	800891a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	2200      	movs	r2, #0
 8008910:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008914:	6978      	ldr	r0, [r7, #20]
 8008916:	f7ff fe4b 	bl	80085b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008924:	2b40      	cmp	r3, #64	; 0x40
 8008926:	d109      	bne.n	800893c <UART_DMAError+0x60>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b22      	cmp	r3, #34	; 0x22
 800892c:	d106      	bne.n	800893c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2200      	movs	r2, #0
 8008932:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008936:	6978      	ldr	r0, [r7, #20]
 8008938:	f7ff fe60 	bl	80085fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008942:	f043 0210 	orr.w	r2, r3, #16
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800894c:	6978      	ldr	r0, [r7, #20]
 800894e:	f7ff f955 	bl	8007bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008952:	bf00      	nop
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f7ff f93f 	bl	8007bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800897e:	bf00      	nop
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b088      	sub	sp, #32
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	e853 3f00 	ldrex	r3, [r3]
 800899a:	60bb      	str	r3, [r7, #8]
   return(result);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a2:	61fb      	str	r3, [r7, #28]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	461a      	mov	r2, r3
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b0:	6979      	ldr	r1, [r7, #20]
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	e841 2300 	strex	r3, r2, [r1]
 80089b8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1e6      	bne.n	800898e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2220      	movs	r2, #32
 80089c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7fa f80f 	bl	80029f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089d2:	bf00      	nop
 80089d4:	3720      	adds	r7, #32
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e054      	b.n	8008a9e <HAL_RS485Ex_Init+0xc2>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d106      	bne.n	8008a0a <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f7fb f89d 	bl	8003b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2224      	movs	r2, #36	; 0x24
 8008a0e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f022 0201 	bic.w	r2, r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f7ff f90b 	bl	8007c3c <UART_SetConfig>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d101      	bne.n	8008a30 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e036      	b.n	8008a9e <HAL_RS485Ex_Init+0xc2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f7ff fb63 	bl	8008104 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	689a      	ldr	r2, [r3, #8]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a4c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	055b      	lsls	r3, r3, #21
 8008a66:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	041b      	lsls	r3, r3, #16
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <HAL_RS485Ex_Init+0xcc>)
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	6812      	ldr	r2, [r2, #0]
 8008a80:	6979      	ldr	r1, [r7, #20]
 8008a82:	430b      	orrs	r3, r1
 8008a84:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f042 0201 	orr.w	r2, r2, #1
 8008a94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f7ff fbd6 	bl	8008248 <UART_CheckIdleState>
 8008a9c:	4603      	mov	r3, r0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	fc00ffff 	.word	0xfc00ffff

08008aac <__cxa_pure_virtual>:
 8008aac:	b508      	push	{r3, lr}
 8008aae:	f000 f80d 	bl	8008acc <_ZSt9terminatev>

08008ab2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008ab2:	b508      	push	{r3, lr}
 8008ab4:	4780      	blx	r0
 8008ab6:	f000 f80e 	bl	8008ad6 <abort>
	...

08008abc <_ZSt13get_terminatev>:
 8008abc:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <_ZSt13get_terminatev+0xc>)
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	f3bf 8f5b 	dmb	ish
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	2000000c 	.word	0x2000000c

08008acc <_ZSt9terminatev>:
 8008acc:	b508      	push	{r3, lr}
 8008ace:	f7ff fff5 	bl	8008abc <_ZSt13get_terminatev>
 8008ad2:	f7ff ffee 	bl	8008ab2 <_ZN10__cxxabiv111__terminateEPFvvE>

08008ad6 <abort>:
 8008ad6:	b508      	push	{r3, lr}
 8008ad8:	2006      	movs	r0, #6
 8008ada:	f000 f873 	bl	8008bc4 <raise>
 8008ade:	2001      	movs	r0, #1
 8008ae0:	f7fb fa0c 	bl	8003efc <_exit>

08008ae4 <__errno>:
 8008ae4:	4b01      	ldr	r3, [pc, #4]	; (8008aec <__errno+0x8>)
 8008ae6:	6818      	ldr	r0, [r3, #0]
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	20000010 	.word	0x20000010

08008af0 <__libc_init_array>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	4d0d      	ldr	r5, [pc, #52]	; (8008b28 <__libc_init_array+0x38>)
 8008af4:	4c0d      	ldr	r4, [pc, #52]	; (8008b2c <__libc_init_array+0x3c>)
 8008af6:	1b64      	subs	r4, r4, r5
 8008af8:	10a4      	asrs	r4, r4, #2
 8008afa:	2600      	movs	r6, #0
 8008afc:	42a6      	cmp	r6, r4
 8008afe:	d109      	bne.n	8008b14 <__libc_init_array+0x24>
 8008b00:	4d0b      	ldr	r5, [pc, #44]	; (8008b30 <__libc_init_array+0x40>)
 8008b02:	4c0c      	ldr	r4, [pc, #48]	; (8008b34 <__libc_init_array+0x44>)
 8008b04:	f000 f9b0 	bl	8008e68 <_init>
 8008b08:	1b64      	subs	r4, r4, r5
 8008b0a:	10a4      	asrs	r4, r4, #2
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	42a6      	cmp	r6, r4
 8008b10:	d105      	bne.n	8008b1e <__libc_init_array+0x2e>
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b18:	4798      	blx	r3
 8008b1a:	3601      	adds	r6, #1
 8008b1c:	e7ee      	b.n	8008afc <__libc_init_array+0xc>
 8008b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b22:	4798      	blx	r3
 8008b24:	3601      	adds	r6, #1
 8008b26:	e7f2      	b.n	8008b0e <__libc_init_array+0x1e>
 8008b28:	08009154 	.word	0x08009154
 8008b2c:	08009154 	.word	0x08009154
 8008b30:	08009154 	.word	0x08009154
 8008b34:	0800915c 	.word	0x0800915c

08008b38 <memcpy>:
 8008b38:	440a      	add	r2, r1
 8008b3a:	4291      	cmp	r1, r2
 8008b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b40:	d100      	bne.n	8008b44 <memcpy+0xc>
 8008b42:	4770      	bx	lr
 8008b44:	b510      	push	{r4, lr}
 8008b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b4e:	4291      	cmp	r1, r2
 8008b50:	d1f9      	bne.n	8008b46 <memcpy+0xe>
 8008b52:	bd10      	pop	{r4, pc}

08008b54 <memset>:
 8008b54:	4402      	add	r2, r0
 8008b56:	4603      	mov	r3, r0
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d100      	bne.n	8008b5e <memset+0xa>
 8008b5c:	4770      	bx	lr
 8008b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b62:	e7f9      	b.n	8008b58 <memset+0x4>

08008b64 <realloc>:
 8008b64:	4b02      	ldr	r3, [pc, #8]	; (8008b70 <realloc+0xc>)
 8008b66:	460a      	mov	r2, r1
 8008b68:	4601      	mov	r1, r0
 8008b6a:	6818      	ldr	r0, [r3, #0]
 8008b6c:	f000 b8da 	b.w	8008d24 <_realloc_r>
 8008b70:	20000010 	.word	0x20000010

08008b74 <_raise_r>:
 8008b74:	291f      	cmp	r1, #31
 8008b76:	b538      	push	{r3, r4, r5, lr}
 8008b78:	4604      	mov	r4, r0
 8008b7a:	460d      	mov	r5, r1
 8008b7c:	d904      	bls.n	8008b88 <_raise_r+0x14>
 8008b7e:	2316      	movs	r3, #22
 8008b80:	6003      	str	r3, [r0, #0]
 8008b82:	f04f 30ff 	mov.w	r0, #4294967295
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b8a:	b112      	cbz	r2, 8008b92 <_raise_r+0x1e>
 8008b8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b90:	b94b      	cbnz	r3, 8008ba6 <_raise_r+0x32>
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 f830 	bl	8008bf8 <_getpid_r>
 8008b98:	462a      	mov	r2, r5
 8008b9a:	4601      	mov	r1, r0
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ba2:	f000 b817 	b.w	8008bd4 <_kill_r>
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d00a      	beq.n	8008bc0 <_raise_r+0x4c>
 8008baa:	1c59      	adds	r1, r3, #1
 8008bac:	d103      	bne.n	8008bb6 <_raise_r+0x42>
 8008bae:	2316      	movs	r3, #22
 8008bb0:	6003      	str	r3, [r0, #0]
 8008bb2:	2001      	movs	r0, #1
 8008bb4:	e7e7      	b.n	8008b86 <_raise_r+0x12>
 8008bb6:	2400      	movs	r4, #0
 8008bb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	4798      	blx	r3
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	e7e0      	b.n	8008b86 <_raise_r+0x12>

08008bc4 <raise>:
 8008bc4:	4b02      	ldr	r3, [pc, #8]	; (8008bd0 <raise+0xc>)
 8008bc6:	4601      	mov	r1, r0
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	f7ff bfd3 	b.w	8008b74 <_raise_r>
 8008bce:	bf00      	nop
 8008bd0:	20000010 	.word	0x20000010

08008bd4 <_kill_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d07      	ldr	r5, [pc, #28]	; (8008bf4 <_kill_r+0x20>)
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4604      	mov	r4, r0
 8008bdc:	4608      	mov	r0, r1
 8008bde:	4611      	mov	r1, r2
 8008be0:	602b      	str	r3, [r5, #0]
 8008be2:	f7fb f97b 	bl	8003edc <_kill>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d102      	bne.n	8008bf0 <_kill_r+0x1c>
 8008bea:	682b      	ldr	r3, [r5, #0]
 8008bec:	b103      	cbz	r3, 8008bf0 <_kill_r+0x1c>
 8008bee:	6023      	str	r3, [r4, #0]
 8008bf0:	bd38      	pop	{r3, r4, r5, pc}
 8008bf2:	bf00      	nop
 8008bf4:	200048f8 	.word	0x200048f8

08008bf8 <_getpid_r>:
 8008bf8:	f7fb b968 	b.w	8003ecc <_getpid>

08008bfc <sbrk_aligned>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	4e0e      	ldr	r6, [pc, #56]	; (8008c38 <sbrk_aligned+0x3c>)
 8008c00:	460c      	mov	r4, r1
 8008c02:	6831      	ldr	r1, [r6, #0]
 8008c04:	4605      	mov	r5, r0
 8008c06:	b911      	cbnz	r1, 8008c0e <sbrk_aligned+0x12>
 8008c08:	f000 f8bc 	bl	8008d84 <_sbrk_r>
 8008c0c:	6030      	str	r0, [r6, #0]
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 f8b7 	bl	8008d84 <_sbrk_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d00a      	beq.n	8008c30 <sbrk_aligned+0x34>
 8008c1a:	1cc4      	adds	r4, r0, #3
 8008c1c:	f024 0403 	bic.w	r4, r4, #3
 8008c20:	42a0      	cmp	r0, r4
 8008c22:	d007      	beq.n	8008c34 <sbrk_aligned+0x38>
 8008c24:	1a21      	subs	r1, r4, r0
 8008c26:	4628      	mov	r0, r5
 8008c28:	f000 f8ac 	bl	8008d84 <_sbrk_r>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d101      	bne.n	8008c34 <sbrk_aligned+0x38>
 8008c30:	f04f 34ff 	mov.w	r4, #4294967295
 8008c34:	4620      	mov	r0, r4
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	200048f4 	.word	0x200048f4

08008c3c <_malloc_r>:
 8008c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c40:	1ccd      	adds	r5, r1, #3
 8008c42:	f025 0503 	bic.w	r5, r5, #3
 8008c46:	3508      	adds	r5, #8
 8008c48:	2d0c      	cmp	r5, #12
 8008c4a:	bf38      	it	cc
 8008c4c:	250c      	movcc	r5, #12
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	4607      	mov	r7, r0
 8008c52:	db01      	blt.n	8008c58 <_malloc_r+0x1c>
 8008c54:	42a9      	cmp	r1, r5
 8008c56:	d905      	bls.n	8008c64 <_malloc_r+0x28>
 8008c58:	230c      	movs	r3, #12
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	2600      	movs	r6, #0
 8008c5e:	4630      	mov	r0, r6
 8008c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c64:	4e2e      	ldr	r6, [pc, #184]	; (8008d20 <_malloc_r+0xe4>)
 8008c66:	f000 f89d 	bl	8008da4 <__malloc_lock>
 8008c6a:	6833      	ldr	r3, [r6, #0]
 8008c6c:	461c      	mov	r4, r3
 8008c6e:	bb34      	cbnz	r4, 8008cbe <_malloc_r+0x82>
 8008c70:	4629      	mov	r1, r5
 8008c72:	4638      	mov	r0, r7
 8008c74:	f7ff ffc2 	bl	8008bfc <sbrk_aligned>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	d14d      	bne.n	8008d1a <_malloc_r+0xde>
 8008c7e:	6834      	ldr	r4, [r6, #0]
 8008c80:	4626      	mov	r6, r4
 8008c82:	2e00      	cmp	r6, #0
 8008c84:	d140      	bne.n	8008d08 <_malloc_r+0xcc>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	eb04 0803 	add.w	r8, r4, r3
 8008c90:	f000 f878 	bl	8008d84 <_sbrk_r>
 8008c94:	4580      	cmp	r8, r0
 8008c96:	d13a      	bne.n	8008d0e <_malloc_r+0xd2>
 8008c98:	6821      	ldr	r1, [r4, #0]
 8008c9a:	3503      	adds	r5, #3
 8008c9c:	1a6d      	subs	r5, r5, r1
 8008c9e:	f025 0503 	bic.w	r5, r5, #3
 8008ca2:	3508      	adds	r5, #8
 8008ca4:	2d0c      	cmp	r5, #12
 8008ca6:	bf38      	it	cc
 8008ca8:	250c      	movcc	r5, #12
 8008caa:	4629      	mov	r1, r5
 8008cac:	4638      	mov	r0, r7
 8008cae:	f7ff ffa5 	bl	8008bfc <sbrk_aligned>
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d02b      	beq.n	8008d0e <_malloc_r+0xd2>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	442b      	add	r3, r5
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	e00e      	b.n	8008cdc <_malloc_r+0xa0>
 8008cbe:	6822      	ldr	r2, [r4, #0]
 8008cc0:	1b52      	subs	r2, r2, r5
 8008cc2:	d41e      	bmi.n	8008d02 <_malloc_r+0xc6>
 8008cc4:	2a0b      	cmp	r2, #11
 8008cc6:	d916      	bls.n	8008cf6 <_malloc_r+0xba>
 8008cc8:	1961      	adds	r1, r4, r5
 8008cca:	42a3      	cmp	r3, r4
 8008ccc:	6025      	str	r5, [r4, #0]
 8008cce:	bf18      	it	ne
 8008cd0:	6059      	strne	r1, [r3, #4]
 8008cd2:	6863      	ldr	r3, [r4, #4]
 8008cd4:	bf08      	it	eq
 8008cd6:	6031      	streq	r1, [r6, #0]
 8008cd8:	5162      	str	r2, [r4, r5]
 8008cda:	604b      	str	r3, [r1, #4]
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f104 060b 	add.w	r6, r4, #11
 8008ce2:	f000 f865 	bl	8008db0 <__malloc_unlock>
 8008ce6:	f026 0607 	bic.w	r6, r6, #7
 8008cea:	1d23      	adds	r3, r4, #4
 8008cec:	1af2      	subs	r2, r6, r3
 8008cee:	d0b6      	beq.n	8008c5e <_malloc_r+0x22>
 8008cf0:	1b9b      	subs	r3, r3, r6
 8008cf2:	50a3      	str	r3, [r4, r2]
 8008cf4:	e7b3      	b.n	8008c5e <_malloc_r+0x22>
 8008cf6:	6862      	ldr	r2, [r4, #4]
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	bf0c      	ite	eq
 8008cfc:	6032      	streq	r2, [r6, #0]
 8008cfe:	605a      	strne	r2, [r3, #4]
 8008d00:	e7ec      	b.n	8008cdc <_malloc_r+0xa0>
 8008d02:	4623      	mov	r3, r4
 8008d04:	6864      	ldr	r4, [r4, #4]
 8008d06:	e7b2      	b.n	8008c6e <_malloc_r+0x32>
 8008d08:	4634      	mov	r4, r6
 8008d0a:	6876      	ldr	r6, [r6, #4]
 8008d0c:	e7b9      	b.n	8008c82 <_malloc_r+0x46>
 8008d0e:	230c      	movs	r3, #12
 8008d10:	603b      	str	r3, [r7, #0]
 8008d12:	4638      	mov	r0, r7
 8008d14:	f000 f84c 	bl	8008db0 <__malloc_unlock>
 8008d18:	e7a1      	b.n	8008c5e <_malloc_r+0x22>
 8008d1a:	6025      	str	r5, [r4, #0]
 8008d1c:	e7de      	b.n	8008cdc <_malloc_r+0xa0>
 8008d1e:	bf00      	nop
 8008d20:	200048f0 	.word	0x200048f0

08008d24 <_realloc_r>:
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	4680      	mov	r8, r0
 8008d2a:	4614      	mov	r4, r2
 8008d2c:	460e      	mov	r6, r1
 8008d2e:	b921      	cbnz	r1, 8008d3a <_realloc_r+0x16>
 8008d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d34:	4611      	mov	r1, r2
 8008d36:	f7ff bf81 	b.w	8008c3c <_malloc_r>
 8008d3a:	b92a      	cbnz	r2, 8008d48 <_realloc_r+0x24>
 8008d3c:	f000 f83e 	bl	8008dbc <_free_r>
 8008d40:	4625      	mov	r5, r4
 8008d42:	4628      	mov	r0, r5
 8008d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d48:	f000 f884 	bl	8008e54 <_malloc_usable_size_r>
 8008d4c:	4284      	cmp	r4, r0
 8008d4e:	4607      	mov	r7, r0
 8008d50:	d802      	bhi.n	8008d58 <_realloc_r+0x34>
 8008d52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d56:	d812      	bhi.n	8008d7e <_realloc_r+0x5a>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4640      	mov	r0, r8
 8008d5c:	f7ff ff6e 	bl	8008c3c <_malloc_r>
 8008d60:	4605      	mov	r5, r0
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d0ed      	beq.n	8008d42 <_realloc_r+0x1e>
 8008d66:	42bc      	cmp	r4, r7
 8008d68:	4622      	mov	r2, r4
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	bf28      	it	cs
 8008d6e:	463a      	movcs	r2, r7
 8008d70:	f7ff fee2 	bl	8008b38 <memcpy>
 8008d74:	4631      	mov	r1, r6
 8008d76:	4640      	mov	r0, r8
 8008d78:	f000 f820 	bl	8008dbc <_free_r>
 8008d7c:	e7e1      	b.n	8008d42 <_realloc_r+0x1e>
 8008d7e:	4635      	mov	r5, r6
 8008d80:	e7df      	b.n	8008d42 <_realloc_r+0x1e>
	...

08008d84 <_sbrk_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	4d06      	ldr	r5, [pc, #24]	; (8008da0 <_sbrk_r+0x1c>)
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	602b      	str	r3, [r5, #0]
 8008d90:	f7fb f8be 	bl	8003f10 <_sbrk>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d102      	bne.n	8008d9e <_sbrk_r+0x1a>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	b103      	cbz	r3, 8008d9e <_sbrk_r+0x1a>
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	200048f8 	.word	0x200048f8

08008da4 <__malloc_lock>:
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <__malloc_lock+0x8>)
 8008da6:	f000 b85d 	b.w	8008e64 <__retarget_lock_acquire_recursive>
 8008daa:	bf00      	nop
 8008dac:	200048fc 	.word	0x200048fc

08008db0 <__malloc_unlock>:
 8008db0:	4801      	ldr	r0, [pc, #4]	; (8008db8 <__malloc_unlock+0x8>)
 8008db2:	f000 b858 	b.w	8008e66 <__retarget_lock_release_recursive>
 8008db6:	bf00      	nop
 8008db8:	200048fc 	.word	0x200048fc

08008dbc <_free_r>:
 8008dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dbe:	2900      	cmp	r1, #0
 8008dc0:	d044      	beq.n	8008e4c <_free_r+0x90>
 8008dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc6:	9001      	str	r0, [sp, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f1a1 0404 	sub.w	r4, r1, #4
 8008dce:	bfb8      	it	lt
 8008dd0:	18e4      	addlt	r4, r4, r3
 8008dd2:	f7ff ffe7 	bl	8008da4 <__malloc_lock>
 8008dd6:	4a1e      	ldr	r2, [pc, #120]	; (8008e50 <_free_r+0x94>)
 8008dd8:	9801      	ldr	r0, [sp, #4]
 8008dda:	6813      	ldr	r3, [r2, #0]
 8008ddc:	b933      	cbnz	r3, 8008dec <_free_r+0x30>
 8008dde:	6063      	str	r3, [r4, #4]
 8008de0:	6014      	str	r4, [r2, #0]
 8008de2:	b003      	add	sp, #12
 8008de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008de8:	f7ff bfe2 	b.w	8008db0 <__malloc_unlock>
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	d908      	bls.n	8008e02 <_free_r+0x46>
 8008df0:	6825      	ldr	r5, [r4, #0]
 8008df2:	1961      	adds	r1, r4, r5
 8008df4:	428b      	cmp	r3, r1
 8008df6:	bf01      	itttt	eq
 8008df8:	6819      	ldreq	r1, [r3, #0]
 8008dfa:	685b      	ldreq	r3, [r3, #4]
 8008dfc:	1949      	addeq	r1, r1, r5
 8008dfe:	6021      	streq	r1, [r4, #0]
 8008e00:	e7ed      	b.n	8008dde <_free_r+0x22>
 8008e02:	461a      	mov	r2, r3
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	b10b      	cbz	r3, 8008e0c <_free_r+0x50>
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	d9fa      	bls.n	8008e02 <_free_r+0x46>
 8008e0c:	6811      	ldr	r1, [r2, #0]
 8008e0e:	1855      	adds	r5, r2, r1
 8008e10:	42a5      	cmp	r5, r4
 8008e12:	d10b      	bne.n	8008e2c <_free_r+0x70>
 8008e14:	6824      	ldr	r4, [r4, #0]
 8008e16:	4421      	add	r1, r4
 8008e18:	1854      	adds	r4, r2, r1
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	6011      	str	r1, [r2, #0]
 8008e1e:	d1e0      	bne.n	8008de2 <_free_r+0x26>
 8008e20:	681c      	ldr	r4, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	6053      	str	r3, [r2, #4]
 8008e26:	4421      	add	r1, r4
 8008e28:	6011      	str	r1, [r2, #0]
 8008e2a:	e7da      	b.n	8008de2 <_free_r+0x26>
 8008e2c:	d902      	bls.n	8008e34 <_free_r+0x78>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	6003      	str	r3, [r0, #0]
 8008e32:	e7d6      	b.n	8008de2 <_free_r+0x26>
 8008e34:	6825      	ldr	r5, [r4, #0]
 8008e36:	1961      	adds	r1, r4, r5
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf04      	itt	eq
 8008e3c:	6819      	ldreq	r1, [r3, #0]
 8008e3e:	685b      	ldreq	r3, [r3, #4]
 8008e40:	6063      	str	r3, [r4, #4]
 8008e42:	bf04      	itt	eq
 8008e44:	1949      	addeq	r1, r1, r5
 8008e46:	6021      	streq	r1, [r4, #0]
 8008e48:	6054      	str	r4, [r2, #4]
 8008e4a:	e7ca      	b.n	8008de2 <_free_r+0x26>
 8008e4c:	b003      	add	sp, #12
 8008e4e:	bd30      	pop	{r4, r5, pc}
 8008e50:	200048f0 	.word	0x200048f0

08008e54 <_malloc_usable_size_r>:
 8008e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e58:	1f18      	subs	r0, r3, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	bfbc      	itt	lt
 8008e5e:	580b      	ldrlt	r3, [r1, r0]
 8008e60:	18c0      	addlt	r0, r0, r3
 8008e62:	4770      	bx	lr

08008e64 <__retarget_lock_acquire_recursive>:
 8008e64:	4770      	bx	lr

08008e66 <__retarget_lock_release_recursive>:
 8008e66:	4770      	bx	lr

08008e68 <_init>:
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	bf00      	nop
 8008e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e6e:	bc08      	pop	{r3}
 8008e70:	469e      	mov	lr, r3
 8008e72:	4770      	bx	lr

08008e74 <_fini>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	bf00      	nop
 8008e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7a:	bc08      	pop	{r3}
 8008e7c:	469e      	mov	lr, r3
 8008e7e:	4770      	bx	lr
